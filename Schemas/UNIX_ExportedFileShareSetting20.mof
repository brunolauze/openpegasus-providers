//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////



// Copyright (c) 2009 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "ManagedElement is an abstract class that provides a common "
       "superclass (or top of the inheritance tree) for the "
       "non-association classes in the CIM Schema." )]
class CIM_ManagedElement {

      [Description ( 
          "InstanceID is an optional property that may be used to "
          "opaquely and uniquely identify an instance of this class "
          "within the scope of the instantiating Namespace. Various "
          "subclasses of this class may override this property to "
          "make it required, or a key. Such subclasses may also "
          "modify the preferred algorithms for ensuring uniqueness "
          "that are defined below.\n"
          "To ensure uniqueness within the NameSpace, the value of "
          "InstanceID should be constructed using the following "
          "\"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If not null and the above "
          "\"preferred\" algorithm is not used, the defining entity "
          "must assure that the resulting InstanceID is not reused "
          "across any InstanceIDs produced by this or other "
          "providers for the NameSpace of this instance. \n"
          "If not set to null for DMTF-defined instances, the "
          "\"preferred\" algorithm must be used with the <OrgID> "
          "set to CIM." )]
   string InstanceID;

      [Description ( 
          "The Caption property is a short textual description "
          "(one- line string) of the object." ), 
       MaxLen ( 64 )]
   string Caption;

      [Description ( 
          "The Description property provides a textual description "
          "of the object." )]
   string Description;

      [Description ( 
          "A user-friendly name for the object. This property "
          "allows each instance to define a user-friendly name in "
          "addition to its key properties, identity data, and "
          "description information. \n"
          "Note that the Name property of ManagedSystemElement is "
          "also defined as a user-friendly name. But, it is often "
          "subclassed to be a Key. It is not reasonable that the "
          "same property can convey both identity and a "
          "user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of "
          "LogicalDevice), the same information can be present in "
          "both the Name and ElementName properties. Note that if "
          "there is an associated instance of "
          "CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask "
          "and MaxElementNameLen properties defined in that class." )]
   string ElementName;

      [Experimental, Description ( 
          "Generation is an optional, monotonically increasing "
          "property that may be used to identify a particular "
          "generation of the resource represented by this class.\n"
          "If Generation is supported by the implementation, its "
          "value shall not be null. \n"
          "Except as otherwise specified, a value (including null) "
          "of Generation specified at creation time shall be "
          "replaced by null if Generation is not supported by the "
          "implementation or shall be a, (possibly different), "
          "non-null value if the implementation does support Generation.\n"
          "After creation and if supported, Generation shall be "
          "updated, at least once per access, whenever the "
          "represented resource is modified, regardless of the "
          "source of the modification.\n"
          "Note: the Generation value only needs to be updated once "
          "between references, even if the resource is updated many "
          "times. The key point is to assure that it will be "
          "different if there have been updates, not to count each update.\n"
          "Note: unless otherwise specified, the value of "
          "Generation within one instance is not required to be "
          "coordinated with the value of Generation in any other instance.\n"
          "Note:the semantics of the instance, (as defined by its "
          "creation class), define the underlying resource. That "
          "underlying resource may be a collection or aggregation "
          "of resources. And, in that case, the semantics of the "
          "instance further define when updates to constituent "
          "resources also require updates to the Generation of the "
          "collective resource. Default behavior of composite "
          "aggregations should be to update the Generation of the "
          "composite whenever the Generation of a component is updated.\n"
          "Subclasses may define additional requirements for "
          "updates on some or all of related instances.\n"
          "For a particular instance, the value of Generation may "
          "wrap through zero, but the elapsed time between wraps "
          "shall be greater than 10\'s of years.\n"
          "This class does not require Generation to be unique "
          "across instances of other classes nor across instances "
          "of the same class that have different keys. Generation "
          "shall be different across power cycles, resets, or "
          "reboots if any of those actions results in an update. "
          "Generation may be different across power cycles, resets, "
          "or reboots if those actions do not result in an update. "
          "If the Generation property of an instance is non-null, "
          "and if any attempt to update the instance includes the "
          "Generation property, then if it doesn\'t match the "
          "current value, the update shall fail.\n"
          "The usage of this property is intended to be further "
          "specified by applicable management profiles. \n"
          "Typically, a client will read the value of this property "
          "and then supply that value as input to an operation that "
          "modifies the instance in some means. This may be via an "
          "explicit parameter in an extrinsic method or via an "
          "embedded value in an extrinsic method or intrinsic operation.\n"
          "For example: a profile may require that an intrinsic "
          "instance modification supply the Generation property and "
          "that it must match for the modification to succeed." )]
   uint64 Generation;


};



// Copyright (c) 2013 DMTF.  All rights reserved.
   [Abstract, Version ( "2.38.0" ), 
    ClassConstraint { "inv: SoID <> null implies SoOrgID <> null" }, 
    UMLPackagePath ( "CIM::Core::Settings" ), 
    Description ( 
       "CIM_SettingData is used to represent configuration and and "
       "operational parameters for CIM_ManagedElement instances. There "
       "are a number of different uses of CIM_SettingData supported in "
       "the model today. Additional uses may be defined in the future.\n"
       "Instances of CIM_SettingData may represent Aspects of a "
       "CIM_ManagedElement instance. This is modeled using the "
       "CIM_SettingsDefineState association. CIM_SettingData may be "
       "used to define capabilities when associated to an instance of "
       "CIM_Capabilities through the CIM_SettingsDefineCapabilities "
       "association. \n"
       "Instances of CIM_SettingData may represent different types of "
       "configurations for a CIM_ManagedElement, including persistent "
       "configurations, in progress configuration changes, or "
       "requested configurations. The CIM_ElementSettingData "
       "association is used to model the relationship between a "
       "CIM_SettingData instance and the CIM_ManagedElement for which "
       "it is a configuration. \n"
       "When an instance of CIM_SettingData represents a "
       "configuration, the current operational values for the "
       "parameters of the element are reflected by properties in the "
       "Element itself or by properties in its associations. These "
       "properties do not have to be the same values that are present "
       "in the SettingData object. For example, a modem might have a "
       "SettingData baud rate of 56Kb/sec but be operating at "
       "19.2Kb/sec. \n"
       "Note: The CIM_SettingData class is very similar to "
       "CIM_Setting, yet both classes are present in the model because "
       "many implementations have successfully used CIM_Setting. "
       "However, issues have arisen that could not be resolved without "
       "defining a new class. Therefore, until a new major release "
       "occurs, both classes will exist in the model. Refer to the "
       "Core White Paper for additional information. SettingData "
       "instances can be aggregated together into higher- level "
       "SettingData objects using ConcreteComponent associations." )]
class CIM_SettingData : CIM_ManagedElement {

      [Key, Override ( "InstanceID" ), 
       Description ( 
          "Within the scope of the instantiating Namespace, "
          "InstanceID opaquely and uniquely identifies an instance "
          "of this class. To ensure uniqueness within the "
          "NameSpace, the value of InstanceID should be constructed "
          "using the following \"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If the above \"preferred\" "
          "algorithm is not used, the defining entity must assure "
          "that the resulting InstanceID is not reused across any "
          "InstanceIDs produced by this or other providers for the "
          "NameSpace of this instance. \n"
          "For DMTF-defined instances, the \"preferred\" algorithm "
          "must be used with the <OrgID> set to CIM." )]
   string InstanceID;

      [Required, Override ( "ElementName" ), 
       Description ( 
          "The user-friendly name for this instance of SettingData. "
          "In addition, the user-friendly name can be used as an "
          "index property for a search or query. (Note: The name "
          "does not have to be unique within a namespace.)" )]
   string ElementName;

      [Description ( 
          "An instance of CIM_SettingData may correspond to a "
          "well-known configuration that exists for an associated "
          "CIM_ManagedElement. If the ConfigurationName property is "
          "non-NULL, the instance of CIM_SettingData shall "
          "correspond to a well-known configuration for a Managed "
          "Element, the value of the ConfigurationName property "
          "shall be the name of the configuration, and the "
          "ChangeableType property shall have the value 0 or 2. A "
          "value of NULL for the ConfigurationName property shall "
          "mean that the instance of CIM_SettingData does not "
          "correspond to a well-known configuration for a Managed "
          "Element or that this information is unknown." )]
   string ConfigurationName;

      [Description ( 
          "Enumeration indicating the type of setting. 0 \"Not "
          "Changeable - Persistent\" indicates the instance of "
          "SettingData represents primordial settings and shall not "
          "be modifiable. 1 \"Changeable - Transient\" indicates "
          "the SettingData represents modifiable settings that are "
          "not persisted. Establishing persistent settings from "
          "transient settings may be supported. 2 \"Changeable - "
          "Persistent\" indicates the SettingData represents a "
          "persistent configuration that may be modified. 3 \"Not "
          "Changeable - Transient\" indicates the SettingData "
          "represents a snapshot of the settings of the associated "
          "ManagedElement and is not persistent." ), 
       ValueMap { "0", "1", "2", "3" }, 
       Values { "Not Changeable - Persistent", 
          "Changeable - Transient", "Changeable - Persistent", 
          "Not Changeable - Transient" }]
   uint16 ChangeableType;

      [Experimental, Description ( 
          "The value of each CIM_ComponentSetting instance includes "
          "a CIM_SettingData instance that specifies further values "
          "for this CIM_SettingData instance. The values are "
          "interpreted according to the values of the Policy, "
          "ValueRole, and ValueRange properties included in each "
          "CIM_ComponentSetting instance.\n"
          "\n"
          "Note: If SoID is not null, then the embedded "
          "ComponentSetting elements may be interpreted as ITIL "
          "Service Level Targets.\n"
          "Note: For CIM v3, the type of ComponentSetting will be "
          "CIM_ComponentSetting. This is not represented as an "
          "EmbeddedInstance in CIM v2 to avoid a circular "
          "dependency that CIM v2 compilers cannot handle." ), 
       EmbeddedObject]
   string ComponentSetting[];

      [Experimental, Description ( 
          "If not Null, the CIM_SettingData instance is being used "
          "to represent an ITIL element: either a service option, a "
          "service level requirement, or a service level target. "
          "The value SoID must be unique in the context of an "
          "Organization unique identifier specified in SoOrgID." ), 
       ModelCorrespondence { "CIM_SettingData.SoOrgID" }]
   string SoID;

      [Experimental, Description ( 
          "If not Null, the CIM_SettingData instance is being used "
          "to represent an ITIL element: either a service option, a "
          "service level requirement, or a service level target. "
          "When not Null, the value of SoOrgID shall be a unique "
          "identifier for the organization that specifies the value "
          "of SoID." ), 
       ModelCorrespondence { "CIM_SettingData.SoID" }]
   string SoOrgID;


};



// Copyright (c) 2005 DMTF.  All rights reserved.
   [Experimental, Version ( "2.8.1000" ), 
    UMLPackagePath ( "CIM::System::FileServices" ), 
    Description ( 
       "The ExportedFileShareSetting describes the attribute values "
       "that were set when a FileShare was created for a LogicalFile "
       "by a FileExportService. These settings may be associated with "
       "the created Share via the ElementSettingData association; or, "
       "associated with an ExportedFileShareCapabilities element via "
       "SettingAssociatedToCapabilities; or, used as an "
       "EmbeddedInstanceparameter in a method (for instance, as a "
       "Goal). If the setting is associated with a FileShare, it "
       "cannot have undefined or NULL properties. If it is associated "
       "with an ExportedFileShareCapabilities, a NULL property "
       "indicates that the property is not supported or that the value "
       "is a vendor-specific context-dependent default that may not be "
       "changed. The FileSharingProtocol and ProtocolVersions "
       "properties cannot have a default value. If this Setting is "
       "associated with a ExportedFileShareCapabilities element via "
       "SettingAssociatedToCapabilities, the corresponding "
       "FileSharingProtocol and ProtocolVersions properties must "
       "match." )]
class CIM_ExportedFileShareSetting : CIM_SettingData {

      [Description ( 
          "An enumerated integer indicating the filesharing "
          "protocol that this share can support. This property must "
          "exist and have a value. The version of the protocol must "
          "be specified in the corresponding ProtocolVersions "
          "property." ), 
       ValueMap { "0", "2", "3", "4", "5", "6", "7", "..", "0x8000.." }, 
       Values { "Unknown", "NFS", "CIFS", "DAFS", "WebDAV", "HTTP", 
          "FTP", "DMTF Reserved", "Vendor Defined" }, 
       Read, ModelCorrespondence { 
          "CIM_ExportedFileShareCapabilities.FileSharingProtocol", 
          "CIM_ImportedFileShareSetting.FileSharingProtocol", 
          "CIM_ExportedFileShareSetting.ProtocolVersions" }]
   uint16 FileSharingProtocol;

      [Description ( 
          "An array of strings listing the versions of the file "
          "sharing protocol that this share can support. This "
          "property must exist and have at least one entry." ), 
       ArrayType ( "Indexed" ), 
       Read, ModelCorrespondence { 
          "CIM_ExportedFileShareCapabilities.ProtocolVersions", 
          "CIM_ImportedFileShareSetting.ProtocolVersions", 
          "CIM_ExportedFileShareSetting.FileSharingProtocol" }]
   string ProtocolVersions[];

      [Description ( 
          "InitialEnabledState is an integer enumeration that "
          "indicates the enabled/disabled states initially set for "
          "a file share element. Unlike FileShare.EnabledState it "
          "cannot indicate transitions between requested states "
          "because those states cannot be requested. The following "
          "text briefly summarizes the various enabled/disabled "
          "initial states: \n"
          "Enabled (2) indicates that the element will execute "
          "commands, will process any queued commands, and will "
          "queue new requests. \n"
          "Disabled (3) indicates that the element will not execute "
          "commands and will drop any new requests. \n"
          "In Test (7) indicates that the element will be in a test "
          "state. \n"
          "Deferred (8) indicates that the element will not process "
          "any commands but will queue new requests. \n"
          "Quiesce (9) indicates that the element is enabled but in "
          "a restricted mode. The element\'s behavior is similar to "
          "the Enabled state, but it only processes a restricted "
          "set of commands. All other requests are queued." ), 
       ValueMap { "0", "1", "2", "3", "7", "8", "9", "11..32767", 
          "32768..65535" }, 
       Values { "Unknown", "Other", "Enabled", "Disabled", 
          "In Test", "Deferred", "Quiesce", "DMTF Reserved", 
          "Vendor Reserved" }, 
       ModelCorrespondence { 
          "CIM_ExportedFileShareSetting.OtherEnabledState", 
          "CIM_EnabledLogicalElement.EnabledState" }]
   uint16 InitialEnabledState = 8;

      [Description ( 
          "A string describing the element\'s initial "
          "enabled/disabled state when the InitialEnabledState "
          "property is set to 1 (\"Other\"). This property MUST be "
          "set to NULL when InitialEnabledState is any value other "
          "than 1." ), 
       ModelCorrespondence { 
          "CIM_ExportedFileShareSetting.InitialEnabledState" }]
   string OtherEnabledState;

      [Description ( 
          "An enumerated value that specifies the default "
          "privileges that can be supported for read-write "
          "authorization. These default privileges can be "
          "overridden by privileges explicitly defined by a "
          "supported authorization mechanism(s). \n"
          "\'No Access\' indicates that access is not allowed. "
          "\'Read Only\' indicates that read-only access is "
          "implicitly granted to all clients and write access is "
          "implicitly denied to all clients. \'Read/Write\' "
          "indicates that both read and write access is implicitly "
          "granted to all clients. Any other reading or writing "
          "privileges must be granted or denied explicitly using "
          "the vendor\'s authorization mechanism or by using the "
          "CIM_Privilege model. The resulting access privileges "
          "will be surfaced using the CIM_Privilege model." ), 
       ValueMap { "0", "2", "3", "4", "..", "0x8000.." }, 
       Values { "Unknown", "No Access", "Read Only", "Read/Write", 
          "DMTF Reserved", "Vendor Defined" }, 
       Read]
   uint16 DefaultReadWrite = 0;

      [Description ( 
          "An enumerated value that specifies the default "
          "privileges that can be supported for \'execute\' "
          "authorization in an appropriate operating environment. "
          "These default privileges can be overridden by privileges "
          "explicitly defined by a supported authorization "
          "mechanism(s). \n"
          "\'No Access\' indicates that execute access is not "
          "allowed. \'Execute\' indicates that execute access is "
          "implicitly granted to all clients. Any other execution "
          "privileges must be granted or denied explicitly using "
          "the vendor\'s authorization mechanism or by using the "
          "CIM_Privilege model. The resulting access privileges "
          "will be surfaced using the CIM_Privilege model." ), 
       ValueMap { "0", "2", "3", "..", "0x8000.." }, 
       Values { "Unknown", "No Access", "Execute", "DMTF Reserved", 
          "Vendor Defined" }, 
       Read]
   uint16 DefaultExecute = 0;

      [Description ( 
          "An enumerated value that specifies whether this share "
          "can support executable objects in any way. For instance, "
          "can this share be used as a paging file by a client. \n"
          "\'Not Supported\' indicates that no special support for "
          "executable objects is provided. \'Execution Supported\' "
          "indicates that execution is supported, though this does "
          "not specify the kind of support. A vendor can extend "
          "this to indicate specific support mechanisms that may be "
          "provided." ), 
       ValueMap { "0", "2", "3", "..", "0x8000.." }, 
       Values { "Unknown", "Not Supported", "Execution Supported", 
          "DMTF Reserved", "Vendor Defined" }, 
       Read]
   uint16 ExecuteSupport = 0;

      [Description ( 
          "An enumerated integer that indicates whether the "
          "FileShare will use a default user id to control access "
          "to the share if the id of the importing client is not "
          "provided. \'No Default User Id\' indicates that a "
          "default user should not be used. \'System-Specified "
          "Default User Id\' indicates that only system-specified "
          "id should be used. \'Share-Specified Default Used Id\' "
          "indicates that the default user id will be specified by "
          "the method that created or modified the share. If a "
          "default user id is supported, all the default access "
          "privileges will provided through that user as proxy. The "
          "resulting access privileges will be surfaced using the "
          "CIM_Privilege model." ), 
       ValueMap { "0", "2", "3", "4", "..", "0x8000.." }, 
       Values { "Unknown", "No Default User Id", 
          "System-Specified Default User Id", 
          "Share-Specified Default User Id", "DMTF Reserved", 
          "Vendor Defined" }, 
       Read]
   uint16 DefaultUserIdSupported = 0;

      [Description ( 
          "An enumerated value that specifies whether the Share "
          "supports default access by privileged, system "
          "administrator- level (\'root\') users from specific "
          "hosts. These default privileges can always be overridden "
          "by privileges explicitly defined by a supported "
          "authorization mechanism(s). \n"
          "\'No Root Access\' indicates that the Share will deny "
          "root access to all clients. \'Allow Root Access\' "
          "indicates that the Share will allow root access as "
          "specified by the RootAccessHosts parameter when the "
          "FileShare was created. The actual access allowed will be "
          "mediated by the authorization mechanism supported by the "
          "device and provider. \n"
          "Any other root-access privileges must be granted or "
          "denied explicitly using the vendor\'s authorization "
          "mechanism or by using the CIM-specified privilege model. "
          "The resulting access privileges will be surfaced using "
          "the CIM_Privilege model." ), 
       ValueMap { "0", "2", "3", "..", "0x8000.." }, 
       Values { "Unknown", "No Root Access", "Allow Root Access", 
          "DMTF Reserved", "Vendor Defined" }, 
       Read, ModelCorrespondence { 
          "CIM_FileExportService.CreateExportedShare(RootAccessHosts)", 
          "CIM_FileExportService.ModifyExportedShare(RootAccessHosts)" }]
   uint16 RootAccess = 0;

      [Description ( 
          "An enumerated value that specifies the default policy "
          "followed by the Share for how to handle writes to the "
          "Share. \n"
          "\'Synchronous\' indicates that the Share will perform "
          "synchronous writes. \'Asynchronous\' indicates that the "
          "Share may perform asynchronous writes. (The WritePolicy "
          "settings may be overridden in the future with use of the "
          "Policy model.)" ), 
       ValueMap { "0", "2", "3", "..", "0x8000.." }, 
       Values { "Unknown", "Synchronous", "Asynchronous", 
          "DMTF Reserved", "Vendor Defined" }, 
       Read]
   uint16 WritePolicy = 0;

      [Description ( 
          "An enumerated value that specifies the service access "
          "points that are available to this FileShare by default "
          "for use by clients to connect. These default access "
          "points can always be overridden by the privileges "
          "explicitly defined by a supported authorization "
          "mechanism(s). \n"
          "Any ServiceAccessPoints that actually connect to this "
          "share will be associated to it by "
          "CIM_SAPAvailableForElement. The resulting access "
          "privileges will be surfaced using the CIM_Privilege "
          "model. \n"
          "\'None\' implies that no SAPs will have access by "
          "default. \n"
          "\'Service Default\' indicates that any SAPs specified as "
          "the default port by the Service will have default access "
          "- this could be vendor-specific. \n"
          "\'All\' indicates that all SAPs supported by the service "
          "will have access by default. \n"
          "\'Named Points\' indicates that the Service Access "
          "Points that have default access may be specified as a "
          "parameter when this share was created or modified. These "
          "ports or endpoints will be given the necessary "
          "privileges to access this share." ), 
       ValueMap { "0", "2", "3", "4", "5", "..", "0x8000.." }, 
       Values { "Unknown", "None", "Service Default", "All", 
          "Named Points", "DMTF Reserved", "Vendor Defined" }, 
       Read]
   uint16 AccessPoints = 2;


};



   [Version( "2.40.0" ), Description("{0}")]
class UNIX_ExportedFileShareSetting : CIM_ExportedFileShareSetting
{


};

