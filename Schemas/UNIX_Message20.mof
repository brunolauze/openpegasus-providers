//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////



// Copyright (c) 2011 DMTF.  All rights reserved.
   [Indication, Experimental, Version ( "2.30.0" ), 
    Exception, UMLPackagePath ( "CIM::Interop" ), 
    Description ( 
       "CIM_Message instances represent DMTF standard messages that "
       "contain identification of the message, dynamic message "
       "arguments and the expanded message text. They can be used for "
       "returning detailed information from methods." ), 
    ModelCorrespondence { "CIM_Error" }]
class CIM_Message {

      [Required, Description ( 
          "A string that uniquely identifies the entity that owns "
          "the definition of the message. OwningEntity shall "
          "include a copyrighted, trademarked or otherwise unique "
          "name that is owned by the business entity or standards "
          "body defining the message." ), 
       ModelCorrespondence { "CIM_Message.MessageID" }]
   string OwningEntity;

      [Required, Description ( 
          "An opaque string that uniquely identifies, within the "
          "scope of the OwningEntity, the format of the Message." ), 
       ModelCorrespondence { "CIM_Message.OwningEntity" }]
   string MessageID;

      [Description ( 
          "An indicator that allows combining multiple messages "
          "into one logical message. The messages being combined "
          "need to be consecutive messages in an ordered sequence "
          "of messages (e.g. an indexed array of embedded instances "
          "of CIM_Message).\n"
          "A value of True indicates that the logical message "
          "continues with the next message after this message.\n"
          "A value of False or Null indicates that the logical "
          "message ends at this message.\n"
          "For instances of CIM_Message that are not part of an "
          "ordered sequence of messages, this property is "
          "meaningless and shall be Null." )]
   boolean ContinuedInNextMessage;

      [Required, Description ( 
          "The message text, with all dynamic elements expanded.\n"
          "The property value shall constructed by combining all "
          "static and dynamic message elements defined in the "
          "message definition in the order defined, using the "
          "values specified in the MessageArguments array property "
          "for the dynamic elements, in the order of the array." ), 
       ModelCorrespondence { "CIM_Message.MessageArguments" }]
   string Message;

      [Description ( 
          "An array containing the values of the dynamic elements "
          "of the message, in the order in which the dynamic "
          "elements are defined in the message definition." ), 
       ArrayType ( "Indexed" ), 
       ModelCorrespondence { "CIM_Message.Message" }]
   string MessageArguments[];


};



   [Version( "2.40.0" ), Description("{0}")]
class UNIX_Message : CIM_Message
{


};

