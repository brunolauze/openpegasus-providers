//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////



// Copyright (c) 2009 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "ManagedElement is an abstract class that provides a common "
       "superclass (or top of the inheritance tree) for the "
       "non-association classes in the CIM Schema." )]
class CIM_ManagedElement {

      [Description ( 
          "InstanceID is an optional property that may be used to "
          "opaquely and uniquely identify an instance of this class "
          "within the scope of the instantiating Namespace. Various "
          "subclasses of this class may override this property to "
          "make it required, or a key. Such subclasses may also "
          "modify the preferred algorithms for ensuring uniqueness "
          "that are defined below.\n"
          "To ensure uniqueness within the NameSpace, the value of "
          "InstanceID should be constructed using the following "
          "\"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If not null and the above "
          "\"preferred\" algorithm is not used, the defining entity "
          "must assure that the resulting InstanceID is not reused "
          "across any InstanceIDs produced by this or other "
          "providers for the NameSpace of this instance. \n"
          "If not set to null for DMTF-defined instances, the "
          "\"preferred\" algorithm must be used with the <OrgID> "
          "set to CIM." )]
   string InstanceID;

      [Description ( 
          "The Caption property is a short textual description "
          "(one- line string) of the object." ), 
       MaxLen ( 64 )]
   string Caption;

      [Description ( 
          "The Description property provides a textual description "
          "of the object." )]
   string Description;

      [Description ( 
          "A user-friendly name for the object. This property "
          "allows each instance to define a user-friendly name in "
          "addition to its key properties, identity data, and "
          "description information. \n"
          "Note that the Name property of ManagedSystemElement is "
          "also defined as a user-friendly name. But, it is often "
          "subclassed to be a Key. It is not reasonable that the "
          "same property can convey both identity and a "
          "user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of "
          "LogicalDevice), the same information can be present in "
          "both the Name and ElementName properties. Note that if "
          "there is an associated instance of "
          "CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask "
          "and MaxElementNameLen properties defined in that class." )]
   string ElementName;

      [Experimental, Description ( 
          "Generation is an optional, monotonically increasing "
          "property that may be used to identify a particular "
          "generation of the resource represented by this class.\n"
          "If Generation is supported by the implementation, its "
          "value shall not be null. \n"
          "Except as otherwise specified, a value (including null) "
          "of Generation specified at creation time shall be "
          "replaced by null if Generation is not supported by the "
          "implementation or shall be a, (possibly different), "
          "non-null value if the implementation does support Generation.\n"
          "After creation and if supported, Generation shall be "
          "updated, at least once per access, whenever the "
          "represented resource is modified, regardless of the "
          "source of the modification.\n"
          "Note: the Generation value only needs to be updated once "
          "between references, even if the resource is updated many "
          "times. The key point is to assure that it will be "
          "different if there have been updates, not to count each update.\n"
          "Note: unless otherwise specified, the value of "
          "Generation within one instance is not required to be "
          "coordinated with the value of Generation in any other instance.\n"
          "Note:the semantics of the instance, (as defined by its "
          "creation class), define the underlying resource. That "
          "underlying resource may be a collection or aggregation "
          "of resources. And, in that case, the semantics of the "
          "instance further define when updates to constituent "
          "resources also require updates to the Generation of the "
          "collective resource. Default behavior of composite "
          "aggregations should be to update the Generation of the "
          "composite whenever the Generation of a component is updated.\n"
          "Subclasses may define additional requirements for "
          "updates on some or all of related instances.\n"
          "For a particular instance, the value of Generation may "
          "wrap through zero, but the elapsed time between wraps "
          "shall be greater than 10\'s of years.\n"
          "This class does not require Generation to be unique "
          "across instances of other classes nor across instances "
          "of the same class that have different keys. Generation "
          "shall be different across power cycles, resets, or "
          "reboots if any of those actions results in an update. "
          "Generation may be different across power cycles, resets, "
          "or reboots if those actions do not result in an update. "
          "If the Generation property of an instance is non-null, "
          "and if any attempt to update the instance includes the "
          "Generation property, then if it doesn\'t match the "
          "current value, the update shall fail.\n"
          "The usage of this property is intended to be further "
          "specified by applicable management profiles. \n"
          "Typically, a client will read the value of this property "
          "and then supply that value as input to an operation that "
          "modifies the instance in some means. This may be via an "
          "explicit parameter in an extrinsic method or via an "
          "embedded value in an extrinsic method or intrinsic operation.\n"
          "For example: a profile may require that an intrinsic "
          "instance modification supply the Generation property and "
          "that it must match for the modification to succeed." )]
   uint64 Generation;


};



// Copyright (c) 2011 DMTF.  All rights reserved.
   [Abstract, Version ( "2.28.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "CIM_ManagedSystemElement is the base class for the System "
       "Element hierarchy. Any distinguishable component of a System "
       "is a candidate for inclusion in this class. Examples of system "
       "components include: \n"
       "- software components such as application servers, databases, "
       "and applications \n"
       "- operating system components such as files, processes, and "
       "threads \n"
       "- device components such as disk drives, controllers, "
       "processors, and printers \n"
       "- physical components such as chips and cards." )]
class CIM_ManagedSystemElement : CIM_ManagedElement {

      [Description ( 
          "A datetime value that indicates when the object was "
          "installed. Lack of a value does not indicate that the "
          "object is not installed." ), 
       MappingStrings { "MIF.DMTF|ComponentID|001.5" }]
   datetime InstallDate;

      [Description ( 
          "The Name property defines the label by which the object "
          "is known. When subclassed, the Name property can be "
          "overridden to be a Key property." ), 
       MaxLen ( 1024 )]
   string Name;

      [Description ( 
          "Indicates the current statuses of the element. Various "
          "operational statuses are defined. Many of the "
          "enumeration\'s values are self-explanatory. However, a "
          "few are not and are described here in more detail. \n"
          "\"Stressed\" indicates that the element is functioning, "
          "but needs attention. Examples of \"Stressed\" states are "
          "overload, overheated, and so on. \n"
          "\"Predictive Failure\" indicates that an element is "
          "functioning nominally but predicting a failure in the "
          "near future. \n"
          "\"In Service\" describes an element being configured, "
          "maintained, cleaned, or otherwise administered. \n"
          "\"No Contact\" indicates that the monitoring system has "
          "knowledge of this element, but has never been able to "
          "establish communications with it. \n"
          "\"Lost Communication\" indicates that the ManagedSystem "
          "Element is known to exist and has been contacted "
          "successfully in the past, but is currently unreachable. \n"
          "\"Stopped\" and \"Aborted\" are similar, although the "
          "former implies a clean and orderly stop, while the "
          "latter implies an abrupt stop where the state and "
          "configuration of the element might need to be updated. \n"
          "\"Dormant\" indicates that the element is inactive or "
          "quiesced. \n"
          "\"Supporting Entity in Error\" indicates that this "
          "element might be \"OK\" but that another element, on "
          "which it is dependent, is in error. An example is a "
          "network service or endpoint that cannot function due to "
          "lower-layer networking problems. \n"
          "\"Completed\" indicates that the element has completed "
          "its operation. This value should be combined with either "
          "OK, Error, or Degraded so that a client can tell if the "
          "complete operation Completed with OK (passed), Completed "
          "with Error (failed), or Completed with Degraded (the "
          "operation finished, but it did not complete OK or did "
          "not report an error). \n"
          "\"Power Mode\" indicates that the element has additional "
          "power model information contained in the Associated "
          "PowerManagementService association. \n"
          "\"Relocating\" indicates the element is being relocated.\n"
          "OperationalStatus replaces the Status property on "
          "ManagedSystemElement to provide a consistent approach to "
          "enumerations, to address implementation needs for an "
          "array property, and to provide a migration path from "
          "today\'s environment to the future. This change was not "
          "made earlier because it required the deprecated "
          "qualifier. Due to the widespread use of the existing "
          "Status property in management applications, it is "
          "strongly recommended that providers or instrumentation "
          "provide both the Status and OperationalStatus "
          "properties. Further, the first value of "
          "OperationalStatus should contain the primary status for "
          "the element. When instrumented, Status (because it is "
          "single-valued) should also provide the primary status of "
          "the element." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11", "12", "13", "14", "15", "16", "17", "18", 
          "19", "..", "0x8000.." }, 
       Values { "Unknown", "Other", "OK", "Degraded", "Stressed", 
          "Predictive Failure", "Error", "Non-Recoverable Error", 
          "Starting", "Stopping", "Stopped", "In Service", 
          "No Contact", "Lost Communication", "Aborted", "Dormant", 
          "Supporting Entity in Error", "Completed", "Power Mode", 
          "Relocating", "DMTF Reserved", "Vendor Reserved" }, 
       ArrayType ( "Indexed" ), 
       ModelCorrespondence { 
          "CIM_ManagedSystemElement.StatusDescriptions" }]
   uint16 OperationalStatus[];

      [Description ( 
          "Strings describing the various OperationalStatus array "
          "values. For example, if \"Stopping\" is the value "
          "assigned to OperationalStatus, then this property may "
          "contain an explanation as to why an object is being "
          "stopped. Note that entries in this array are correlated "
          "with those at the same array index in OperationalStatus." ), 
       ArrayType ( "Indexed" ), 
       ModelCorrespondence { 
          "CIM_ManagedSystemElement.OperationalStatus" }]
   string StatusDescriptions[];

      [Deprecated { "CIM_ManagedSystemElement.OperationalStatus" }, 
       Description ( 
          "A string indicating the current status of the object. "
          "Various operational and non-operational statuses are "
          "defined. This property is deprecated in lieu of "
          "OperationalStatus, which includes the same semantics in "
          "its enumeration. This change is made for 3 reasons: \n"
          "1) Status is more correctly defined as an array. This "
          "definition overcomes the limitation of describing status "
          "using a single value, when it is really a multi-valued "
          "property (for example, an element might be OK AND "
          "Stopped. \n"
          "2) A MaxLen of 10 is too restrictive and leads to "
          "unclear enumerated values. \n"
          "3) The change to a uint16 data type was discussed when "
          "CIM V2.0 was defined. However, existing V1.0 "
          "implementations used the string property and did not "
          "want to modify their code. Therefore, Status was "
          "grandfathered into the Schema. Use of the deprecated "
          "qualifier allows the maintenance of the existing "
          "property, but also permits an improved definition using "
          "OperationalStatus." ), 
       ValueMap { "OK", "Error", "Degraded", "Unknown", "Pred Fail", 
          "Starting", "Stopping", "Service", "Stressed", 
          "NonRecover", "No Contact", "Lost Comm", "Stopped" }, 
       MaxLen ( 10 )]
   string Status;

      [Description ( 
          "Indicates the current health of the element. This "
          "attribute expresses the health of this element but not "
          "necessarily that of its subcomponents. The possible "
          "values are 0 to 30, where 5 means the element is "
          "entirely healthy and 30 means the element is completely "
          "non-functional. The following continuum is defined: \n"
          "\"Non-recoverable Error\" (30) - The element has "
          "completely failed, and recovery is not possible. All "
          "functionality provided by this element has been lost. \n"
          "\"Critical Failure\" (25) - The element is "
          "non-functional and recovery might not be possible. \n"
          "\"Major Failure\" (20) - The element is failing. It is "
          "possible that some or all of the functionality of this "
          "component is degraded or not working. \n"
          "\"Minor Failure\" (15) - All functionality is available "
          "but some might be degraded. \n"
          "\"Degraded/Warning\" (10) - The element is in working "
          "order and all functionality is provided. However, the "
          "element is not working to the best of its abilities. For "
          "example, the element might not be operating at optimal "
          "performance or it might be reporting recoverable errors. \n"
          "\"OK\" (5) - The element is fully functional and is "
          "operating within normal operational parameters and "
          "without error. \n"
          "\"Unknown\" (0) - The implementation cannot report on "
          "HealthState at this time. \n"
          "DMTF has reserved the unused portion of the continuum "
          "for additional HealthStates in the future." ), 
       ValueMap { "0", "5", "10", "15", "20", "25", "30", "..", 
          "32768..65535" }, 
       Values { "Unknown", "OK", "Degraded/Warning", 
          "Minor failure", "Major failure", "Critical failure", 
          "Non-recoverable error", "DMTF Reserved", "Vendor Specific" }]
   uint16 HealthState;

      [Description ( 
          "CommunicationStatus indicates the ability of the "
          "instrumentation to communicate with the underlying "
          "ManagedElement. CommunicationStatus consists of one of "
          "the following values: Unknown, None, Communication OK, "
          "Lost Communication, or No Contact. \n"
          "A Null return indicates the implementation (provider) "
          "does not implement this property. \n"
          "\"Unknown\" indicates the implementation is in general "
          "capable of returning this property, but is unable to do "
          "so at this time. \n"
          "\"Not Available\" indicates that the implementation "
          "(provider) is capable of returning a value for this "
          "property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not "
          "used because it adds no meaningful information (as in "
          "the case of a property that is intended to add "
          "additional info to another property). \n"
          "\"Communication OK \" indicates communication is "
          "established with the element, but does not convey any "
          "quality of service. \n"
          "\"No Contact\" indicates that the monitoring system has "
          "knowledge of this element, but has never been able to "
          "establish communications with it. \n"
          "\"Lost Communication\" indicates that the Managed "
          "Element is known to exist and has been contacted "
          "successfully in the past, but is currently unreachable." ), 
       ValueMap { "0", "1", "2", "3", "4", "..", "0x8000.." }, 
       Values { "Unknown", "Not Available", "Communication OK", 
          "Lost Communication", "No Contact", "DMTF Reserved", 
          "Vendor Reserved" }]
   uint16 CommunicationStatus;

      [Description ( 
          "DetailedStatus compliments PrimaryStatus with additional "
          "status detail. It consists of one of the following "
          "values: Not Available, No Additional Information, "
          "Stressed, Predictive Failure, Error, Non-Recoverable "
          "Error, SupportingEntityInError. Detailed status is used "
          "to expand upon the PrimaryStatus of the element. \n"
          "A Null return indicates the implementation (provider) "
          "does not implement this property. \n"
          "\"Not Available\" indicates that the implementation "
          "(provider) is capable of returning a value for this "
          "property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not "
          "used because it adds no meaningful information (as in "
          "the case of a property that is intended to add "
          "additional info to another property). \n"
          "\"No Additional Information\" indicates that the element "
          "is functioning normally as indicated by PrimaryStatus = "
          "\"OK\". \n"
          "\"Stressed\" indicates that the element is functioning, "
          "but needs attention. Examples of \"Stressed\" states are "
          "overload, overheated, and so on. \n"
          "\"Predictive Failure\" indicates that an element is "
          "functioning normally but a failure is predicted in the "
          "near future. \n"
          "\"Non-Recoverable Error \" indicates that this element "
          "is in an error condition that requires human "
          "intervention. \n"
          "\"Supporting Entity in Error\" indicates that this "
          "element might be \"OK\" but that another element, on "
          "which it is dependent, is in error. An example is a "
          "network service or endpoint that cannot function due to "
          "lower-layer networking problems." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "..", "0x8000.." }, 
       Values { "Not Available", "No Additional Information", 
          "Stressed", "Predictive Failure", "Non-Recoverable Error", 
          "Supporting Entity in Error", "DMTF Reserved", 
          "Vendor Reserved" }, 
       ModelCorrespondence { 
          "CIM_EnabledLogicalElement.PrimaryStatus", 
          "CIM_ManagedSystemElement.HealthState" }]
   uint16 DetailedStatus;

      [Description ( 
          "OperatingStatus provides a current status value for the "
          "operational condition of the element and can be used for "
          "providing more detail with respect to the value of "
          "EnabledState. It can also provide the transitional "
          "states when an element is transitioning from one state "
          "to another, such as when an element is transitioning "
          "between EnabledState and RequestedState, as well as "
          "other transitional conditions.\n"
          "OperatingStatus consists of one of the following values: "
          "Unknown, Not Available, In Service, Starting, Stopping, "
          "Stopped, Aborted, Dormant, Completed, Migrating, "
          "Emmigrating, Immigrating, Snapshotting. Shutting Down, "
          "In Test \n"
          "A Null return indicates the implementation (provider) "
          "does not implement this property. \n"
          "\"Unknown\" indicates the implementation is in general "
          "capable of returning this property, but is unable to do "
          "so at this time. \n"
          "\"None\" indicates that the implementation (provider) is "
          "capable of returning a value for this property, but not "
          "ever for this particular piece of hardware/software or "
          "the property is intentionally not used because it adds "
          "no meaningful information (as in the case of a property "
          "that is intended to add additional info to another "
          "property). \n"
          "\"Servicing\" describes an element being configured, "
          "maintained, cleaned, or otherwise administered. \n"
          "\"Starting\" describes an element being initialized. \n"
          "\"Stopping\" describes an element being brought to an "
          "orderly stop. \n"
          "\"Stopped\" and \"Aborted\" are similar, although the "
          "former implies a clean and orderly stop, while the "
          "latter implies an abrupt stop where the state and "
          "configuration of the element might need to be updated. \n"
          "\"Dormant\" indicates that the element is inactive or "
          "quiesced. \n"
          "\"Completed\" indicates that the element has completed "
          "its operation. This value should be combined with either "
          "OK, Error, or Degraded in the PrimaryStatus so that a "
          "client can tell if the complete operation Completed with "
          "OK (passed), Completed with Error (failed), or Completed "
          "with Degraded (the operation finished, but it did not "
          "complete OK or did not report an error). \n"
          "\"Migrating\" element is being moved between host "
          "elements. \n"
          "\"Immigrating\" element is being moved to new host "
          "element. \n"
          "\"Emigrating\" element is being moved away from host "
          "element. \n"
          "\"Shutting Down\" describes an element being brought to "
          "an abrupt stop. \n"
          "\"In Test\" element is performing test functions. \n"
          "\"Transitioning\" describes an element that is between "
          "states, that is, it is not fully available in either its "
          "previous state or its next state. This value should be "
          "used if other values indicating a transition to a "
          "specific state are not applicable.\n"
          "\"In Service\" describes an element that is in service "
          "and operational." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11", "12", "13", "14", "15", "16", "..", "0x8000.." }, 
       Values { "Unknown", "Not Available", "Servicing", "Starting", 
          "Stopping", "Stopped", "Aborted", "Dormant", "Completed", 
          "Migrating", "Emigrating", "Immigrating", "Snapshotting", 
          "Shutting Down", "In Test", "Transitioning", "In Service", 
          "DMTF Reserved", "Vendor Reserved" }, 
       ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState" }]
   uint16 OperatingStatus;

      [Description ( 
          "PrimaryStatus provides a high level status value, "
          "intended to align with Red-Yellow-Green type "
          "representation of status. It should be used in "
          "conjunction with DetailedStatus to provide high level "
          "and detailed health status of the ManagedElement and its "
          "subcomponents. \n"
          "PrimaryStatus consists of one of the following values: "
          "Unknown, OK, Degraded or Error. \"Unknown\" indicates "
          "the implementation is in general capable of returning "
          "this property, but is unable to do so at this time. \n"
          "\"OK\" indicates the ManagedElement is functioning "
          "normally. \n"
          "\"Degraded\" indicates the ManagedElement is functioning "
          "below normal. \n"
          "\"Error\" indicates the ManagedElement is in an Error "
          "condition." ), 
       ValueMap { "0", "1", "2", "3", "..", "0x8000.." }, 
       Values { "Unknown", "OK", "Degraded", "Error", 
          "DMTF Reserved", "Vendor Reserved" }, 
       ModelCorrespondence { 
          "CIM_ManagedSystemElement.DetailedStatus", 
          "CIM_ManagedSystemElement.HealthState" }]
   uint16 PrimaryStatus;


};



// Copyright (c) 2005 DMTF.  All rights reserved.
   [Abstract, Version ( "2.6.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "CIM_LogicalElement is a base class for all the components of a "
       "System that represent abstract system components, such as "
       "Files, Processes, or LogicalDevices." )]
class CIM_LogicalElement : CIM_ManagedSystemElement {


};



// Copyright (c) 2009 DMTF.  All rights reserved.
   [Abstract, Version ( "2.22.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "This class extends LogicalElement to abstract the concept of "
       "an element that is enabled and disabled, such as a "
       "LogicalDevice or a ServiceAccessPoint." )]
class CIM_EnabledLogicalElement : CIM_LogicalElement {

      [Description ( 
          "EnabledState is an integer enumeration that indicates "
          "the enabled and disabled states of an element. It can "
          "also indicate the transitions between these requested "
          "states. For example, shutting down (value=4) and "
          "starting (value=10) are transient states between enabled "
          "and disabled. The following text briefly summarizes the "
          "various enabled and disabled states: \n"
          "Enabled (2) indicates that the element is or could be "
          "executing commands, will process any queued commands, "
          "and queues new requests. \n"
          "Disabled (3) indicates that the element will not execute "
          "commands and will drop any new requests. \n"
          "Shutting Down (4) indicates that the element is in the "
          "process of going to a Disabled state. \n"
          "Not Applicable (5) indicates the element does not "
          "support being enabled or disabled. \n"
          "Enabled but Offline (6) indicates that the element might "
          "be completing commands, and will drop any new requests. \n"
          "Test (7) indicates that the element is in a test state. \n"
          "Deferred (8) indicates that the element might be "
          "completing commands, but will queue any new requests. \n"
          "Quiesce (9) indicates that the element is enabled but in "
          "a restricted mode.\n"
          "Starting (10) indicates that the element is in the "
          "process of going to an Enabled state. New requests are "
          "queued." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11..32767", "32768..65535" }, 
       Values { "Unknown", "Other", "Enabled", "Disabled", 
          "Shutting Down", "Not Applicable", "Enabled but Offline", 
          "In Test", "Deferred", "Quiesce", "Starting", 
          "DMTF Reserved", "Vendor Reserved" }, 
       ModelCorrespondence { 
          "CIM_EnabledLogicalElement.OtherEnabledState" }]
   uint16 EnabledState = 5;

      [Description ( 
          "A string that describes the enabled or disabled state of "
          "the element when the EnabledState property is set to 1 "
          "(\"Other\"). This property must be set to null when "
          "EnabledState is any value other than 1." ), 
       ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState" }]
   string OtherEnabledState;

      [Description ( 
          "RequestedState is an integer enumeration that indicates "
          "the last requested or desired state for the element, "
          "irrespective of the mechanism through which it was "
          "requested. The actual state of the element is "
          "represented by EnabledState. This property is provided "
          "to compare the last requested and current enabled or "
          "disabled states. Note that when EnabledState is set to 5 "
          "(\"Not Applicable\"), then this property has no meaning. "
          "Refer to the EnabledState property description for "
          "explanations of the values in the RequestedState "
          "enumeration. \n"
          "\"Unknown\" (0) indicates the last requested state for "
          "the element is unknown.\n"
          "Note that the value \"No Change\" (5) has been "
          "deprecated in lieu of indicating the last requested "
          "state is \"Unknown\" (0). If the last requested or "
          "desired state is unknown, RequestedState should have the "
          "value \"Unknown\" (0), but may have the value \"No "
          "Change\" (5).Offline (6) indicates that the element has "
          "been requested to transition to the Enabled but Offline "
          "EnabledState. \n"
          "It should be noted that there are two new values in "
          "RequestedState that build on the statuses of "
          "EnabledState. These are \"Reboot\" (10) and \"Reset\" "
          "(11). Reboot refers to doing a \"Shut Down\" and then "
          "moving to an \"Enabled\" state. Reset indicates that the "
          "element is first \"Disabled\" and then \"Enabled\". The "
          "distinction between requesting \"Shut Down\" and "
          "\"Disabled\" should also be noted. Shut Down requests an "
          "orderly transition to the Disabled state, and might "
          "involve removing power, to completely erase any existing "
          "state. The Disabled state requests an immediate "
          "disabling of the element, such that it will not execute "
          "or accept any commands or processing requests. \n"
          "\n"
          "This property is set as the result of a method "
          "invocation (such as Start or StopService on "
          "CIM_Service), or can be overridden and defined as "
          "WRITEable in a subclass. The method approach is "
          "considered superior to a WRITEable property, because it "
          "allows an explicit invocation of the operation and the "
          "return of a result code. \n"
          "\n"
          "If knowledge of the last RequestedState is not supported "
          "for the EnabledLogicalElement, the property shall be "
          "NULL or have the value 12 \"Not Applicable\"." ), 
       ValueMap { "0", "2", "3", "4", "5", "6", "7", "8", "9", "10", 
          "11", "12", "..", "32768..65535" }, 
       Values { "Unknown", "Enabled", "Disabled", "Shut Down", 
          "No Change", "Offline", "Test", "Deferred", "Quiesce", 
          "Reboot", "Reset", "Not Applicable", "DMTF Reserved", 
          "Vendor Reserved" }, 
       ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState" }]
   uint16 RequestedState = 12;

      [Write, Description ( 
          "An enumerated value indicating an administrator\'s "
          "default or startup configuration for the Enabled State "
          "of an element. By default, the element is \"Enabled\" "
          "(value=2)." ), 
       ValueMap { "2", "3", "5", "6", "7", "9", "..", "32768..65535" }, 
       Values { "Enabled", "Disabled", "Not Applicable", 
          "Enabled but Offline", "No Default", "Quiesce", 
          "DMTF Reserved", "Vendor Reserved" }]
   uint16 EnabledDefault = 2;

      [Description ( 
          "The date or time when the EnabledState of the element "
          "last changed. If the state of the element has not "
          "changed and this property is populated, then it must be "
          "set to a 0 interval value. If a state change was "
          "requested, but rejected or not yet processed, the "
          "property must not be updated." )]
   datetime TimeOfLastStateChange;

      [Description ( 
          "AvailableRequestedStates indicates the possible values "
          "for the RequestedState parameter of the method "
          "RequestStateChange, used to initiate a state change. The "
          "values listed shall be a subset of the values contained "
          "in the RequestedStatesSupported property of the "
          "associated instance of "
          "CIM_EnabledLogicalElementCapabilities where the values "
          "selected are a function of the current state of the "
          "CIM_EnabledLogicalElement. This property may be non-null "
          "if an implementation is able to advertise the set of "
          "possible values as a function of the current state. This "
          "property shall be null if an implementation is unable to "
          "determine the set of possible values as a function of "
          "the current state." ), 
       ValueMap { "2", "3", "4", "6", "7", "8", "9", "10", "11", ".." }, 
       Values { "Enabled", "Disabled", "Shut Down", "Offline", 
          "Test", "Defer", "Quiesce", "Reboot", "Reset", 
          "DMTF Reserved" }, 
       ModelCorrespondence { 
          "CIM_EnabledLogicalElement.RequestStateChange", 
          "CIM_EnabledLogicalElementCapabilities.RequestedStatesSupported" }]
   uint16 AvailableRequestedStates[];

      [Description ( 
          "TransitioningToState indicates the target state to which "
          "the instance is transitioning. \n"
          "A value of 5 \"No Change\" shall indicate that no "
          "transition is in progress.A value of 12 \"Not "
          "Applicable\" shall indicate the implementation does not "
          "support representing ongoing transitions. \n"
          "A value other than 5 or 12 shall identify the state to "
          "which the element is in the process of transitioning." ), 
       ValueMap { "0", "2", "3", "4", "5", "6", "7", "8", "9", "10", 
          "11", "12", ".." }, 
       Values { "Unknown", "Enabled", "Disabled", "Shut Down", 
          "No Change", "Offline", "Test", "Defer", "Quiesce", 
          "Reboot", "Reset", "Not Applicable", "DMTF Reserved" }, 
       ModelCorrespondence { 
          "CIM_EnabledLogicalElement.RequestStateChange", 
          "CIM_EnabledLogicalElement.RequestedState", 
          "CIM_EnabledLogicalElement.EnabledState" }]
   uint16 TransitioningToState = 12;


      [Description ( 
          "Requests that the state of the element be changed to the "
          "value specified in the RequestedState parameter. When "
          "the requested state change takes place, the EnabledState "
          "and RequestedState of the element will be the same. "
          "Invoking the RequestStateChange method multiple times "
          "could result in earlier requests being overwritten or "
          "lost. \n"
          "A return code of 0 shall indicate the state change was "
          "successfully initiated. \n"
          "A return code of 3 shall indicate that the state "
          "transition cannot complete within the interval specified "
          "by the TimeoutPeriod parameter. \n"
          "A return code of 4096 (0x1000) shall indicate the state "
          "change was successfully initiated, a ConcreteJob has "
          "been created, and its reference returned in the output "
          "parameter Job. Any other return code indicates an error "
          "condition." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "4096", 
          "4097", "4098", "4099", "4100..32767", "32768..65535" }, 
       Values { "Completed with No Error", "Not Supported", 
          "Unknown or Unspecified Error", 
          "Cannot complete within Timeout Period", "Failed", 
          "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Method Parameters Checked - Job Started", 
          "Invalid State Transition", 
          "Use of Timeout Parameter Not Supported", "Busy", 
          "Method Reserved", "Vendor Specific" }, 
       ModelCorrespondence { 
          "CIM_EnabledLogicalElement.RequestedState" }]
   uint32 RequestStateChange(
         [IN, Description ( 
             "The state requested for the element. This "
             "information will be placed into the RequestedState "
             "property of the instance if the return code of the "
             "RequestStateChange method is 0 (\'Completed with "
             "No Error\'), or 4096 (0x1000) (\'Job Started\'). "
             "Refer to the description of the EnabledState and "
             "RequestedState properties for the detailed "
             "explanations of the RequestedState values." ), 
          ValueMap { "2", "3", "4", "6", "7", "8", "9", "10", 
             "11", "..", "32768..65535" }, 
          Values { "Enabled", "Disabled", "Shut Down", "Offline", 
             "Test", "Defer", "Quiesce", "Reboot", "Reset", 
             "DMTF Reserved", "Vendor Reserved" }, 
          ModelCorrespondence { 
             "CIM_EnabledLogicalElement.RequestedState" }]
      uint16 RequestedState, 
         [IN ( false ), OUT, Description ( 
             "May contain a reference to the ConcreteJob created "
             "to track the state transition initiated by the "
             "method invocation." )]
      CIM_ConcreteJob REF Job, 
         [IN, Description ( 
             "A timeout period that specifies the maximum amount "
             "of time that the client expects the transition to "
             "the new state to take. The interval format must be "
             "used to specify the TimeoutPeriod. A value of 0 or "
             "a null parameter indicates that the client has no "
             "time requirements for the transition. \n"
             "If this property does not contain 0 or null and "
             "the implementation does not support this "
             "parameter, a return code of \'Use Of Timeout "
             "Parameter Not Supported\' shall be returned." )]
      datetime TimeoutPeriod);

};



// Copyright (c) 2012 DMTF.  All rights reserved.
   [Abstract, Version ( "2.38.0" ), 
    ClassConstraint { "inv: LoSID <> null implies LoSOrgID <> null" }, 
    UMLPackagePath ( "CIM::Core::Service" ), 
    Description ( 
       "A Service is a LogicalElement that represents the availability "
       "of functionality that can be managed. This functionality may "
       "be provided by a seperately modeled entity such as a "
       "LogicalDevice or a SoftwareFeature, or both. The modeled "
       "Service typically provides only functionality required for "
       "management of itself or the elements it affects." )]
class CIM_Service : CIM_EnabledLogicalElement {

      [Key, Description ( 
          "The CreationClassName of the scoping System." ), 
       MaxLen ( 256 ), 
       Propagated ( "CIM_System.CreationClassName" )]
   string SystemCreationClassName;

      [Key, Description ( "The Name of the scoping System." ), 
       MaxLen ( 256 ), 
       Propagated ( "CIM_System.Name" )]
   string SystemName;

      [Key, Description ( 
          "CreationClassName indicates the name of the class or the "
          "subclass that is used in the creation of an instance. "
          "When used with the other key properties of this class, "
          "this property allows all instances of this class and its "
          "subclasses to be uniquely identified." ), 
       MaxLen ( 256 )]
   string CreationClassName;

      [Key, Override ( "Name" ), 
       Description ( 
          "The Name property uniquely identifies the Service and "
          "provides an indication of the functionality that is "
          "managed. This functionality is described in more detail "
          "in the Description property of the object." ), 
       MaxLen ( 256 )]
   string Name;

      [Write, Description ( 
          "The name of the primary owner for the service, if one is "
          "defined. The primary owner is the initial support "
          "contact for the Service." ), 
       MaxLen ( 64 ), 
       MappingStrings { "MIF.DMTF|General Information|001.3" }]
   string PrimaryOwnerName;

      [Write, Description ( 
          "A string that provides information on how the primary "
          "owner of the Service can be reached (for example, phone "
          "number, e-mail address, and so on)." ), 
       MaxLen ( 256 ), 
       MappingStrings { "MIF.DMTF|General Information|001.4" }]
   string PrimaryOwnerContact;

      [Deprecated { "CIM_Service.EnabledDefault" }, 
       Description ( 
          "Note: The use of this element is deprecated in lieu of "
          "the EnabledDefault property that is inherited from "
          "EnabledLogicalElement. The EnabledLogicalElement "
          "addresses the same semantics. The change to a uint16 "
          "data type was discussed when CIM V2.0 was defined. "
          "However, existing V1.0 implementations used the string "
          "property. To remain compatible with those "
          "implementations, StartMode was grandfathered into the "
          "schema. Use of the deprecated qualifier allows the "
          "maintenance of the existing property but also permits an "
          "improved, clarified definition using EnabledDefault. \n"
          "Deprecated description: StartMode is a string value that "
          "indicates whether the Service is automatically started "
          "by a System, an Operating System, and so on, or is "
          "started only upon request." ), 
       ValueMap { "Automatic", "Manual" }, 
       MaxLen ( 10 )]
   string StartMode;

      [Description ( 
          "Started is a Boolean that indicates whether the Service "
          "has been started (TRUE), or stopped (FALSE)." )]
   boolean Started;

      [Experimental, Description ( 
          "If not Null, the CIM_Service instance represents a line "
          "of service, as defined by ITIL, identified by the value "
          "of LoSID, which must be unique in the context of an "
          "unique identifier for an Organization specified in "
          "LoSOrgID." ), 
       ModelCorrespondence { "CIM_Service.LoSOrgID" }]
   string LoSID;

      [Experimental, Description ( 
          "If not null, this CIM_Service instance represents an "
          "ITIL line of service and the value of LoSOrgID shall be "
          "a unique identifier for the organization that defines "
          "the value of LoSID." ), 
       ModelCorrespondence { "CIM_Service.LoSID" }]
   string LoSOrgID;


      [Deprecated { "CIM_Service.RequestStateChange" }, 
       Description ( 
          "The StartService method places the Service in the "
          "started state. Note that the function of this method "
          "overlaps with the RequestedState property. "
          "RequestedState was added to the model to maintain a "
          "record (such as a persisted value) of the last state "
          "request. Invoking the StartService method should set the "
          "RequestedState property appropriately. The method "
          "returns an integer value of 0 if the Service was "
          "successfully started, 1 if the request is not supported, "
          "and any other number to indicate an error. In a "
          "subclass, the set of possible return codes could be "
          "specified using a ValueMap qualifier on the method. The "
          "strings to which the ValueMap contents are translated "
          "can also be specified in the subclass as a Values array "
          "qualifier. \n"
          "\n"
          "Note: The semantics of this method overlap with the "
          "RequestStateChange method that is inherited from "
          "EnabledLogicalElement. This method is maintained because "
          "it has been widely implemented, and its simple \"start\" "
          "semantics are convenient to use." )]
   uint32 StartService(
);

      [Deprecated { "CIM_Service.RequestStateChange" }, 
       Description ( 
          "The StopService method places the Service in the stopped "
          "state. Note that the function of this method overlaps "
          "with the RequestedState property. RequestedState was "
          "added to the model to maintain a record (such as a "
          "persisted value) of the last state request. Invoking the "
          "StopService method should set the RequestedState "
          "property appropriately. The method returns an integer "
          "value of 0 if the Service was successfully stopped, 1 if "
          "the request is not supported, and any other number to "
          "indicate an error. In a subclass, the set of possible "
          "return codes could be specified using a ValueMap "
          "qualifier on the method. The strings to which the "
          "ValueMap contents are translated can also be specified "
          "in the subclass as a Values array qualifier. \n"
          "\n"
          "Note: The semantics of this method overlap with the "
          "RequestStateChange method that is inherited from "
          "EnabledLogicalElement. This method is maintained because "
          "it has been widely implemented, and its simple \"stop\" "
          "semantics are convenient to use." )]
   uint32 StopService(
);

      [Experimental, Description ( 
          "This method is called to change relative sequence in "
          "which order the ManagedElements associated to the "
          "Service through CIM_ServiceAffectsElement association "
          "are affected. In the case when the Service represents an "
          "interface for client to execute extrinsic methods and "
          "when it is used for grouping of the managed elements "
          "that could be affected, the ordering represents the "
          "relevant priority of the affected managed elements with "
          "respect to each other. \n"
          "An ordered array of ManagedElement instances is passed "
          "to this method, where each ManagedElement instance shall "
          "be already be associated with this Service instance via "
          "CIM_ServiceAffectsElement association. If one of the "
          "ManagedElements is not associated to the Service through "
          "CIM_ServiceAffectsElement association, the "
          "implementation shall return a value of 2 (\"Error "
          "Occured\"). \n"
          "Upon successful execution of this method, if the "
          "AssignedSequence parameter is NULL, the value of the "
          "AssignedSequence property on each instance of "
          "CIM_ServiceAffectsElement shall be updated such that the "
          "values of AssignedSequence properties shall be "
          "monotonically increasing in correlation with the "
          "position of the referenced ManagedElement instance in "
          "the ManagedElements input parameter. That is, the first "
          "position in the array shall have the lowest value for "
          "AssignedSequence. The second position shall have the "
          "second lowest value, and so on. Upon successful "
          "execution, if the AssignedSequence parameter is not "
          "NULL, the value of the AssignedSequence property of each "
          "instance of CIM_ServiceAffectsElement referencing the "
          "ManagedElement instance in the ManagedElements array "
          "shall be assigned the value of the corresponding index "
          "of the AssignedSequence parameter array. For "
          "ManagedElements instances which are associated with the "
          "Service instance via CIM_ServiceAffectsElement and are "
          "not present in the ManagedElements parameter array, the "
          "AssignedSequence property on the CIM_ServiceAffects "
          "association shall be assigned a value of 0." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7..32767", 
          "32768..65535" }, 
       Values { "Completed with No Error", "Not Supported", 
          "Error Occured", "Busy", "Invalid Reference", 
          "Invalid Parameter", "Access Denied", "DMTF Reserved", 
          "Vendor Specified" }]
   uint32 ChangeAffectedElementsAssignedSequence(
         [Required, IN, Description ( 
             "An array of ManagedElements." )]
      CIM_ManagedElement REF ManagedElements[], 
         [Required, IN, Description ( 
             "An array of integers representing AssignedSequence "
             "for the ManagedElement in the corresponding index "
             "of the ManagedElements parameter." )]
      uint16 AssignedSequence[], 
         [IN ( false ), OUT, Description ( 
             "Reference to the job spawned if the operation "
             "continues after the method returns. (May be null "
             "if the task is completed)." )]
      CIM_ConcreteJob REF Job);

};



// Copyright (c) 2013 DMTF.  All rights reserved.
   [Experimental, Version ( "2.37.0" ), 
    UMLPackagePath ( "CIM::Device::StorageServices" ), 
    Description ( 
       "This service allows the active management of a Storage Server. "
       "It allows jobs to be started for the creation, modification "
       "and deletion of storage objects (StoragePools, StorageVolumes "
       "and LogicalDisks)." )]
class CIM_StorageConfigurationService : CIM_Service {


      [Description ( 
          "Starts a job to create (or modify) a StoragePool. The "
          "StoragePool will be (or must be) scoped to the same "
          "System as this Service. One of the parameters for this "
          "method is Size. As an input parameter, Size specifies "
          "the desired size of the pool. As an output parameter, it "
          "specifies the size achieved. Space is taken from either "
          "or both of the specified input StoragePools and "
          "StorageExtents (InPools and InExtents). The capability "
          "requirements that the Pool must support are defined "
          "using the Goal parameter. If the requested pool size "
          "cannot be created, no action will be taken, the Return "
          "Value will be 4097/0x1001, and the output value of Size "
          "will be set to the nearest possible size. If 0 is "
          "returned, then the task completed successfully and the "
          "use of ConcreteJob was not required. If the task will "
          "take some time to complete, a ConcreteJob will be "
          "created and its reference returned in the output "
          "parameter Job." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "4096", 
          "4097", "4098..32767", "32768..65535" }, 
       Values { "Job Completed with No Error", "Not Supported", 
          "Unknown", "Timeout", "Failed", "Invalid Parameter", 
          "In Use", "DMTF Reserved", 
          "Method Parameters Checked - Job Started", 
          "Size Not Supported", "Method Reserved", "Vendor Specific" }]
   uint32 CreateOrModifyStoragePool(
         [IN, Description ( 
             "A end user relevant name for the pool being "
             "created. If NULL, then a system supplied default "
             "name can be used. The value will be stored in the "
             "\'ElementName\' property for the created pool. If "
             "not NULL, this parameter will supply a new name "
             "when modifying an existing pool." )]
      string ElementName, 
         [IN ( false ), OUT, Description ( 
             "Reference to the job (may be null if job completed)."
              )]
      CIM_ConcreteJob REF Job, 
         [IN, Description ( 
             "Reference to an instance of StorageSetting that "
             "defines the desired capabilities of the "
             "StoragePool. If set to a null value, the default "
             "configuration from the source pool will be used. "
             "If not NULL, this parameter will supply a new Goal "
             "setting when modifying an existing pool." )]
      CIM_StorageSetting REF Goal, 
         [IN, OUT, Description ( 
             "As an input parameter this specifies the desired "
             "pool size in bytes. As an output parameter this "
             "specifies the size achieved." ), 
          Units ( "Bytes" ), 
          PUnit ( "byte" )]
      uint64 Size, 
         [IN, Description ( 
             "Array of strings containing representations of "
             "references to CIM_StoragePool instances, that are "
             "used to create the Pool or modify the source "
             "pools." )]
      string InPools[], 
         [IN, Description ( 
             "Array of strings containing representations of "
             "references to CIM_StorageExtent instances, that "
             "are used to create the Pool or modify the source "
             "extents." )]
      string InExtents[], 
         [IN, OUT, Description ( 
             "As an input parameter: if null, creates a new "
             "StoragePool. If not null, modifies the referenced "
             "Pool. When returned, it is a reference to the "
             "resulting StoragePool." )]
      CIM_StoragePool REF Pool);

      [Description ( 
          "Start a job to create (or modify) a specified element "
          "(for example a StorageVolume or StorageExtent) from a "
          "StoragePool. One of the parameters for this method is "
          "Size. As an input parameter, Size specifies the desired "
          "size of the element. As an output parameter, it "
          "specifies the size achieved. Space is taken from the "
          "input StoragePool. The desired settings for the element "
          "are specified by the Goal parameter. If the requested "
          "size cannot be created, no action will be taken, and the "
          "Return Value will be 4097/0x1001. Also, the output value "
          "of Size is set to the nearest possible size. If 0 is "
          "returned, the function completed successfully and no "
          "ConcreteJob instance was required. If 4096/0x1000 is "
          "returned, a ConcreteJob will be started to create the "
          "element. The Job\'s reference will be returned in the "
          "output parameter Job." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "4096", 
          "4097", "4098..32767", "32768..65535" }, 
       Values { "Job Completed with No Error", "Not Supported", 
          "Unknown", "Timeout", "Failed", "Invalid Parameter", 
          "In Use", "DMTF Reserved", 
          "Method Parameters Checked - Job Started", 
          "Size Not Supported", "Method Reserved", "Vendor Specific" }]
   uint32 CreateOrModifyElementFromStoragePool(
         [IN, Description ( 
             "A end user relevant name for the element being "
             "created. If NULL, then a system supplied default "
             "name can be used. The value will be stored in the "
             "\'ElementName\' property for the created element. "
             "If not NULL, this parameter will supply a new name "
             "when modifying an existing element." )]
      string ElementName, 
         [Experimental, IN, Description ( 
             "Enumeration indicating the type of element being "
             "created or modified. If the input parameter "
             "TheElement is specified when the operation is a "
             "\'modify\', this type value must match the type of "
             "that instance. With ElementType of \"2\" and \"3\", "
             "the implementation decides the provisioning of the "
             "element." ), 
          ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", 
             "..", "32768..65535" }, 
          Values { "Unknown", "Reserved", "StorageVolume", 
             "StorageExtent", "LogicalDisk", 
             "ThinlyProvisionedStorageVolume", 
             "ThinlyProvisionedLogicalDisk", 
             "FullyProvisionedStorageVolume", 
             "FullyProvisionedLogicalDisk", "DMTF Reserved", 
             "Vendor Specific" }]
      uint16 ElementType, 
         [IN ( false ), OUT, Description ( 
             "Reference to the job (may be null if job completed)."
              )]
      CIM_ConcreteJob REF Job, 
         [IN, Description ( 
             "The requirements for the element to maintain. If "
             "set to a null value, the default configuration "
             "from the source pool will be used. This parameter "
             "should be a reference to a Setting or Profile "
             "appropriate to the element being created. If not "
             "NULL, this parameter will supply a new Goal when "
             "modifying an existing element." )]
      CIM_ManagedElement REF Goal, 
         [IN, OUT, Description ( 
             "As an input parameter Size specifies the desired "
             "size. If not NULL, this parameter will supply a "
             "new size when modifying an existing element. As an "
             "output parameter Size specifies the size achieved." ), 
          Units ( "Bytes" ), 
          PUnit ( "byte" )]
      uint64 Size, 
         [IN, Description ( 
             "The Pool from which to create the element. This "
             "parameter must be set to null if the input "
             "parameter TheElement is specified (in the case of "
             "a \'modify\' operation)." )]
      CIM_StoragePool REF InPool, 
         [IN, OUT, Description ( 
             "As an input parameter: if null, creates a new "
             "element. If not null, then the method modifies the "
             "specified element. As an output parameter, it is a "
             "reference to the resulting element." )]
      CIM_LogicalElement REF TheElement);

      [Description ( 
          "Start a job to delete a StoragePool. The freed space is "
          "returned source StoragePools (indicated by AllocatedFrom "
          "StoragePool) or back to underlying storage extents. If 0 "
          "is returned, the function completed successfully, and no "
          "ConcreteJob was required. If 4096/0x1000 is returned, a "
          "ConcreteJob will be started to delete the StoragePool. A "
          "reference to the Job is returned in the Job parameter." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "4096", 
          "4097..32767", "32768..65535" }, 
       Values { "Job Completed with No Error", "Not Supported", 
          "Unknown", "Timeout", "Failed", "Invalid Parameter", 
          "In Use", "DMTF Reserved", 
          "Method Parameters Checked - Job Started", 
          "Method Reserved", "Vendor Specific" }]
   uint32 DeleteStoragePool(
         [IN ( false ), OUT, Description ( 
             "Reference to the job (may be null if job completed)."
              )]
      CIM_ConcreteJob REF Job, 
         [IN, Description ( "Reference to the pool to delete." )]
      CIM_StoragePool REF Pool);

      [Description ( 
          "Start a job to delete an element previously created from "
          "a StoragePool. The freed space is returned to the source "
          "StoragePool. If 0 is returned, the function completed "
          "successfully and no ConcreteJob was required. If "
          "4096/0x1000 is returned, a ConcreteJob will be started "
          "to delete the element. A reference to the Job is "
          "returned in the Job parameter." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "4096", 
          "4097..32767", "32768..65535" }, 
       Values { "Job Completed with No Error", "Not Supported", 
          "Unknown", "Timeout", "Failed", "Invalid Parameter", 
          "In Use", "DMTF Reserved", 
          "Method Parameters Checked - Job Started", 
          "Method Reserved", "Vendor Specific" }]
   uint32 ReturnToStoragePool(
         [IN ( false ), OUT, Description ( 
             "Reference to the job (may be null if job completed)."
              )]
      CIM_ConcreteJob REF Job, 
         [IN, Description ( 
             "Reference to the element to return to the StoragePool."
              )]
      CIM_LogicalElement REF TheElement);

      [Description ( 
          "Start a job to create a new storage object which is a "
          "replica of the specified source storage object. "
          "(SourceElement). Note that using the input paramter, "
          "CopyType, this function can be used to instantiate the "
          "replica, and to create an ongoing association between "
          "the source and replica. If 0 is returned, the function "
          "completed successfully and no ConcreteJob instance is "
          "created. If 4096/0x1000 is returned, a ConcreteJob is "
          "started, a reference to which is returned in the Job "
          "output parameter." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "4096", 
          "4097..32767", "32768..65535" }, 
       Values { "Job Completed with No Error", "Not Supported", 
          "Unknown", "Timeout", "Failed", "Invalid Parameter", 
          "In Use", "DMTF Reserved", 
          "Method Parameters Checked - Job Started", 
          "Method Reserved", "Vendor Specific" }]
   uint32 CreateReplica(
         [IN, Description ( 
             "A end user relevant name for the element being "
             "created. If NULL, then a system supplied default "
             "name can be used. The value will be stored in the "
             "\'ElementName\' property for the created element." )]
      string ElementName, 
         [IN ( false ), OUT, Description ( 
             "Reference to the job (may be null if job completed)."
              )]
      CIM_ConcreteJob REF Job, 
         [Required, IN, Description ( 
             "The source storage object which may be a "
             "StorageVolume or storage object." )]
      CIM_LogicalElement REF SourceElement, 
         [IN ( false ), OUT, Description ( 
             "Reference to the created target storage element "
             "(i.e., the replica)." )]
      CIM_LogicalElement REF TargetElement, 
         [IN, Description ( 
             "The definition for the StorageSetting to be "
             "maintained by the target storage object (the "
             "replica)." )]
      CIM_StorageSetting REF TargetSettingGoal, 
         [IN, Description ( 
             "The underlying storage for the target element (the "
             "replica) will be drawn from TargetPool if "
             "specified, otherwise the allocation is "
             "implementation specific." )]
      CIM_StoragePool REF TargetPool, 
         [IN, Description ( 
             "CopyType describes the type of copy that will be "
             "made. Values are: \n"
             "Async: Create and maintain an asynchronous copy of "
             "the source. \n"
             "Sync: Create and maintain a synchronized copy of "
             "the source. \n"
             "UnSyncAssoc: Create an unsynchronized copy and "
             "maintain an association to the source. \n"
             "UnSyncUnAssoc: Create unassociated copy of the "
             "source element." ), 
          ValueMap { "2", "3", "4", "5", "..", "32768..65535" }, 
          Values { "Async", "Sync", "UnSyncAssoc", 
             "UnSyncUnAssoc", "DMTF Reserved", "Vendor Specific" }]
      uint16 CopyType);

      [Description ( 
          "Modify (or start a job to modify) the synchronization "
          "association between two storage objects. If 0 is "
          "returned, the function completed successfully and no "
          "ConcreteJob instance was created. If 0x1000 is returned, "
          "a ConcreteJob was started and a reference to this Job is "
          "returned in the Job output parameter. A return value of "
          "1 indicates the method is not supported. All other "
          "values indicate some type of error condition." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x1000", 
          "0x1001..0x7FFF", "0x8000..0xFFFF" }, 
       Values { "Job Completed with No Error", "Not Supported", 
          "Unspecified Error", "Timeout", "Failed", 
          "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Method Parameters Checked - Job Started", 
          "Method Reserved", "Vendor Specific" }]
   uint32 ModifySynchronization(
         [IN, Description ( 
             "Operation describes the type of modification to be "
             "made to the replica. Values are: \n"
             "Detach: \'Forget\' the synchronization between two "
             "storage objects. Start to treat the objects as "
             "independent. \n"
             "Fracture: Suspend the synchronization between two "
             "storage objects using Sync or Async replication. \n"
             "The association and (typically) changes are "
             "remembered to allow a fast resynchronization. This "
             "may be used during a backup cycle to allow one of "
             "the objects to be copied while the other remains "
             "in production. \n"
             "Resync Replica: Re-establish the synchronization "
             "of a Sync or Async replication. This will negate "
             "the action of a previous Fracture operation. "
             "Recreate a Point In Time image for an UnSyncAssoc "
             "replication. \n"
             "Restore from Replica: Renew the contents of the "
             "original storage object from a replica. \n"
             "Prepare: Get the link ready for a Resync operation "
             "to take place. Some implementations will require "
             "this operation to be invoked to keep the Resync "
             "operation as fast as possible. May start the copy "
             "engine. \n"
             "Unprepare: Clear a prepared state if a Prepare is "
             "not to be followed by a Resync operation. \n"
             "Quiesce: Some applications require notification so "
             "that they can ready the link for an operation. For "
             "example flush any cached data or buffered changes. "
             "The copy engine is stopped for UnSyncAssoc "
             "replications. \n"
             "Unquiesce: Take the link from the quiesced state "
             "(without executing the intended operation. \n"
             "Start Copy: initiate a full background copy of the "
             "source to the UnSyncAssoc replica. Replica enters "
             "Frozen state when copy operation is completed. \n"
             "Stop Copy: stop the background copy previously "
             "started. Reset To Sync: Change the CopyType of the "
             "association to Sync (e.g., from the Async "
             "CopyType). \n"
             "Reset To Async: Change the CopyType of the "
             "association to Async (e.g., from the Sync "
             "CopyType)." ), 
          ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", 
             "9", "10", "11", "12", "13", "..", "0x8000..0xFFFF" }, 
          Values { "DMTF Reserved", "DMTF Reserved", "Detach", 
             "Fracture", "Resync Replica", 
             "Restore from Replica", "Prepare", "Unprepare", 
             "Quiesce", "Unquiesce", "Reset To Sync", 
             "Reset To Async", "Start Copy", "Stop Copy", 
             "DMTF Reserved", "Vendor Specific" }]
      uint16 Operation, 
         [IN ( false ), OUT, Description ( 
             "Reference to the job (may be null if the task completed)."
              )]
      CIM_ConcreteJob REF Job, 
         [IN, Description ( 
             "The referenced to the StorageSynchronized "
             "association describing the storage source/replica "
             "relationship." )]
      CIM_StorageSynchronized REF Synchronization);

      [Description ( 
          "Create (or start a job to create) a StorageSynchronized "
          "relationship between two existing storage objects. Note "
          "that using the input parameter, CopyType, this function "
          "can be used to to create an ongoing association between "
          "the source and replica. If 0 is returned, the function "
          "completed successfully and no ConcreteJob instance is "
          "created. If 0x1000 is returned, a ConcreteJob is "
          "started, a reference to which is returned in the Job "
          "output parameter. A return value of 1 indicates the "
          "method is not supported. All other values indicate some "
          "type of error condition." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x1000", 
          "0x1001..0x7FFF", "0x8000..0xFFFF" }, 
       Values { "Job Completed with No Error", "Not Supported", 
          "Unspecified Error", "Timeout", "Failed", 
          "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Method Parameters Checked - Job Started", 
          "Method Reserved", "Vendor Specific" }]
   uint32 AttachReplica(
         [IN ( false ), OUT, Description ( 
             "Reference to the job (may be null if the task completed)."
              )]
      CIM_ConcreteJob REF Job, 
         [Required, IN, Description ( 
             "The source storage object which may be a "
             "StorageVolume or other storage object." )]
      CIM_ManagedElement REF SourceElement, 
         [IN, Description ( 
             "Reference to the target storage element (i.e., the replica)."
              )]
      CIM_ManagedElement REF TargetElement, 
         [IN, Description ( 
             "CopyType describes the type of Synchronized "
             "relationship that will be created. Values are: \n"
             "Async: Create and maintain an asynchronous copy of "
             "the source. \n"
             "Sync: Create and maintain a synchronized copy of "
             "the source. \n"
             "UnSyncAssoc: Create an unsynchronized copy and "
             "maintain an association to the source. \n"
             "UnSyncUnAssoc: Create unassociated copy of the "
             "source element." ), 
          ValueMap { "2", "3", "4", "5", "..", "0x8000..0xFFFF" }, 
          Values { "Async", "Sync", "UnSyncAssoc", 
             "UnSyncUnAssoc", "DMTF Reserved", "Vendor Specific" }]
      uint16 CopyType);

      [Experimental, Description ( 
          "Create (or start a job to create) a StorageSynchronized "
          "mirror relationship between two storage elements. The "
          "target element may be a local or a remote storage "
          "element. A remote mirror pair may be scoped by a "
          "peer-to-peer connection modeled as a NetworkPipe between "
          "peers. \n"
          "\n"
          "If Job Completed with No Error (0) is returned, the "
          "function completed successfully and a ConcreteJob "
          "instance is not created. \n"
          "\n"
          "If Method Parameters Checked - Job Started (0x1000) is "
          "returned, a ConcreteJob is started, a reference to which "
          "is returned in the Job output parameter. \n"
          "\n"
          "A return value of Not Supported (1) indicates the method "
          "is not supported. \n"
          "\n"
          "All other values indicate some type of error condition." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x1000", 
          "0x1001..0x7FFF", "0x8000..0xFFFF" }, 
       Values { "Job Completed with No Error", "Not Supported", 
          "Unspecified Error", "Timeout", "Failed", 
          "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Method Parameters Checked - Job Started", 
          "Method Reserved", "Vendor Specific" }]
   uint32 AttachOrModifyReplica(
         [IN ( false ), OUT, Description ( 
             "Reference to the job (may be null if the task completed)."
              )]
      CIM_ConcreteJob REF Job, 
         [Required, IN, Description ( 
             "The source storage element which may be a "
             "StorageVolume, StorageExtent, LogicalFile, "
             "FileSystem, CommonDatabase, or any other storage "
             "object. For this reason, the type is made very "
             "generic." )]
      CIM_ManagedElement REF SourceElement, 
         [Required, IN, Description ( 
             "Reference to the target storage element (i.e., the "
             "replica). The target storage element which may be "
             "a StorageVolume, StorageExtent, LogicalFile, "
             "FileSystem, CommonDatabase, or any other storage "
             "object. For this reason, the type is made very "
             "generic." )]
      CIM_ManagedElement REF TargetElement, 
         [Required, IN, Description ( 
             "CopyType describes the type of Synchronized "
             "relationship that will be created. Values are: "
             "Async: Create and maintain an asynchronous copy of "
             "the source. Sync: Create and maintain a "
             "synchronized copy of the source. UnSyncAssoc: "
             "Create an unsynchronized copy and maintain an "
             "association to the source element. \n"
             "UnSyncUnAssoc: Create an unassociated copy of the "
             "source element. \n"
             "UnSyncAssoc and UnSyncUnAssoc are not supported "
             "for remote mirror replicas." ), 
          ValueMap { "2", "3", "4", "5", "6..4095", 
             "0x1000..0xFFFF" }, 
          Values { "Async", "Sync", "UnSyncAssoc", 
             "UnSyncUnAssoc", "DMTF Reserved", "Vendor Specific" }]
      uint16 CopyType, 
         [IN, Description ( 
             "The StorageSetting properties to be created or "
             "modified for the target element." ), 
          EmbeddedInstance ( "CIM_SettingData" )]
      string Goal, 
         [IN, Description ( 
             "The NetworkPipe element that scopes the remote "
             "mirror pair. If the value is null, remote mirrors "
             "do not require a pre-established connection." )]
      CIM_NetworkPipe REF ReplicationPipe);

      [Experimental, Description ( 
          "This method establishes a peer-to-peer connection "
          "identified by a NetworkPipe element and two "
          "ProtocolEndpoint elements created by the method "
          "provider. The NetworkPipe is associated to a special "
          "peer-to-peer Network element. The provider will verify "
          "that two systems are capable of a peer relationship. If "
          "endpoints are assigned to the pipe, the same number of "
          "source and target endpoints must be supplied by the "
          "client to form a set of endpoint pairs. If "
          "ReplicationPipe is not supplied as an input parameter, a "
          "new pipe is created. If a pipe is supplied, a new set of "
          "endpoints is assigned to the existing pipe. \n"
          "\n"
          "If Success (0) is returned, the function completed "
          "successfully. \n"
          "\n"
          "A return value of Not Supported (1) indicates the method "
          "is not supported. \n"
          "\n"
          "A return value of Busy (0x1000) indicates the method is "
          "not supported. \n"
          "\n"
          "All other values indicate some type of error condition." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "..", "0x1000", 
          "0x1001..0x7FFF", "0x8000..0xFFFF" }, 
       Values { "Success", "Not Supported", "Unspecified Error", 
          "Timeout", "Failed", "Invalid Parameter", "DMTF Reserved", 
          "Busy", "Method Reserved", "Vendor Specific" }]
   uint32 CreateOrModifyReplicationPipe(
         [IN, Description ( 
             "A user-friendly name for the element created." )]
      string PipeElementName, 
         [Required, IN, Description ( 
             "One of the two peer systems participating in the "
             "established peer-to-peer connection. If the "
             "provider supports uni-directional connections, "
             "this must identify the system hosting replica "
             "source elements." )]
      CIM_ComputerSystem REF SourceSystem, 
         [Required, IN, Description ( 
             "One of the two peer systems participating in the "
             "established peer-to-peer connection. If the "
             "provider supports uni-directional connections, "
             "this must identify the system hosting replica "
             "target elements." )]
      CIM_ComputerSystem REF TargetSystem, 
         [IN, Description ( 
             "References to source system endpoints/ports "
             "assigned to the pipe. If a new pipe is created, "
             "this is the initial set of endpoints assigned. If "
             "an existing pipe is modified, this set replaces "
             "the previous set. The list must be null if a "
             "provider does not allow the client to manage port "
             "assignment." )]
      CIM_ProtocolEndpoint REF SourceEndpoint[], 
         [IN, Description ( 
             "References to target system endpoints/ports "
             "assigned to the pipe. If a new pipe is created, "
             "this is the initial set of endpoints assigned. If "
             "an existing pipe is modified, this set replaces "
             "the previous set. The list must be null if a "
             "provider does not allow the client to manage port "
             "assignment." )]
      CIM_ProtocolEndpoint REF TargetEndpoint[], 
         [IN, Description ( 
             "The setting properties to be maintained for the "
             "peer-to-peer connection." ), 
          EmbeddedInstance ( "CIM_SettingData" )]
      string Goal, 
         [IN, OUT, Description ( 
             "Reference to the created or modified NetworkPipe." )]
      CIM_NetworkPipe REF ReplicationPipe);

      [Experimental, Description ( 
          "Create (or start a job to create) a replication buffer "
          "that buffers asynchronous write operations for remote "
          "mirror pairs. The buffer is an instance of CIM_Memory "
          "with an AssociatedMemory association to a hosting system "
          "or to a replication network pipe. The buffer element may "
          "be created based on a StorageExtent, in a pool or in a "
          "manner opaque to a client. If 0 is returned, the "
          "function completed successfully and no ConcreteJob "
          "instance is created. If 0x1000 is returned, a "
          "ConcreteJob is started, a reference to which is returned "
          "in the Job output parameter. A return value of 1 "
          "indicates the method is not supported. All other values "
          "indicate some type of error condition. \n"
          "\n"
          "If Job Completed with No Error (0) is returned, the "
          "function completed successfully and a ConcreteJob "
          "instance is not created. \n"
          "\n"
          "If Method Parameters Checked - Job Started (0x1000) is "
          "returned, a ConcreteJob is started, a reference to which "
          "is returned in the Job output parameter. \n"
          "\n"
          "A return value of Not Supported (1) indicates the method "
          "is not supported. \n"
          "\n"
          "All other values indicate some type of error condition." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x1000", 
          "0x1001..0x7FFF", "0x8000..0xFFFF" }, 
       Values { "Job Completed with No Error", "Not Supported", 
          "Unspecified Error", "Timeout", "Failed", 
          "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Method Parameters Checked - Job Started", 
          "Method Reserved", "Vendor Specific" }]
   uint32 CreateReplicationBuffer(
         [IN ( false ), OUT, Description ( 
             "Reference to the job (may be null if the task completed)."
              )]
      CIM_ConcreteJob REF Job, 
         [Required, IN, Description ( 
             "The hosting system or replication pipe that will "
             "be antecedent to the created buffer." )]
      CIM_ManagedElement REF Host, 
         [IN, Description ( 
             "Reference to a component extent for the buffer element."
              )]
      CIM_StorageExtent REF TargetElement, 
         [IN, Description ( 
             "Reference to a container pool for the buffer element."
              )]
      CIM_StoragePool REF TargetPool, 
         [OUT, Description ( 
             "Reference to the created replica buffer element." )]
      CIM_Memory REF ReplicaBuffer);

      [Description ( 
          "Start a job to create (or modify) a specified storage "
          "element from specified input StorageExtents. The created "
          "or modified storage element can be a StorageExtent, "
          "StorageVolume, LogicalDisk, or StoragePool. An input "
          "list of InElements must be specified. The "
          "GetAvailableExtents method can be used to get a list of "
          "valid extents that can be used to achieve a desired "
          "goal. Validity of the extents is determined by the "
          "implementation. As an input parameter, Size specifies "
          "the desired size of the element. As an output parameter, "
          "it specifies the size achieved. Space is taken from the "
          "input InElements. The desired Settings for the element "
          "are specified by the Goal parameter. If the size of "
          "Extents passed is less than the size requested, then the "
          "capacity is drawn from the extents in the order, left to "
          "right, that the Extents were specified. The partial "
          "consumption of an Extent is represented by an Extent for "
          "the capacity used and an Extent for the capacity not "
          "used. If the Size is NULL, then a configuration using "
          "all Extents passed will be attempted. If the requested "
          "size cannot be created, no action will be taken, and the "
          "Return Value will be 4097/0x1001. Also, the output value "
          "of Size is set to the nearest possible size. If 0 is "
          "returned, the function completed successfully and no "
          "ConcreteJob instance was required. If 4096/0x1000 is "
          "returned, a ConcreteJob will be started to create the "
          "element. The Job\'s reference will be returned in the "
          "output parameter Job." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "4096", 
          "4097", "4098..32767", "32768..65535" }, 
       Values { "Completed with No Error", "Not Supported", 
          "Unknown", "Timeout", "Failed", "Invalid Parameter", 
          "In Use", "DMTF Reserved", 
          "Method Parameters Checked - Job Started", 
          "Size Not Supported", "Method Reserved", "Vendor Specific" }]
   uint32 CreateOrModifyElementFromElements(
         [IN, Description ( 
             "A end user relevant name for the element being "
             "created. If NULL, then a system-supplied default "
             "name can be used. The value will be stored in the "
             "\'ElementName\' property for the created element. "
             "If not NULL, this parameter will supply a new name "
             "when modifying an existing element." )]
      string ElementName, 
         [Experimental, Required, IN, Description ( 
             "Enumeration indicating the type of element being "
             "created or modified. If the input parameter "
             "TheElement is specified when the operation is a "
             "\'modify\', this type value must match the type of "
             "that instance. The actual CIM class of the created "
             "TheElement can be vendor-specific, but it must be "
             "a derived class of the appropriate CIM class -- "
             "i.e., CIM_StorageVolume, CIM_StorageExtent, "
             "CIM_LogicalDisk, or CIM_StoragePool." ), 
          ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", 
             "..", "32768..65535" }, 
          Values { "Unknown", "Reserved", "Storage Volume", 
             "Storage Extent", "Storage Pool", "Logical Disk", 
             "ThinlyProvisionedStorageVolume", 
             "ThinlyProvisionedLogicalDisk", "DMTF Reserved", 
             "Vendor Specific" }]
      uint16 ElementType, 
         [IN ( false ), OUT, Description ( 
             "Reference to the job (may be null if job completed)."
              )]
      CIM_ConcreteJob REF Job, 
         [IN, Description ( 
             "The requirements for the element to maintain. If "
             "set to a null value, the default configuration "
             "associated with the Service will be used. This "
             "parameter should be a reference to a Setting, "
             "SettingData, or Profile appropriate to the element "
             "being created. If not NULL, this parameter will "
             "supply a new Goal when modifying an existing "
             "element." )]
      CIM_ManagedElement REF Goal, 
         [IN, OUT, Description ( 
             "As an input parameter Size specifies the desired "
             "size. If not NULL, this parameter will supply a "
             "new size when modifying an existing element. As an "
             "output parameter Size specifies the size achieved." ), 
          Units ( "Bytes" ), 
          PUnit ( "byte" )]
      uint64 Size, 
         [Required, IN, Description ( 
             "Array of references to storage element instances "
             "that are used to create or modify TheElement." )]
      CIM_StorageExtent REF InElements[], 
         [IN, OUT, Description ( 
             "As an input parameter: if null, creates a new "
             "element. If not null, then the method modifies the "
             "specified element. As an output parameter, it is a "
             "reference to the resulting element." )]
      CIM_LogicalElement REF TheElement);

      [Experimental, Description ( 
          "This method requests that the system rescan SCSI devices "
          "for changes in their configuration. If called on a "
          "general-purpose host, the changes are reflected in the "
          "list of devices available to applications (for example, "
          "the UNIX \'device tree\'. This method may also be used "
          "on a storage appliance to force rescanning of attached "
          "SCSI devices. \n"
          "\n"
          "This operation can be disruptive; optional parameters "
          "allow the caller to limit the scan to a single or set of "
          "SCSI device elements. All parameters are optional; if "
          "parameters other Job are passed in as null, a full scan "
          "is invoked." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6..4095", "4096", 
          "4097", "4098", "4099", "4100", "..", "32768..65535" }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "DMTF Reserved", 
          "Invalid connection type", "Invalid Initiator", 
          "No matching target found", "No matching LUs found", 
          "Prohibited by name binding configuration", 
          "DMTF Reserved", "Vendor Specific" }]
   uint32 ScsiScan(
         [IN, OUT, Description ( 
             "Reference to the job (may be null if job completed)."
              )]
      CIM_ConcreteJob REF Job, 
         [Description ( 
             "The type of connection, constrains the scan to "
             "initiator ports of this type. Only used if the "
             "Initiators parameter is null." ), 
          ValueMap { "1", "2", "3", "4", "5", "6", "7", "8", "9" }, 
          Values { "Other", "Fibre Channel", "Parallel SCSI", 
             "SSA", "IEEE 1394", "RDMA", "iSCSI", "SAS", "ADT" }, 
          ModelCorrespondence { 
             "CIM_SCSIProtocolEndpoint.ConnectionType" }]
      uint16 ConnectionType, 
         [Description ( 
             "The connection type, if the ConnectionType "
             "parameter is \"Other\"." )]
      string OtherConnectionType, 
         [Description ( 
             "A list of references to initiators. Scanning will "
             "be limited to SCSI targets attached to these "
             "initiators. If this parameter is null and "
             "connection is specified, all initiators of that "
             "connection type are scanned. If this parameter and "
             "ConnectionType are null, all targets on all system "
             "initiators are probed." )]
      CIM_SCSIProtocolEndpoint REF Initiators[], 
         [Description ( 
             "A list of names or numbers for targets. These "
             "should be formatted to match the appropriate "
             "connection type, For example, PortWWNs would be "
             "specified for Fibre Channel targets." )]
      string Targets[], 
         [Description ( 
             "A list of SCSI logical unit numbers representing "
             "logical units hosted on the targets specified in "
             "the Targets argument." )]
      string LogicalUnits[]);

      [Experimental, Description ( 
          "Allows a client to request the Usage to be set if the "
          "client has access to the element supplied and the "
          "request is valid." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "4096", 
          "4097..32767", "32768..65535" }, 
       Values { "Completed with No Error", "Not Supported", 
          "Unknown", "Timeout", "Failed", "Invalid Parameter", 
          "Not Authorized", "DMTF Reserved", 
          "Method Parameters Checked - Job Started", 
          "Method Reserved", "Vendor Specific" }]
   uint32 RequestUsageChange(
         [IN, Description ( "The action to perform." ), 
          ValueMap { "2", "3", "..", "32768..65535" }, 
          Values { "Set", "Modify \"Other\" description only", 
             "DMTF Reserved", "Vendor Specific" }]
      uint16 Operation, 
         [IN, Description ( 
             "Applicable requested usage/restriction -- see the "
             "appropriate Usage ValueMap." ), 
          ModelCorrespondence { "CIM_StoragePool.Usage", 
             "CIM_StorageExtent.Usage" }]
      uint16 UsageValue, 
         [IN, Description ( 
             "New description text. Applicable when the usage "
             "value includes \"Other\"." )]
      string OtherUsageDescription, 
         [OUT, Description ( 
             "Reference to the job (may be null if job completed)."
              )]
      CIM_ConcreteJob REF Job, 
         [IN, Description ( "The storage element to modify." )]
      CIM_LogicalElement REF TheElement);

      [Experimental, Description ( 
          "Allows retrieving elements that meet the specified "
          "Usage. The criteria can be \"available only\", \"in use "
          "only\", or both." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "..", "32768..65535" }, 
       Values { "Completed with No Error", "Not Supported", 
          "Unknown", "Timeout", "Failed", "Invalid Parameter", 
          "DMTF Reserved", "Vendor Specific" }]
   uint32 GetElementsBasedOnUsage(
         [IN, Description ( 
             "Enumeration indicating the type of elements to get." ), 
          ValueMap { "0", "2", "3", "4", "5", "..", "32768..65535" }, 
          Values { "Unknown", "StorageVolume", "StorageExtent", 
             "StoragePool", "Logical Disk", "DMTF Reserved", 
             "Vendor Specific" }]
      uint16 ElementType, 
         [IN, Description ( "The specific Usage to be retrieved." ), 
          ModelCorrespondence { "CIM_StoragePool.Usage", 
             "CIM_StorageExtent.Usage" }]
      uint16 Usage, 
         [IN, Description ( 
             "Specifies whether to retrieve all elements, "
             "available elements only, or the elements that are "
             "in use." ), 
          ValueMap { "0", "2", "3", "4", "..", "32768..65535" }, 
          Values { "Unknown", "All", "Available Only", 
             "In Use Only", "DMTF Reserved", "Vendor Specific" }]
      uint16 Criteria, 
         [IN, Description ( 
             "Limit the search for the elements that satisfy the "
             "criteria to this StoragePool only. If null, all "
             "appropriate StoragePools will be considered." )]
      CIM_StoragePool REF ThePool, 
         [OUT, Description ( 
             "Array of references to storage element instances retrieved."
              )]
      CIM_ManagedSystemElement REF TheElements[]);

      [Experimental, MethodConstraint { 
          "pre:(StorageResources.oclIsTypeOf(CIM_StoragePool)OR StorageResources.oclIsTypeOf(CIM_StorageVolume))" }, 
       Description ( 
          "Start a job to assign affinity of a StoragePool(s) or "
          "StorageVolume(s) to a storage processor. At the "
          "conclusion of the operation, the resource will be a "
          "member of the StorageResourceLoadGroup with the primary "
          "affinity for the specified storage processor. Support "
          "for this method is indicated by the presence of an "
          "instance of StorageServerAsymmetryCapabilites in which "
          "the property StorageResourceAffinityAssignable is "
          "\'true\'. If 0 is returned, the function completed "
          "successfully and no ConcreteJob instance was required. "
          "If 4096/0x1000 is returned, a job will be started to "
          "assign the element. The Job\'s reference will be "
          "returned in the output parameter Job." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "4096", 
          "4097", "4098..32767", "32768..65535" }, 
       Values { "Completed with No Error", "Not Supported", 
          "Unknown", "Timeout", "Failed", "Invalid Parameter", 
          "In Use", "DMTF Reserved", 
          "Method Parameters Checked - Job Started", 
          "Size Not Supported", "Method Reserved", "Vendor Specific" }]
   uint32 AssignStorageResourceAffinity(
         [Required, IN, Description ( 
             "Enumeration indicating the type of resource being "
             "assigned or modified. ." ), 
          ValueMap { "2", "3" }, 
          Values { "StorageVolume", "StoragePool" }]
      uint16 ResourceType, 
         [IN ( false ), OUT, Description ( 
             "Reference to the job (may be null if job completed)."
              )]
      CIM_ConcreteJob REF Job, 
         [IN, OUT ( false ), Description ( 
             "Reference to the storage processor to which to "
             "assign the resource." )]
      CIM_ComputerSystem REF StorageProcessor, 
         [Required, IN, Description ( 
             "Array of references to storage resource instances "
             "to be assigned." )]
      CIM_LogicalElement REF StorageResources[]);

      [Experimental, Description ( 
          "Start a job to delete elements previously created from "
          "StoragePools. The freed space is returned to the source "
          "StoragePool. If 0 is returned, the function completed "
          "successfully and no ConcreteJob was required. If "
          "4096/0x1000 is returned, a ConcreteJob will be started "
          "to delete the element. A reference to the Job is "
          "returned in the Job parameter." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "4096", 
          "4097..32767", "32768..65535" }, 
       Values { "Job Completed with No Error", "Not Supported", 
          "Unknown", "Timeout", "Failed", "Invalid Parameter", 
          "In Use", "DMTF Reserved", 
          "Method Parameters Checked - Job Started", 
          "Method Reserved", "Vendor Specific" }]
   uint32 ReturnElementsToStoragePool(
         [IN, Description ( 
             "Additional options. \n"
             "Continue on nonexistent element: if the method "
             "encounters a non-existent element in the list of "
             "elements supplied, the method continues to delete "
             "the remaining elements. Return error on "
             "nonexistent element: if the method encounters a "
             "non-existent element in the list of elements "
             "supplied, the method returns an error." ), 
          ValueMap { "2", "3", "..", "32768..65535" }, 
          Values { "Continue on nonexistent element", 
             "Return error on nonexistent element", 
             "DMTF Reserved", "Vendor Specific" }]
      uint16 Options, 
         [IN ( false ), OUT, Description ( 
             "Reference to the job (may be null if job completed)."
              )]
      CIM_ConcreteJob REF Job, 
         [Required, IN, Description ( 
             "References to the elements to return to the StoragePool."
              )]
      CIM_LogicalElement REF TheElements[]);

      [Experimental, Description ( 
          "Start a job to create (or modify) a specified elements "
          "(for example StorageVolumes or StorageExtents) from "
          "StoragePools. One of the parameters for this method is "
          "Size. As an input parameter, Size specifies the desired "
          "size of the element. As an output parameter, it "
          "specifies the size achieved. Space is taken from the "
          "input StoragePool. The desired settings for the element "
          "are specified by the Goal parameter. If the requested "
          "size cannot be created, no action will be taken, and the "
          "Return Value will be 4097/0x1001. Also, the output value "
          "of Size is set to the nearest possible size. If 0 is "
          "returned, the function completed successfully and no "
          "ConcreteJob instance was required. If 4096/0x1000 is "
          "returned, a ConcreteJob will be started to create the "
          "element. The Job\'s reference will be returned in the "
          "output parameter Job. If the number of elements created "
          "is less than the number of elements requested, the "
          "return value will be 4098/0x1002." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "4096", 
          "4097", "4098", "4099..32767", "32768..65535" }, 
       Values { "Job Completed with No Error", "Not Supported", 
          "Unknown", "Timeout", "Failed", "Invalid Parameter", 
          "In Use", "DMTF Reserved", 
          "Method Parameters Checked - Job Started", 
          "Size Not Supported", "Partially Completed Operation", 
          "Method Reserved", "Vendor Specific" }]
   uint32 CreateElementsFromStoragePools(
         [IN, Description ( 
             "One or more user relevant names for the element "
             "being created. If NULL, then system supplied "
             "default names may be used. The value will be "
             "stored in the \"ElementName\" property for the "
             "created element." )]
      string ElementNames[], 
         [IN, Description ( 
             "Enumeration indicating the type of element being "
             "created. With ElementType of \"2\" and \"3\", the "
             "implementation decides the provisioning of the "
             "element." ), 
          ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", 
             "..", "32768..65535" }, 
          Values { "Unknown", "Reserved", "StorageVolume", 
             "StorageExtent", "LogicalDisk", 
             "ThinlyProvisionedStorageVolume", 
             "ThinlyProvisionedLogicalDisk", 
             "FullyProvisionedStorageVolume", 
             "FullyProvisionedLogicalDisk", "DMTF Reserved", 
             "Vendor Specific" }]
      uint16 ElementType, 
         [IN, Description ( 
             "Count of elements to create. If null, it defaults "
             "to one element." )]
      uint64 ElementCount, 
         [IN ( false ), OUT, Description ( 
             "Reference to the job (may be null if job completed)."
              )]
      CIM_ConcreteJob REF Job, 
         [IN, Description ( 
             "The requirements for the element to maintain. If "
             "set to a null value, the default configuration "
             "from the source pool will be used. This parameter "
             "should be a reference to a Setting or Profile "
             "appropriate to the element being created." )]
      CIM_SettingData REF Goal, 
         [IN, OUT, Description ( 
             "As an input parameter Size specifies the desired "
             "size for each element created. As an output "
             "parameter Size specifies the size achieved." ), 
          Units ( "Bytes" ), 
          PUnit ( "byte" )]
      uint64 Size, 
         [IN, Description ( 
             "The Pools from which to create the elements. If "
             "not supplied, system locates the appropriate "
             "pools." )]
      CIM_StoragePool REF InPools[], 
         [OUT, Description ( 
             "Reference to the resulting elements." )]
      CIM_LogicalElement REF TheElements[]);

};



   [Version( "2.40.0" ), Description("{0}")]
class UNIX_StorageConfigurationService : CIM_StorageConfigurationService
{


};

