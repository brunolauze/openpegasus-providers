//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////



// Copyright (c) 2009 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "ManagedElement is an abstract class that provides a common "
       "superclass (or top of the inheritance tree) for the "
       "non-association classes in the CIM Schema." )]
class CIM_ManagedElement {

      [Description ( 
          "InstanceID is an optional property that may be used to "
          "opaquely and uniquely identify an instance of this class "
          "within the scope of the instantiating Namespace. Various "
          "subclasses of this class may override this property to "
          "make it required, or a key. Such subclasses may also "
          "modify the preferred algorithms for ensuring uniqueness "
          "that are defined below.\n"
          "To ensure uniqueness within the NameSpace, the value of "
          "InstanceID should be constructed using the following "
          "\"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If not null and the above "
          "\"preferred\" algorithm is not used, the defining entity "
          "must assure that the resulting InstanceID is not reused "
          "across any InstanceIDs produced by this or other "
          "providers for the NameSpace of this instance. \n"
          "If not set to null for DMTF-defined instances, the "
          "\"preferred\" algorithm must be used with the <OrgID> "
          "set to CIM." )]
   string InstanceID;

      [Description ( 
          "The Caption property is a short textual description "
          "(one- line string) of the object." ), 
       MaxLen ( 64 )]
   string Caption;

      [Description ( 
          "The Description property provides a textual description "
          "of the object." )]
   string Description;

      [Description ( 
          "A user-friendly name for the object. This property "
          "allows each instance to define a user-friendly name in "
          "addition to its key properties, identity data, and "
          "description information. \n"
          "Note that the Name property of ManagedSystemElement is "
          "also defined as a user-friendly name. But, it is often "
          "subclassed to be a Key. It is not reasonable that the "
          "same property can convey both identity and a "
          "user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of "
          "LogicalDevice), the same information can be present in "
          "both the Name and ElementName properties. Note that if "
          "there is an associated instance of "
          "CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask "
          "and MaxElementNameLen properties defined in that class." )]
   string ElementName;

      [Experimental, Description ( 
          "Generation is an optional, monotonically increasing "
          "property that may be used to identify a particular "
          "generation of the resource represented by this class.\n"
          "If Generation is supported by the implementation, its "
          "value shall not be null. \n"
          "Except as otherwise specified, a value (including null) "
          "of Generation specified at creation time shall be "
          "replaced by null if Generation is not supported by the "
          "implementation or shall be a, (possibly different), "
          "non-null value if the implementation does support Generation.\n"
          "After creation and if supported, Generation shall be "
          "updated, at least once per access, whenever the "
          "represented resource is modified, regardless of the "
          "source of the modification.\n"
          "Note: the Generation value only needs to be updated once "
          "between references, even if the resource is updated many "
          "times. The key point is to assure that it will be "
          "different if there have been updates, not to count each update.\n"
          "Note: unless otherwise specified, the value of "
          "Generation within one instance is not required to be "
          "coordinated with the value of Generation in any other instance.\n"
          "Note:the semantics of the instance, (as defined by its "
          "creation class), define the underlying resource. That "
          "underlying resource may be a collection or aggregation "
          "of resources. And, in that case, the semantics of the "
          "instance further define when updates to constituent "
          "resources also require updates to the Generation of the "
          "collective resource. Default behavior of composite "
          "aggregations should be to update the Generation of the "
          "composite whenever the Generation of a component is updated.\n"
          "Subclasses may define additional requirements for "
          "updates on some or all of related instances.\n"
          "For a particular instance, the value of Generation may "
          "wrap through zero, but the elapsed time between wraps "
          "shall be greater than 10\'s of years.\n"
          "This class does not require Generation to be unique "
          "across instances of other classes nor across instances "
          "of the same class that have different keys. Generation "
          "shall be different across power cycles, resets, or "
          "reboots if any of those actions results in an update. "
          "Generation may be different across power cycles, resets, "
          "or reboots if those actions do not result in an update. "
          "If the Generation property of an instance is non-null, "
          "and if any attempt to update the instance includes the "
          "Generation property, then if it doesn\'t match the "
          "current value, the update shall fail.\n"
          "The usage of this property is intended to be further "
          "specified by applicable management profiles. \n"
          "Typically, a client will read the value of this property "
          "and then supply that value as input to an operation that "
          "modifies the instance in some means. This may be via an "
          "explicit parameter in an extrinsic method or via an "
          "embedded value in an extrinsic method or intrinsic operation.\n"
          "For example: a profile may require that an intrinsic "
          "instance modification supply the Generation property and "
          "that it must match for the modification to succeed." )]
   uint64 Generation;


};



// Copyright (c) 2010 DMTF.  All rights reserved.
   [Abstract, Version ( "2.26.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "View is an abstract class that provides a common superclass "
       "for classes providing de-normalized, aggregate representations "
       "of managed resources. The definition of each sub-class will "
       "include properties propagated from the the graph of classes "
       "that are used to model the resource in the normalized view. "
       "The classes may be resource classes or associations. The "
       "definition of how a value is propagated (i.e. source class and "
       "value transformations) is required to be specified. \n"
       "Sub-classes may be explicitly constrained to be read only. If "
       "a sub-class is not constrained as read only, the designers are "
       "strongly encouraged to carefully consider the data "
       "synchronization and consistencies issues that may result. The "
       "ElementView association may be used to find the instances that "
       "form the normalized view of the managed resource." )]
class CIM_View : CIM_ManagedElement {


};



// Copyright (c) 2011 DMTF.  All rights reserved.
   [Experimental, Version ( "2.28.0" ), 
    UMLPackagePath ( "CIM::Device::Views" ), 
    Description ( 
       "The CIM_StoragePoolView is a view that is derived from "
       "CIM_StoragePool, CIM_StorageCapabilities, "
       "CIM_ElementCapabilities, CIM_StorageConfigurationCapabilities, "
       "and CIM_AllocatedFromStoragePool.\n"
       "CIM_ElementView may associate CIM_StoragePoolView to its "
       "underlying elements (regardless of whether or not they are "
       "instantiated)." )]
class CIM_StoragePoolView : CIM_View {

      [Key, Description ( 
          "The InstanceID of the StoragePool as reported in its "
          "underlying StoragePool." ), 
       ModelCorrespondence { "CIM_StoragePool.InstanceID" }]
   string SPInstanceID;

      [Description ( 
          "The ElementName of the StoragePool as reported in its "
          "underlying StoragePool." ), 
       ModelCorrespondence { "CIM_StoragePool.ElementName" }]
   string SPElementName;

      [Description ( 
          "The PoolID of the StoragePool as reported in its "
          "underlying StoragePool." ), 
       ModelCorrespondence { "CIM_StoragePool.PoolID" }]
   string SPPoolID;

      [Description ( 
          "The RemainingManagedSpace of the StoragePool as reported "
          "in its underlying StoragePool." ), 
       ModelCorrespondence { "CIM_StoragePool.RemainingManagedSpace" }]
   uint64 SPRemainingManagedSpace;

      [Description ( 
          "The TotalManagedSpace of the StoragePool as reported in "
          "its underlying StoragePool." ), 
       ModelCorrespondence { "CIM_StoragePool.TotalManagedSpace" }]
   uint64 SPTotalManagedSpace;

      [Description ( 
          "The Primordial property of the StoragePool as reported "
          "in its underlying StoragePool." ), 
       ModelCorrespondence { "CIM_StoragePool.Primordial" }]
   boolean SPPrimordial;

      [Description ( 
          "The Usage property of the StoragePool as reported in its "
          "underlying StoragePool." ), 
       ModelCorrespondence { "CIM_StoragePool.Usage" }]
   uint16 SPUsage;

      [Description ( 
          "The OtherUsageDescription of the StoragePool as reported "
          "in its underlying StoragePool." ), 
       ModelCorrespondence { "CIM_StoragePool.OtherUsageDescription" }]
   string SPOtherUsageDescription;

      [Description ( 
          "The ClientSettableUsage property of the StoragePool as "
          "reported in its underlying StoragePool." ), 
       ModelCorrespondence { "CIM_StoragePool.ClientSettableUsage" }]
   uint16 SPClientSettableUsage[];

      [Description ( 
          "The InstanceID of the StorageCapabilities for the "
          "StoragePool as reported in its underlying "
          "StorageCapabilities." ), 
       ModelCorrespondence { "CIM_StorageCapabilities.InstanceID" }]
   string SCInstanceID;

      [Description ( 
          "The ElementName of the StorageCapabilities for the "
          "StoragePool as reported in its underlying "
          "StorageCapabilities." ), 
       ModelCorrespondence { "CIM_StorageCapabilities.ElementName" }]
   string SCElementName;

      [Description ( 
          "The ElementType of the StorageCapabilities for the "
          "StoragePool as reported in its underlying "
          "StorageCapabilities." ), 
       ModelCorrespondence { "CIM_StorageCapabilities.ElementType" }]
   uint16 SCElementType;

      [Description ( 
          "The NoSinglePointOfFailure property of the "
          "StorageCapabilities for the StoragePool as reported in "
          "its underlying StorageCapabilities." ), 
       ModelCorrespondence { 
          "CIM_StorageCapabilities.NoSinglePointOfFailure" }]
   boolean SCNoSinglePointOfFailure;

      [Description ( 
          "The NoSinglePointOfFailureDefault property of the "
          "StorageCapabilities for the StoragePool as reported in "
          "its underlying StorageCapabilities." ), 
       ModelCorrespondence { 
          "CIM_StorageCapabilities.NoSinglePointOfFailureDefault" }]
   boolean SCNoSinglePointOfFailureDefault;

      [Description ( 
          "The PackageRedundancyDefault property of the "
          "StorageCapabilities for the StoragePool as reported in "
          "its underlying StorageCapabilities." ), 
       ModelCorrespondence { 
          "CIM_StorageCapabilities.PackageRedundancyDefault" }]
   uint16 SCPackageRedundancyDefault;

      [Description ( 
          "The PackageRedundancyMin property of the "
          "StorageCapabilities for the StoragePool as reported in "
          "its underlying StorageCapabilities." ), 
       ModelCorrespondence { 
          "CIM_StorageCapabilities.PackageRedundancyMin" }]
   uint16 SCPackageRedundancyMin;

      [Description ( 
          "The PackageRedundancyMax property of the "
          "StorageCapabilities for the StoragePool as reported in "
          "its underlying StorageCapabilities." ), 
       ModelCorrespondence { 
          "CIM_StorageCapabilities.PackageRedundancyMax" }]
   uint16 SCPackageRedundancyMax;

      [Description ( 
          "The DataRedundancyDefault property of the "
          "StorageCapabilities for the StoragePool as reported in "
          "its underlying StorageCapabilities." ), 
       ModelCorrespondence { 
          "CIM_StorageCapabilities.DataRedundancyDefault" }]
   uint16 SCDataRedundancyDefault;

      [Description ( 
          "The DataRedundancyMin property of the "
          "StorageCapabilities for the StoragePool as reported in "
          "its underlying StorageCapabilities." ), 
       ModelCorrespondence { 
          "CIM_StorageCapabilities.DataRedundancyMin" }]
   uint16 SCDataRedundancyMin;

      [Description ( 
          "The DataRedundancyMax property of the "
          "StorageCapabilities for the StoragePool as reported in "
          "its underlying StorageCapabilities." ), 
       ModelCorrespondence { 
          "CIM_StorageCapabilities.DataRedundancyMax" }]
   uint16 SCDataRedundancyMax;

      [Description ( 
          "The ExtentStripeLengthDefault property of the "
          "StorageCapabilities for the StoragePool as reported in "
          "its underlying StorageCapabilities." ), 
       ModelCorrespondence { 
          "CIM_StorageCapabilities.ExtentStripeLengthDefault" }]
   uint16 SCExtentStripeLengthDefault;

      [Description ( 
          "The ParityLayoutDefault property of the "
          "StorageCapabilities for the StoragePool as reported in "
          "its underlying StorageCapabilities." ), 
       ModelCorrespondence { 
          "CIM_StorageCapabilities.ParityLayoutDefault" }]
   uint16 SCParityLayoutDefault;

      [Description ( 
          "The UserDataStripeDepthDefault property of the "
          "StorageCapabilities for the StoragePool as reported in "
          "its underlying StorageCapabilities." ), 
       ModelCorrespondence { 
          "CIM_StorageCapabilities.UserDataStripeDepthDefault" }]
   uint64 SCUserDataStripeDepthDefault;

      [Description ( 
          "The SpaceConsumed from the Parent Pool of the "
          "StoragePool as reported in its underlying "
          "AllocatedFromStoragePool." ), 
       ModelCorrespondence { 
          "CIM_AllocatedFromStoragePool.SpaceConsumed" }]
   uint64 AFSPSpaceConsumed;

      [Description ( 
          "The InstanceID of the StorageConfigurationCapabilities "
          "for the StoragePool as reported in its underlying "
          "StorageConfigurationCapabilities. This is NULL if a "
          "StorageConfigurationCapabilities does not exist." ), 
       ModelCorrespondence { 
          "CIM_StorageConfigurationCapabilities.InstanceID" }]
   string SCCInstanceID;

      [Description ( 
          "The ElementName of the StorageConfigurationCapabilities "
          "for the StoragePool as reported in its underlying "
          "StorageConfigurationCapabilities. This is NULL if a "
          "StorageConfigurationCapabilities does not exist." ), 
       ModelCorrespondence { 
          "CIM_StorageConfigurationCapabilities.ElementName" }]
   string SCCElementName;

      [Description ( 
          "The SupportedStoragePoolFeatures of the "
          "StorageConfigurationCapabilities for the StoragePool as "
          "reported in its underlying "
          "StorageConfigurationCapabilities. This is NULL if a "
          "StorageConfigurationCapabilities does not exist." ), 
       ModelCorrespondence { 
          "CIM_StorageConfigurationCapabilities.SupportedStoragePoolFeatures" }]
   uint16 SCCSupportedStoragePoolFeatures[];

      [Description ( 
          "The SupportedStorageElementTypes of the "
          "StorageConfigurationCapabilities for the StoragePool as "
          "reported in its underlying "
          "StorageConfigurationCapabilities. This is NULL if a "
          "StorageConfigurationCapabilities does not exist." ), 
       ModelCorrespondence { 
          "CIM_StorageConfigurationCapabilities.SupportedStorageElementTypes" }]
   uint16 SCCSupportedStorageElementTypes[];

      [Description ( 
          "The SupportedStorageElementlFeatures of the "
          "StorageConfigurationCapabilities for the StoragePool as "
          "reported in its underlying "
          "StorageConfigurationCapabilities. This is NULL if a "
          "StorageConfigurationCapabilities does not exist." ), 
       ModelCorrespondence { 
          "CIM_StorageConfigurationCapabilities.SupportedStorageElementFeatures" }]
   uint16 SCCSupportedStorageElementFeatures[];

      [Description ( 
          "The SupportedSynchronousActions of the "
          "StorageConfigurationCapabilities for the StoragePool as "
          "reported in its underlying "
          "StorageConfigurationCapabilities. This is NULL if a "
          "StorageConfigurationCapabilities does not exist." ), 
       ModelCorrespondence { 
          "CIM_StorageConfigurationCapabilities.SupportedSynchronousActions" }]
   uint16 SCCSupportedSynchronousActions[];

      [Description ( 
          "The SupportedAsynchronousActions of the "
          "StorageConfigurationCapabilities for the StoragePool as "
          "reported in its underlying "
          "StorageConfigurationCapabilities. This is NULL if a "
          "StorageConfigurationCapabilities does not exist." ), 
       ModelCorrespondence { 
          "CIM_StorageConfigurationCapabilities.SupportedAsynchronousActions" }]
   uint16 SCCSupportedAsynchronousActions[];

      [Description ( 
          "The SupportedStorageElementUsage of the "
          "StorageConfigurationCapabilities for the StoragePool as "
          "reported in its underlying "
          "StorageConfigurationCapabilities. This is NULL if a "
          "StorageConfigurationCapabilities does not exist." ), 
       ModelCorrespondence { 
          "CIM_StorageConfigurationCapabilities.SupportedStorageElementUsage" }]
   uint16 SCCSupportedStorageElementUsage[];

      [Description ( 
          "The ClientSettableElementUsage of the "
          "StorageConfigurationCapabilities for the StoragePool as "
          "reported in its underlying "
          "StorageConfigurationCapabilities. This is NULL if a "
          "StorageConfigurationCapabilities does not exist." ), 
       ModelCorrespondence { 
          "CIM_StorageConfigurationCapabilities.ClientSettableElementUsage" }]
   string SCCClientSettableElementUsage[];

      [Description ( 
          "The SupportedStoragePoolUsage of the "
          "StorageConfigurationCapabilities for the StoragePool as "
          "reported in its underlying "
          "StorageConfigurationCapabilities. This is NULL if a "
          "StorageConfigurationCapabilities does not exist." ), 
       ModelCorrespondence { 
          "CIM_StorageConfigurationCapabilities.SupportedStoragePoolUsage" }]
   string SCCSupportedStoragePoolUsage[];

      [Description ( 
          "The ClientSettablePoolUsage of the "
          "StorageConfigurationCapabilities for the StoragePool as "
          "reported in its underlying "
          "StorageConfigurationCapabilities. This is NULL if a "
          "StorageConfigurationCapabilities does not exist." ), 
       ModelCorrespondence { 
          "CIM_StorageConfigurationCapabilities.ClientSettablePoolUsage" }]
   string SCCClientSettablePoolUsage[];


};



   [Version( "2.40.0" ), Description("{0}")]
class UNIX_StoragePoolView : CIM_StoragePoolView
{


};

