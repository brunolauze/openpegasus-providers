//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////



// Copyright (c) 2005 DMTF.  All rights reserved.
   [Association, Abstract, Version ( "2.10.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "CIM_Dependency is a generic association used to establish "
       "dependency relationships between ManagedElements." )]
class CIM_Dependency {

      [Key, Description ( 
          "Antecedent represents the independent object in this association."
           )]
   CIM_ManagedElement REF Antecedent;

      [Key, Description ( 
          "Dependent represents the object that is dependent on the "
          "Antecedent." )]
   CIM_ManagedElement REF Dependent;


};



// Copyright (c) 2011 DMTF.  All rights reserved.
   [Association, Experimental, Abstract, Version ( "2.28.0" ), 
    UMLPackagePath ( "CIM::Core::Resource" ), 
    Description ( 
       "AbstractElementAllocatedFromPool associates an instance of "
       "CIM_ManagedElement representing an allocated Resource with the "
       "CIM_ManagedElement from which it was allocated" )]
class CIM_AbstractElementAllocatedFromPool : CIM_Dependency {

      [Key, Override ( "Antecedent" ), 
       Description ( 
          "A reference to the ManagedElement that represents a pool "
          "from which an element is allocated." )]
   CIM_ManagedElement REF Antecedent;

      [Key, Override ( "Dependent" ), 
       Description ( 
          "A reference to the element that is alloocated from the "
          "antecedent pool." )]
   CIM_ManagedElement REF Dependent;


};



// Copyright (c) 2011 DMTF.  All rights reserved.
   [Association, Version ( "2.28.0" ), 
    UMLPackagePath ( "CIM::Core::Resource" ), 
    Description ( 
       "ElementAllocatedFromPool associates an instance of "
       "CIM_LogicalElement representing an allocated Resource with the "
       "CIM_ResourcePool from which it was allocated." )]
class CIM_ElementAllocatedFromPool : CIM_AbstractElementAllocatedFromPool {

      [Override ( "Antecedent" ), 
       Description ( "The resource pool." )]
   CIM_ResourcePool REF Antecedent;

      [Override ( "Dependent" ), 
       Description ( "The allocated resource." )]
   CIM_LogicalElement REF Dependent;


};



// Copyright (c) 2005 DMTF.  All rights reserved.
   [Association, Version ( "2.15.0" ), 
    UMLPackagePath ( "CIM::Device::StorageServices" ), 
    Description ( 
       "AllocatedFromStoragePool is an association describing how "
       "LogicalElements are allocated from underlying StoragePools. "
       "These elements typically would be subclasses of StorageExtents "
       "or StoragePools." )]
class CIM_AllocatedFromStoragePool : CIM_ElementAllocatedFromPool {

      [Override ( "Antecedent" ), 
       Description ( "The StoragePool." )]
   CIM_StoragePool REF Antecedent;

      [Override ( "Dependent" ), 
       Description ( "The subsidiary element." )]
   CIM_LogicalElement REF Dependent;

      [Required, Description ( 
          "Space consumed from this Pool, in bytes. This value MUST "
          "be maintained so that, relative to the Antecedent "
          "StoragePool, it is possible to compute TotalManagedSpace "
          "as StoragePool.RemainingManagedSpace plus the sum of "
          "SpaceConsumed from all of the AllocatedFromStoragePool "
          "references from the antecedent StoragePool." ), 
       Units ( "Bytes" ), 
       ModelCorrespondence { "CIM_StoragePool.TotalManagedSpace", 
          "CIM_StoragePool.RemainingManagedSpace" }, 
       PUnit ( "byte" )]
   uint64 SpaceConsumed;

      [Experimental, Description ( 
          "SpaceLimit is the consumption limit for the allocated "
          "storage element from the associated StoragePool. If "
          "SpaceLimt is greater than zero, the assumption is that "
          "the storage element can grow, (for instance an element "
          "representing the storage for a delta replica) \n"
          "If SpaceLimit is greater than zero, SpaceConsumed shall "
          "not exceed the value of SpaceLimit. \n"
          "If SpaceLimit = 0 (the default) then no limits are "
          "asserted on SpaceConsumed." ), 
       Units ( "Bytes" ), 
       ModelCorrespondence { 
          "CIM_AllocatedFromStoragePool.SpaceConsumed" }, 
       PUnit ( "byte" )]
   uint64 SpaceLimit = 0;

      [Experimental, Description ( 
          "If the associated storage element may dynamically "
          "consume an increasing amount of space and a space limit "
          "is enforced on the element, then a non-zero warning "
          "threshold percentage indicates when a warning indication "
          "should be generated based on SpaceConsumed >= "
          "(SpaceLimit*SpaceLimitWarningThreshold)/100." ), 
       Units ( "Percentage" ), 
       MinValue ( 0 ), 
       MaxValue ( 100 ), 
       ModelCorrespondence { 
          "CIM_AllocatedFromStoragePool.SpaceConsumed" }, 
       PUnit ( "percent" )]
   uint16 SpaceLimitWarningThreshold;


};



   [Version( "2.40.0" ), Description("{0}")]
class UNIX_AllocatedFromStoragePool : CIM_AllocatedFromStoragePool
{


};

