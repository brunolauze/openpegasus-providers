//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////



// Copyright (c) 2009 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "ManagedElement is an abstract class that provides a common "
       "superclass (or top of the inheritance tree) for the "
       "non-association classes in the CIM Schema." )]
class CIM_ManagedElement {

      [Description ( 
          "InstanceID is an optional property that may be used to "
          "opaquely and uniquely identify an instance of this class "
          "within the scope of the instantiating Namespace. Various "
          "subclasses of this class may override this property to "
          "make it required, or a key. Such subclasses may also "
          "modify the preferred algorithms for ensuring uniqueness "
          "that are defined below.\n"
          "To ensure uniqueness within the NameSpace, the value of "
          "InstanceID should be constructed using the following "
          "\"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If not null and the above "
          "\"preferred\" algorithm is not used, the defining entity "
          "must assure that the resulting InstanceID is not reused "
          "across any InstanceIDs produced by this or other "
          "providers for the NameSpace of this instance. \n"
          "If not set to null for DMTF-defined instances, the "
          "\"preferred\" algorithm must be used with the <OrgID> "
          "set to CIM." )]
   string InstanceID;

      [Description ( 
          "The Caption property is a short textual description "
          "(one- line string) of the object." ), 
       MaxLen ( 64 )]
   string Caption;

      [Description ( 
          "The Description property provides a textual description "
          "of the object." )]
   string Description;

      [Description ( 
          "A user-friendly name for the object. This property "
          "allows each instance to define a user-friendly name in "
          "addition to its key properties, identity data, and "
          "description information. \n"
          "Note that the Name property of ManagedSystemElement is "
          "also defined as a user-friendly name. But, it is often "
          "subclassed to be a Key. It is not reasonable that the "
          "same property can convey both identity and a "
          "user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of "
          "LogicalDevice), the same information can be present in "
          "both the Name and ElementName properties. Note that if "
          "there is an associated instance of "
          "CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask "
          "and MaxElementNameLen properties defined in that class." )]
   string ElementName;

      [Experimental, Description ( 
          "Generation is an optional, monotonically increasing "
          "property that may be used to identify a particular "
          "generation of the resource represented by this class.\n"
          "If Generation is supported by the implementation, its "
          "value shall not be null. \n"
          "Except as otherwise specified, a value (including null) "
          "of Generation specified at creation time shall be "
          "replaced by null if Generation is not supported by the "
          "implementation or shall be a, (possibly different), "
          "non-null value if the implementation does support Generation.\n"
          "After creation and if supported, Generation shall be "
          "updated, at least once per access, whenever the "
          "represented resource is modified, regardless of the "
          "source of the modification.\n"
          "Note: the Generation value only needs to be updated once "
          "between references, even if the resource is updated many "
          "times. The key point is to assure that it will be "
          "different if there have been updates, not to count each update.\n"
          "Note: unless otherwise specified, the value of "
          "Generation within one instance is not required to be "
          "coordinated with the value of Generation in any other instance.\n"
          "Note:the semantics of the instance, (as defined by its "
          "creation class), define the underlying resource. That "
          "underlying resource may be a collection or aggregation "
          "of resources. And, in that case, the semantics of the "
          "instance further define when updates to constituent "
          "resources also require updates to the Generation of the "
          "collective resource. Default behavior of composite "
          "aggregations should be to update the Generation of the "
          "composite whenever the Generation of a component is updated.\n"
          "Subclasses may define additional requirements for "
          "updates on some or all of related instances.\n"
          "For a particular instance, the value of Generation may "
          "wrap through zero, but the elapsed time between wraps "
          "shall be greater than 10\'s of years.\n"
          "This class does not require Generation to be unique "
          "across instances of other classes nor across instances "
          "of the same class that have different keys. Generation "
          "shall be different across power cycles, resets, or "
          "reboots if any of those actions results in an update. "
          "Generation may be different across power cycles, resets, "
          "or reboots if those actions do not result in an update. "
          "If the Generation property of an instance is non-null, "
          "and if any attempt to update the instance includes the "
          "Generation property, then if it doesn\'t match the "
          "current value, the update shall fail.\n"
          "The usage of this property is intended to be further "
          "specified by applicable management profiles. \n"
          "Typically, a client will read the value of this property "
          "and then supply that value as input to an operation that "
          "modifies the instance in some means. This may be via an "
          "explicit parameter in an extrinsic method or via an "
          "embedded value in an extrinsic method or intrinsic operation.\n"
          "For example: a profile may require that an intrinsic "
          "instance modification supply the Generation property and "
          "that it must match for the modification to succeed." )]
   uint64 Generation;


};



// Copyright (c) 2005 DMTF.  All rights reserved.
   [Abstract, Version ( "2.6.0" ), 
    UMLPackagePath ( "CIM::Core::Collection" ), 
    Description ( 
       "Collection is an abstract class that provides a common "
       "superclass for data elements that represent collections of "
       "ManagedElements and its subclasses." )]
class CIM_Collection : CIM_ManagedElement {


};



// Copyright (c) 2005 DMTF.  All rights reserved.
   [Abstract, Version ( "2.10.0" ), 
    UMLPackagePath ( "CIM::Core::Collection" ), 
    Description ( 
       "The CollectionOfMSEs object allows the grouping of Managed "
       "SystemElements for various identification purposes and to "
       "reduce the complexity of associating Settings and "
       "Configurations. It is abstract to require further definition "
       "and semantic refinement in subclasses. The CollectionOfMSEs "
       "object does not carry any state or status information, but "
       "represents only a grouping or \'bag\' of Elements. For this "
       "reason, it is incorrect to subclass groups that have state or "
       "status from CollectionOfMSEs. An example is CIM_Redundancy "
       "Group (which is subclassed from LogicalElement). \n"
       "Collections typically aggregate similar (\'like\') objects,but "
       "they are not required to do so. Collections simply identify "
       "\'bags\' and might represent an optimization. This purpose is "
       "especially true with respect to their association to Settings "
       "and Configurations. Without Collections, you would need to "
       "define individual ElementSetting and ElementConfiguration "
       "associations, to tie Settings and Configuration objects to "
       "individual ManagedSystemElements. There might be duplication "
       "when assigning the same Setting to multiple objects. In "
       "addition, using the Collection object allows the determination "
       "that the Setting and Configuration associations are indeed the "
       "same for the Collection\'s members. This information would "
       "otherwise be obtained by defining the Collection in a "
       "proprietary manner, and then querying the ElementSetting and "
       "ElementConfiguration associations to determine if the "
       "Collection set is completely covered." )]
class CIM_CollectionOfMSEs : CIM_Collection {

      [Description ( 
          "The identification of the Collection object. When "
          "subclassed, the CollectionID property can be overridden "
          "to be a Key property." ), 
       MaxLen ( 256 )]
   string CollectionID;


};



// Copyright (c) 2005 DMTF.  All rights reserved.
// <change cr="ArchCR00066.004" type="add">Add UmlPackagePath
// qualifier values to CIM Schema.</change>
// <change cr="ArchCR00089.003" type="add">Add PUnit qualifier values
// to Units qualifier values.</change>
// ==================================================================
//  CIM_BufferPool
// ==================================================================
   [Version ( "2.6.0" ), 
    UMLPackagePath ( "CIM::Network::Buffers" ), 
    Description ( 
       "This class represents the use of buffers by a Queuing Service. "
       "The existence and management of individual buffers will be "
       "modeled in a future release. At the current level of "
       "abstraction, modeling the existence of the BufferPool is "
       "necessary. Long term, it is not sufficient. \n"
       "\n"
       "In implementations where there are multiple buffer sizes, an "
       "instance of BufferPool should be defined for each set of "
       "buffers with identical or similar sizes. These instances of "
       "buffer pools can then be grouped together using the "
       "CollectedBuffersPool association. \n"
       "\n"
       "Note that this class is derived from CollectionOfMSEs, and not "
       "from Forwarding or ConditioningService. BufferPool is only a "
       "collection of storage, and is NOT a Service." )]
class CIM_BufferPool : CIM_CollectionOfMSEs {

      [Key, Override ( "CollectionID" ), 
       Description ( 
          "This property is defined in the CollectionOfMSEs class, "
          "but is overridden here to serve as part of the "
          "(composite) key that identifies the BufferPool instance." ), 
       MaxLen ( 256 )]
   string CollectionID;

      [Key, Description ( 
          "CreationClassName indicates the name of the class or the "
          "subclass used in the creation of an instance. When used "
          "with the other key properties of this class, this "
          "property allows all instances of this class and its "
          "subclasses to be uniquely identified." ), 
       MaxLen ( 256 )]
   string CreationClassName;

      [Description ( 
          "The Name property defines the label by which the object is known."
           ), 
       MaxLen ( 256 )]
   string Name;

      [Deprecated { "CIM_BufferPool.SizeOfBuffers" }, 
       Description ( 
          "This property is a 16-bit unsigned integer, and defines "
          "the number of bytes in each buffer. It is deprecated in "
          "lieu of a similar uint32 property." ), 
       Units ( "Bytes" ), 
       PUnit ( "byte" )]
   uint16 BufferSize;

      [Description ( 
          "This property is a 32-bit unsigned integer, and defines "
          "the number of bytes in each buffer." ), 
       Units ( "Bytes" ), 
       PUnit ( "byte" )]
   uint32 SizeOfBuffers;

      [Description ( 
          "This property is a 32-bit unsigned integer, and defines "
          "the total number of buffers in the Pool." )]
   uint32 TotalBuffers;

      [Description ( 
          "This property is a 32-bit unsigned integer, and defines "
          "the number of buffers in the Pool that are currently not "
          "allocated to any instance of a QueuingService. Buffers "
          "allocated to a QueuingService could either be in use "
          "(containing packet data), or allocated to a Queue "
          "pending the arrival of new packet data." )]
   uint32 AvailableBuffers;

      [Description ( 
          "This property is a 32-bit unsigned integer, and defines "
          "the number of buffers in the Pool that have been "
          "simultaneously allocated to multiple instances of "
          "QueuingService." )]
   uint32 SharedBuffers;


};



// Copyright (c) 2005 DMTF.  All rights reserved.
// <change cr="ArchCR00066.004" type="add">Add UmlPackagePath
// qualifier values to CIM Schema.</change>
// <change cr="ArchCR00089.003" type="add">Add PUnit qualifier values
// to Units qualifier values.</change>
// ==================================================================
//  CIM_MPLSBuffers
// ==================================================================
   [Experimental, Version ( "2.8.1000" ), 
    UMLPackagePath ( "CIM::Network::Buffers" ), 
    Description ( 
       "MPLSBuffers represents buffer resources supporting Label "
       "Switch Routers (LSRs) and MPLS interfaces on these LSRs." )]
class CIM_MPLSBuffers : CIM_BufferPool {

      [Description ( 
          "The maximum allocation multiplier (MAM) determines the "
          "proportion of the buffer resource that is available for "
          "allocation to MPLS tunnels/traffic trunks. The value of "
          "the MAM can be chosen so that a resource can be "
          "under-allocated or over-allocated. A resource is said to "
          "be under-allocated if the aggregate demands of all "
          "traffic trunks that can be allocated to it are always "
          "less than the capacity of the resource. A resource is "
          "said to be over-allocated if the aggregate demands of "
          "all traffic trunks allocated to it can exceed the "
          "capacity of the resource." ), 
       Units ( "Percent" ), 
       MinValue ( 0 ), 
       MaxValue ( 100 ), 
       PUnit ( "percent" )]
   uint16 MaxAllocMultiplier;

      [Description ( 
          "This property describes the resource classes to which a "
          "buffer resource belongs. ResourceClasses is defined as a "
          "32-bit vector, and the classes are described in "
          "[RFC2702]. In general, a resource can be assigned to "
          "more than one resource class, since the classes are "
          "coded in the individual bits of the property. \n"
          "\n"
          "Resource classes can be used to implement a variety of "
          "policies. From a Traffic Engineering perspective, they "
          "can be used to implement policies with regard to both "
          "traffic and resource oriented performance optimization. "
          "For example, resource class attributes can specify the "
          "relative preference of sets of resources for path "
          "placement of traffic trunks; explicitly restrict the "
          "placement of traffic trunks to specific subsets of "
          "resources; etc." )]
   uint32 ResourceClasses;


};



   [Version( "2.40.0" ), Description("{0}")]
class UNIX_MPLSBuffers : CIM_MPLSBuffers
{


};

