//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////



// Copyright (c) 2009 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "ManagedElement is an abstract class that provides a common "
       "superclass (or top of the inheritance tree) for the "
       "non-association classes in the CIM Schema." )]
class CIM_ManagedElement {

      [Description ( 
          "InstanceID is an optional property that may be used to "
          "opaquely and uniquely identify an instance of this class "
          "within the scope of the instantiating Namespace. Various "
          "subclasses of this class may override this property to "
          "make it required, or a key. Such subclasses may also "
          "modify the preferred algorithms for ensuring uniqueness "
          "that are defined below.\n"
          "To ensure uniqueness within the NameSpace, the value of "
          "InstanceID should be constructed using the following "
          "\"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If not null and the above "
          "\"preferred\" algorithm is not used, the defining entity "
          "must assure that the resulting InstanceID is not reused "
          "across any InstanceIDs produced by this or other "
          "providers for the NameSpace of this instance. \n"
          "If not set to null for DMTF-defined instances, the "
          "\"preferred\" algorithm must be used with the <OrgID> "
          "set to CIM." )]
   string InstanceID;

      [Description ( 
          "The Caption property is a short textual description "
          "(one- line string) of the object." ), 
       MaxLen ( 64 )]
   string Caption;

      [Description ( 
          "The Description property provides a textual description "
          "of the object." )]
   string Description;

      [Description ( 
          "A user-friendly name for the object. This property "
          "allows each instance to define a user-friendly name in "
          "addition to its key properties, identity data, and "
          "description information. \n"
          "Note that the Name property of ManagedSystemElement is "
          "also defined as a user-friendly name. But, it is often "
          "subclassed to be a Key. It is not reasonable that the "
          "same property can convey both identity and a "
          "user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of "
          "LogicalDevice), the same information can be present in "
          "both the Name and ElementName properties. Note that if "
          "there is an associated instance of "
          "CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask "
          "and MaxElementNameLen properties defined in that class." )]
   string ElementName;

      [Experimental, Description ( 
          "Generation is an optional, monotonically increasing "
          "property that may be used to identify a particular "
          "generation of the resource represented by this class.\n"
          "If Generation is supported by the implementation, its "
          "value shall not be null. \n"
          "Except as otherwise specified, a value (including null) "
          "of Generation specified at creation time shall be "
          "replaced by null if Generation is not supported by the "
          "implementation or shall be a, (possibly different), "
          "non-null value if the implementation does support Generation.\n"
          "After creation and if supported, Generation shall be "
          "updated, at least once per access, whenever the "
          "represented resource is modified, regardless of the "
          "source of the modification.\n"
          "Note: the Generation value only needs to be updated once "
          "between references, even if the resource is updated many "
          "times. The key point is to assure that it will be "
          "different if there have been updates, not to count each update.\n"
          "Note: unless otherwise specified, the value of "
          "Generation within one instance is not required to be "
          "coordinated with the value of Generation in any other instance.\n"
          "Note:the semantics of the instance, (as defined by its "
          "creation class), define the underlying resource. That "
          "underlying resource may be a collection or aggregation "
          "of resources. And, in that case, the semantics of the "
          "instance further define when updates to constituent "
          "resources also require updates to the Generation of the "
          "collective resource. Default behavior of composite "
          "aggregations should be to update the Generation of the "
          "composite whenever the Generation of a component is updated.\n"
          "Subclasses may define additional requirements for "
          "updates on some or all of related instances.\n"
          "For a particular instance, the value of Generation may "
          "wrap through zero, but the elapsed time between wraps "
          "shall be greater than 10\'s of years.\n"
          "This class does not require Generation to be unique "
          "across instances of other classes nor across instances "
          "of the same class that have different keys. Generation "
          "shall be different across power cycles, resets, or "
          "reboots if any of those actions results in an update. "
          "Generation may be different across power cycles, resets, "
          "or reboots if those actions do not result in an update. "
          "If the Generation property of an instance is non-null, "
          "and if any attempt to update the instance includes the "
          "Generation property, then if it doesn\'t match the "
          "current value, the update shall fail.\n"
          "The usage of this property is intended to be further "
          "specified by applicable management profiles. \n"
          "Typically, a client will read the value of this property "
          "and then supply that value as input to an operation that "
          "modifies the instance in some means. This may be via an "
          "explicit parameter in an extrinsic method or via an "
          "embedded value in an extrinsic method or intrinsic operation.\n"
          "For example: a profile may require that an intrinsic "
          "instance modification supply the Generation property and "
          "that it must match for the modification to succeed." )]
   uint64 Generation;


};



// Copyright (c) 2008 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::Capabilities" ), 
    Description ( 
       "Capabilities is an abstract class whose subclasses describe "
       "abilities and/or potential for use. For example, one may "
       "describe the maximum number of VLANs that can be supported on "
       "a system using a subclass of Capabilities. Capabilities are "
       "tied to the elements which they describe using the "
       "ElementCapabilities association. Note that the cardinality of "
       "the ManagedElement reference is Min(1). This cardinality "
       "mandates the instantiation of the ElementCapabilities "
       "association for the referenced instance of Capabilities. "
       "ElementCapabilities describes the existence requirements for "
       "the referenced instance of ManagedElement. Specifically, the "
       "ManagedElement MUST exist and provide the context for the "
       "Capabilities. Note that Capabilities do not indicate what IS "
       "configured or operational, but what CAN or CANNOT exist, be "
       "defined or be used. Note that it is possible to describe both "
       "supported and excluded abilities and functions (both "
       "capabilities and limitations) using this class." )]
class CIM_Capabilities : CIM_ManagedElement {

      [Key, Override ( "InstanceID" ), 
       Description ( 
          "Within the scope of the instantiating Namespace, "
          "InstanceID opaquely and uniquely identifies an instance "
          "of this class. In order to ensure uniqueness within the "
          "NameSpace, the value of InstanceID SHOULD be constructed "
          "using the following \'preferred\' algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "\':\', and where <OrgID> MUST include a copyrighted, "
          "trademarked or otherwise unique name that is owned by "
          "the business entity creating/defining the InstanceID, or "
          "is a registered ID that is assigned to the business "
          "entity by a recognized global authority (This is similar "
          "to the <Schema Name>_<Class Name> structure of Schema "
          "class names.) In addition, to ensure uniqueness <OrgID> "
          "MUST NOT contain a colon (\':\'). When using this "
          "algorithm, the first colon to appear in InstanceID MUST "
          "appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and SHOULD "
          "not be re-used to identify different underlying "
          "(real-world) elements. If the above \'preferred\' "
          "algorithm is not used, the defining entity MUST assure "
          "that the resultant InstanceID is not re-used across any "
          "InstanceIDs produced by this or other providers for this "
          "instance\'s NameSpace. \n"
          "For DMTF defined instances, the \'preferred\' algorithm "
          "MUST be used with the <OrgID> set to \'CIM\'." )]
   string InstanceID;

      [Required, Override ( "ElementName" ), 
       Description ( 
          "The user friendly name for this instance of "
          "Capabilities. In addition, the user friendly name can be "
          "used as a index property for a search of query. (Note: "
          "Name does not have to be unique within a namespace.)" )]
   string ElementName;


      [Experimental, Description ( 
          "Method to create a set of supported SettingData "
          "elements, from two sets of SettingData elements, "
          "provided by the caller. \n"
          "CreateGoal should be used when the SettingData instances "
          "that represents the goal will not persist beyond the "
          "execution of the client and where those instances are "
          "not intended to be shared with other, non-cooperating "
          "clients. \n"
          "Both TemplateGoalSettings and SupportedGoalSettings are "
          "represented as strings containing EmbeddedInstances of a "
          "CIM_SettingData subclass. These embedded instances do "
          "not exist in the infrastructure supporting this method "
          "but are maintained by the caller/client. \n"
          "This method should return CIM_Error(s) representing that "
          "a single named property of a setting (or other) "
          "parameter (either reference or embedded object) has an "
          "invalid value or that an invalid combination of named "
          "properties of a setting (or other) parameter (either "
          "reference or embedded object) has been requested. \n"
          "If the input TemplateGoalSettings is NULL or the empty "
          "string, this method returns a default SettingData "
          "element that is supported by this Capabilities element. \n"
          "If the TemplateGoalSettings specifies values that cannot "
          "be supported, this method shall return an appropriate "
          "CIM_Error and should return a best match for a "
          "SupportedGoalSettings. \n"
          "The client proposes a goal using the "
          "TemplateGoalSettings parameter and gets back Success if "
          "the TemplateGoalSettings is exactly supportable. It gets "
          "back \"Alternative Proposed\" if the output "
          "SupportedGoalSettings represents a supported "
          "alternative. This alternative should be a best match, as "
          "defined by the implementation. \n"
          "If the implementation is conformant to a "
          "RegisteredProfile, then that profile may specify the "
          "algorithms used to determine best match. A client may "
          "compare the returned value of each property against the "
          "requested value to determine if it is left unchanged, "
          "degraded or upgraded. \n"
          "\n"
          "Otherwise, if the TemplateGoalSettings is not applicable "
          "an \"Invalid Parameter\" error is returned. \n"
          "\n"
          "When a mutually acceptable SupportedGoalSettings has "
          "been achieved, the client may use the contained "
          "SettingData instances as input to methods for creating a "
          "new object ormodifying an existing object. Also the "
          "embedded SettingData instances returned in the "
          "SupportedGoalSettings may be instantiated via "
          "CreateInstance, either by a client or as a side-effect "
          "of the execution of an extrinsic method for which the "
          "returned SupportedGoalSettings is passed as an embedded "
          "instance." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", 
          "32768..65535" }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "Alternative Proposed", 
          "DMTF Reserved", "Vendor Specific" }]
   uint16 CreateGoalSettings(
         [IN, Description ( 
             "If provided, TemplateGoalSettings are elements of "
             "class CIM_SettingData, or a derived class, that is "
             "used as the template to be matched. . \n"
             "At most, one instance of each SettingData subclass "
             "may be supplied. \n"
             "All SettingData instances provided by this "
             "property are interpreted as a set, relative to "
             "this Capabilities instance. \n"
             "SettingData instances that are not relevant to "
             "this instance are ignored. \n"
             "If not provided, it shall be set to NULL. In that "
             "case, a SettingData instance representing the "
             "default settings of the associated ManagedElement "
             "is used." ), 
          EmbeddedInstance ( "CIM_SettingData" )]
      string TemplateGoalSettings[], 
         [IN, OUT, Description ( 
             "SupportedGoalSettings are elements of class "
             "CIM_SettingData, or a derived class. \n"
             "At most, one instance of each SettingData subclass "
             "may be supplied. \n"
             "All SettingData instances provided by this "
             "property are interpreted as a set, relative to "
             "this Capabilities instance. \n"
             "\n"
             "To enable a client to provide additional "
             "information towards achieving the "
             "TemplateGoalSettings, an input set of SettingData "
             "instances may be provided. If not provided, this "
             "property shall be set to NULL on input.. Note that "
             "when provided, what property values are changed, "
             "and how, is implementation dependent and may be "
             "the subject of other standards. \n"
             "If provided, the input SettingData instances must "
             "be ones that the implementation is able to support "
             "relative to the ManagedElement associated via "
             "ElementCapabilities. Typically, the input "
             "SettingData instances are created by a previous "
             "instantiation of CreateGoalSettings. \n"
             "If the input SupportedGoalSettings is not "
             "supported by the implementation, then an \"Invalid "
             "Parameter\" (5) error is returned by this call. In "
             "this case, a corresponding CIM_ERROR should also "
             "be returned. \n"
             "On output, this property is used to return the "
             "best supported match to the TemplateGoalSettings. \n"
             "If the output SupportedGoalSettings matches the "
             "input SupportedGoalSettings, then the "
             "implementation is unable to improve further "
             "towards meeting the TemplateGoalSettings." ), 
          EmbeddedInstance ( "CIM_SettingData" )]
      string SupportedGoalSettings[]);

};



// Copyright (c) 2013 DMTF.  All rights reserved.
   [Experimental, Version ( "2.39.0" ), 
    UMLPackagePath ( "CIM::Device::StorageServices" ), 
    Description ( 
       "A subclass of Capabilities that defines the Capabilities of a "
       "ReplicationService. An instance of "
       "ReplicationServiceCapabilities is associated with a "
       "ReplicationService using ElementCapabilities." )]
class CIM_ReplicationServiceCapabilities : CIM_Capabilities {

      [Description ( 
          "Enumeration indicating the supported "
          "SyncType/Mode/Local-or-Remote combinations." ), 
       ValueMap { "2", "3", "4", "5", "6", "7", "8", "9", "10", 
          "11", "12", "13", "14", "15", "16", "17", "..", "0x8000.." }, 
       Values { "Synchronous Mirror Local", 
          "Asynchronous Mirror Local", "Synchronous Mirror Remote", 
          "Asynchronous Mirror Remote", 
          "Synchronous Snapshot Local", 
          "Asynchronous Snapshot Local", 
          "Synchronous Snapshot Remote", 
          "Asynchronous Snapshot Remote", "Synchronous Clone Local", 
          "Asynchronous Clone Local", "Synchronous Clone Remote", 
          "Asynchronous Clone Remote", 
          "Synchronous TokenizedClone Local", 
          "Asynchronous TokenizedClone Local", 
          "Synchronous TokenizedClone Remote", 
          "Asynchronous TokenizedClone Remote", "DMTF Reserved", 
          "Vendor Specific" }]
   uint16 SupportedReplicationTypes[];

      [Description ( 
          "Enumeration indicating the supported storage objects." ), 
       ValueMap { "2", "3", "4", "..", "0x8000.." }, 
       Values { "StorageVolume", "LogicalDisk", "ReplicationEntity", 
          "DMTF Reserved", "Vendor Specific" }]
   uint16 SupportedStorageObjects[];

      [Description ( 
          "Enumeration indicating what operations will be executed "
          "as asynchronous jobs. If an operation is included in "
          "both this and SupportedSynchronousActions properties "
          "then the underlying implementation is indicating that it "
          "may or may not create a job.\n"
          "Note: the following methods are not supported "
          "asynchronously, hence the gap between 11 and 19: \n"
          "\t - CreateGroup \n"
          "\t - DeleteGroup \n"
          "\t - AddMembers \n"
          "\t - RemoveMembers \n"
          "\t - AddReplicationEntity \n"
          "\t - AddServiceAccessPoint \n"
          "\t - AddSharedSecret." ), 
       ValueMap { "2", "3", "4", "5", "6", "7", "8", "9", "10", 
          "11", "19", "20", "21", "22", "23", "24", "25", "..", 
          "0x8000.." }, 
       Values { "CreateElementReplica", "CreateGroupReplica", 
          "CreateSynchronizationAspect", 
          "ModifyReplicaSynchronization", 
          "ModifyListSynchronization", "ModifySettingsDefineState", 
          "GetAvailableTargetElements", "GetPeerSystems", 
          "GetReplicationRelationships", "GetServiceAccessPoints", 
          "CreateListReplica", "CreateGroupReplicaFromElements", 
          "GetReplicationRelationshipInstances", 
          "ModifyListSettingsDefineState", 
          "CreateRemoteReplicationCollection", 
          "AddToRemoteReplicationCollection", 
          "RemoveFromRemoteReplicationCollection", "DMTF Reserved", 
          "Vendor Specific" }, 
       ModelCorrespondence { 
          "CIM_ReplicationServiceCapabilities.SupportedSynchronousActions" }]
   uint16 SupportedAsynchronousActions[];

      [Description ( 
          "Enumeration indicating what operations will be executed "
          "synchronously -- without the creation of a job. If an "
          "operation is included in both this property and "
          "SupportedAsynchronousActions then the underlying "
          "implementation is indicating that it may or may not "
          "create a job.\n"
          "Note: the following methods are not supported "
          "asynchronously: \n"
          "\t - CreateGroup \n"
          "\t - DeleteGroup \n"
          "\t - AddMembers \n"
          "\t - RemoveMembers \n"
          "\t - AddReplicationEntity \n"
          "\t - AddServiceAccessPoint \n"
          "\t - AddSharedSecret." ), 
       ValueMap { "2", "3", "4", "5", "6", "7", "8", "9", "10", 
          "11", "12", "13", "14", "15", "16", "17", "18", "19", 
          "20", "21", "22", "23", "24", "25", "..", "0x8000.." }, 
       Values { "CreateElementReplica", "CreateGroupReplica", 
          "CreateSynchronizationAspect", 
          "ModifyReplicaSynchronization", 
          "ModifyListSynchronization", "ModifySettingsDefineState", 
          "GetAvailableTargetElements", "GetPeerSystems", 
          "GetReplicationRelationships", "GetServiceAccessPoints", 
          "CreateGroup", "DeleteGroup", "AddMembers", 
          "RemoveMembers", "AddReplicationEntity", 
          "AddServiceAccessPoint", "AddSharedSecret", 
          "CreateListReplica", "CreateGroupReplicaFromElements", 
          "GetReplicationRelationshipInstances", 
          "ModifyListSettingsDefineState", 
          "CreateRemoteReplicationCollection", 
          "AddToRemoteReplicationCollection", 
          "RemoveFromRemoteReplicationCollection", "DMTF Reserved", 
          "Vendor Specific" }, 
       ModelCorrespondence { 
          "CIM_ReplicationServiceCapabilities.SupportedAsynchronousActions" }]
   uint16 SupportedSynchronousActions[];


      [Description ( 
          "The majority of the methods in this class accept "
          "ReplicationType which represents a combination of "
          "SyncType, Mode, Local/Remote. This method accepts the "
          "supplied information and returns the corresponding "
          "ReplicationType, which can be passed to other methods to "
          "get the additional capabilities." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 ConvertSyncTypeToReplicationType(
         [IN, Description ( 
             "SyncType describes the type of copy. \n"
             "Mirror: create and maintain a copy of the source. \n"
             "Snapshot: create a PIT, virtual copy of the "
             "source. \n"
             "Clone: create an unsynchronized copy of the "
             "source. \n"
             "TokenizedClone: create a token based clone." ), 
          ValueMap { "6", "7", "8", "9", "..", "0x8000.." }, 
          Values { "Mirror", "Snapshot", "Clone", 
             "TokenizedClone", "DMTF Reserved", "Vendor Specific" }, 
          ModelCorrespondence { "CIM_Synchronized.SyncType" }]
      uint16 SyncType, 
         [IN, Description ( 
             "Mode describes whether the target elements will be "
             "updated synchronously or asynchronously." ), 
          ValueMap { "2", "3", "..", "0x8000.." }, 
          Values { "Synchronous", "Asynchronous", 
             "DMTF Reserved", "Vendor Specific" }, 
          ModelCorrespondence { "CIM_Synchronized.Mode" }]
      uint16 Mode, 
         [IN, Description ( "Copy to local or remote replica." ), 
          ValueMap { "2", "3", "..", "0x8000.." }, 
          Values { "Local", "Remote", "DMTF Reserved", 
             "Vendor Specific" }]
      uint16 LocalOrRemote, 
         [OUT, Description ( 
             "A value representing the ReplicationType." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 SupportedReplicationTypes);

      [Description ( 
          "This method does the opposite of the method "
          "ConvertSyncTypeToReplicationType. This method translates "
          "ReplicationType to the corresponding SyncType, Mode, "
          "Local/Remote." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 ConvertReplicationTypeToSyncType(
         [IN, Description ( 
             "A value representing the ReplicationType." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 ReplicationType, 
         [OUT, Description ( 
             "SyncType describes the type of copy. \n"
             "Mirror: create and maintain a copy of the source. \n"
             "Snapshot: create a PIT, virtual copy of the "
             "source. \n"
             "Clone: create an unsynchronized copy of the "
             "source. \n"
             "TokenizedClone: create a token based clone." ), 
          ValueMap { "6", "7", "8", "9", "..", "0x8000.." }, 
          Values { "Mirror", "Snapshot", "Clone", 
             "TokenizedClone", "DMTF Reserved", "Vendor Specific" }, 
          ModelCorrespondence { "CIM_Synchronized.SyncType" }]
      uint16 SyncType, 
         [OUT, Description ( 
             "Mode describes whether the target elements will be "
             "updated synchronously or asynchronously." ), 
          ValueMap { "2", "3", "..", "0x8000.." }, 
          Values { "Synchronous", "Asynchronous", 
             "DMTF Reserved", "Vendor Specific" }, 
          ModelCorrespondence { "CIM_Synchronized.Mode" }]
      uint16 Mode, 
         [OUT, Description ( "Copy to local or remote replica." ), 
          ValueMap { "2", "3", "..", "0x8000.." }, 
          Values { "Local", "Remote", "DMTF Reserved", 
             "Vendor Specific" }]
      uint16 LocalOrRemote);

      [Description ( 
          "This method for a given ReplicationType returns the "
          "supported CopyStates and a parallel array to indicate "
          "for a given CopyState the target element is host "
          "accessible or not." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetSupportedCopyStates(
         [IN, Description ( 
             "A value representing the ReplicationType." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 ReplicationType, 
         [OUT, Description ( "Supported Copy States." ), 
          ModelCorrespondence { "CIM_Synchronized.CopyState" }]
      uint16 SupportedCopyStates[], 
         [OUT, Description ( 
             "A parallel array to SupportedCopyStates[] to "
             "indicate whether in that CopyState the target "
             "element is host accessible or not (true or false)" )]
      boolean HostAccessible[], 
         [IN, Description ( 
             "If supplied, it provides additional refinements "
             "for the ReplicationType. For example, the "
             "CopyMethodology." ), 
          EmbeddedInstance ( "CIM_ReplicationSettingData" )]
      string ReplicationSettingData);

      [Description ( 
          "This method, for a given ReplicationType, returns the "
          "supported replication group CopyStates." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetSupportedGroupCopyStates(
         [IN, Description ( 
             "A value representing the ReplicationType." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 ReplicationType, 
         [OUT, Description ( "Supported Copy States." ), 
          ModelCorrespondence { "CIM_Synchronized.CopyState" }]
      uint16 SupportedCopyStates[], 
         [IN, Description ( 
             "If supplied, it provides additional refinements "
             "for the ReplicationType. For example, the "
             "CopyMethodology." ), 
          EmbeddedInstance ( "CIM_ReplicationSettingData" )]
      string ReplicationSettingData);

      [Description ( 
          "This method, for a given ReplicationType and method, "
          "returns the supported CopyStates that can be specified "
          "in the method\'s WaitForCopyState parameter." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetSupportedWaitForCopyStates(
         [IN, Description ( 
             "A value representing the ReplicationType." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 ReplicationType, 
         [IN, Description ( 
             "A value representing the desired method name." ), 
          ValueMap { "2", "3", "4", "5", "6", "7", "..", 
             "0x8000.." }, 
          Values { "CreateElementReplica", "CreateGroupReplica", 
             "ModifyReplicaSynchronization", 
             "ModifyListSynchronization", 
             "ModifySettingsDefineState", "CreateListReplica", 
             "DMTF Reserved", "Vendor Specific" }]
      uint16 MethodName, 
         [OUT, Description ( "Supported Copy States." ), 
          ModelCorrespondence { "CIM_Synchronized.CopyState" }]
      uint16 SupportedCopyStates[], 
         [IN, Description ( 
             "If supplied, it provides additional refinements "
             "for the ReplicationType. For example, the "
             "CopyMethodology." ), 
          EmbeddedInstance ( "CIM_ReplicationSettingData" )]
      string ReplicationSettingData);

      [Description ( 
          "This method, for a given ReplicationType, returns the "
          "supported features." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetSupportedFeatures(
         [IN, Description ( 
             "A value representing the ReplicationType." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 ReplicationType, 
         [OUT, Description ( 
             "An array of Supported Features. \n"
             "Replication Groups: Element in a group are "
             "supported in a replication operation. \n"
             "Multi-hop element replication: Target of one copy "
             "operation can at the same time be the source of "
             "another copy operation. \n"
             "Multi-hop elements must have same SyncType: The "
             "SyncType of each hop must be the same as previous "
             "hop, e.g., mirror, snapshot, clone. \n"
             "Multi-hop requires advance notice: The service "
             "needs to know when multi-hoping is intended to "
             "allow the service to do the appropriate set up. "
             "The parameter ReplicationSettingData specified "
             "number of hops intended. \n"
             "Requires full discovery of target ComputerSystem: "
             "Target element\'s containing computer system must "
             "be known to the provider. \n"
             "Service suspends source I/O when necessary: "
             "Applies to a group of elements when a consistent "
             "point-in-time is created. \n"
             "Targets allocated from Any storage pool: No "
             "restriction as to what storage pool to use to "
             "allocate targets elements, as long as the pool is "
             "not reserved for special activities. \n"
             "Targets allocated from Shared storage pool: "
             "Targets areallocated from a shared pool for all "
             "targets of the same type. \n"
             "Targets allocated from Exclusive storage pool: "
             "Targets are allocated from a pool that is "
             "exclusive. \n"
             "Targets allocated from Multiple storage pools: "
             "Targets are allocated from multiple pools. Targets "
             "require reserved elements: Targets must have a "
             "specific Usage value. Target is associated to "
             "SynchronizationAspect: Target is associated via "
             "SettingsDefineState association to an instance of "
             "SynchronizationAspect. Source is associated to "
             "SynchronizationAspect: Source is associated via "
             "SettingsDefineState association to an instance of "
             "SynchronizationAspect. Error recovery from Broken "
             "state Automatic: Once the connection is repaired, "
             "the copy operation continues automatically. \n"
             "Target must remain associated to source: A "
             "dependent target element must remain associated to "
             "source element at all times. \n"
             "Remote resource requires remote CIMOM: Client is "
             "required to interact with two providers: the "
             "provider controlling the source element and the "
             "provider controlling the target element.\n"
             "Synchronized clone target detaches automatically: "
             "The clone target element detaches automatically "
             "when the target element becomes synchronized; "
             "otherwise, the client needs to explicitly request "
             "a detach operation.\n"
             "Reverse Roles operation requires Read Only source: "
             "The Reverse Roles operation requires the source "
             "element to be in the Read Only mode. \n"
             "Reverse Roles operation requires resync: After the "
             "Reverse Roles operation completed, it is required "
             "to resync the synchronization relationship between "
             "the source and the target elements. \n"
             "Restore operation requires fracture: The copy "
             "operation has completed; however, the "
             "synchronization relationship must be fractured. \n"
             "Resync operation requires activate: For the copy "
             "operation to continue, the synchronization "
             "relationship must be activated.\n"
             "Copy operation requires offline source: "
             "Instrumentation requires the source element to be "
             "offline (not-ready) to ensure data does not change "
             "before starting the copy operation. Adjustable "
             "CopyPriority: Priority of copy operation versus "
             "the host I/O can be adjusted.\n"
             "Source requires reserved element: Source element "
             "must have a Usage value that indicates the element "
             "may be a \"Replica Source\". \n"
             "Supports undiscovered resources: The service can "
             "perform copy operations to and from elements, e.g. "
             "a \"ReplicationEntity\", on a ComputerSystem not "
             "known to the service." ), 
          ValueMap { "2", "3", "4", "5", "6", "7", "8", "9", 
             "10", "11", "12", "13", "14", "15", "16", "17", 
             "18", "19", "20", "21", "22", "23", "24", "25", 
             "26", "27", "..", "32768.." }, 
          Values { "Replication groups", 
             "Multi-hop element replication", 
             "Multi-hop elements must have same SyncType", 
             "Multi-hop requires advance notice", 
             "Requires full discovery of target ComputerSystem", 
             "Service suspends source I/O when necessary", 
             "Targets allocated from Any storage pool", 
             "Targets allocated from Shared storage pool", 
             "Targets allocated from Exclusive storage pool", 
             "Targets allocated from Multiple storage pools", 
             "Targets require reserved elements", 
             "Target is associated to SynchronizationAspect", 
             "Source is associated to SynchronizationAspect", 
             "Error recovery from Broken state Automatic", 
             "Target must remain associated to source", 
             "Remote resource requires remote CIMOM", 
             "Synchronized clone target detaches automatically", 
             "Reverse Roles operation requires Read Only source", 
             "Reverse Roles operation requires resync", 
             "Restore operation requires fracture", 
             "Resync operation requires activate", 
             "Copy operation requires offline source", 
             "Adjustable CopyPriority", 
             "Source requires reserved element", 
             "Supports undiscovered resources", 
             "Restore operation requires detach", 
             "DMTF Reserved", "Vendor Specific" }]
      uint16 Features[], 
         [IN, Description ( 
             "If supplied, it provides additional refinements "
             "for the ReplicationType. For example, the "
             "CopyMethodology." ), 
          EmbeddedInstance ( "CIM_ReplicationSettingData" )]
      string ReplicationSettingData);

      [Description ( 
          "This method, for a given ReplicationType, returns the "
          "supported group features." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetSupportedGroupFeatures(
         [IN, Description ( 
             "A value representing the ReplicationType." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 ReplicationType, 
         [OUT, Description ( 
             "An array of Supported Features. \n"
             "One-to-many replication: One source element and "
             "multiple targets elements in a group. \n"
             "Many-to-many: One or more elements in the source "
             "group and one or more elements in the target "
             "group. \n"
             "Consistency enabled for all groups: All groups are "
             "considered consistent by default. \n"
             "Empty replication groups allowed: A replication "
             "group can have zero elements. \n"
             "Source group must have more than one element: A "
             "group with only one element is not allowed. \n"
             "Composite Groups: Elements of a group may be from "
             "different arrays. \n"
             "Multi-hop group replication: A group that is the "
             "target of a copy operation can be the source of "
             "another copy operation at the same time. \n"
             "Multi-hop elements must have same SyncType: The "
             "SyncType of each hop must be the same as previous "
             "hop, e.g., mirror, snapshot, clone. \n"
             "Group can only have one single relationship "
             "active: Only one StorageSynchronized association "
             "within a group can be active at a given time. \n"
             "Source element can be removed from group: A source "
             "element can be removed even when the group is "
             "associated with another replication group. \n"
             "Target element can be removed from group: A target "
             "element can be removed even when the group is "
             "associated with another replication group. \n"
             "Group can be temporary: Group can have a "
             "persistence of false, which means the group -- not "
             "its elements, may be deleted if it no longer "
             "participates in a replication operation. \n"
             "Group is nameable: In creating a group, it is "
             "possible to name the group. \n"
             "Supports target element count: It is possible to "
             "supply one source element and request more than "
             "one target element copies.\n"
             "Synchronized clone target detaches automatically: "
             "The clone target group detaches automatically when "
             "the target group becomes synchronized; otherwise, "
             "the client needs to explicitly request a detach operation.\n"
             "Reverse Roles operation requires Read Only source: "
             "The Reverse Roles operation requires the source "
             "element to be in the Read Only mode. \n"
             "Reverse Roles operation requires resync: For the "
             "copy operation to continue, resync of source and "
             "target elements is required. \n"
             "Restore operation requires fracture: The copy "
             "operation has completed; however, the "
             "synchronization relationship must be fractured. \n"
             "Resync operation requires activate: For the copy "
             "operation to continue, the synchronization "
             "relationship must be activated. \n"
             "Copy operation requires offline source: "
             "Instrumentation requires the source element to be "
             "offline (not-ready) to ensure data does not change "
             "before starting the copy operation. \n"
             "TokenizedClone ConsistentPointInTime: The "
             "point-in-time to be created at an exact time with "
             "no I/O activities in such a way the data is "
             "consistent among all the elements or the group." ), 
          ValueMap { "2", "3", "4", "5", "6", "7", "8", "9", 
             "10", "11", "12", "13", "14", "15", "16", "17", 
             "18", "19", "20", "21", "22", "23", "24", "25", 
             "..", "0x8000.." }, 
          Values { "One-to-many replication", 
             "Many-to-many groups", 
             "Consistency enabled for all groups", 
             "Empty replication groups allowed", 
             "Source group must have more than one element", 
             "Composite Groups", "Multihop element replication", 
             "Multi-hop elements must have same SyncType", 
             "Group can only have one single relationship active", 
             "Source element can be removed from group", 
             "Target element can be removed from group", 
             "Group can be temporary", "Group is nameable", 
             "Supports target element count", 
             "Synchronized clone target detaches automatically", 
             "Reverse Roles operation requires Read Only source", 
             "Reverse Roles operation requires resync", 
             "Restore operation requires fracture", 
             "Resync operation requires activate", 
             "Copy operation requires offline source", 
             "Restore operation requires detach", 
             "Element can be member of multiple groups", 
             "Elements of group can be mix of thin and thick", 
             "TokenizedClone ConsistentPointInTime", 
             "DMTF Reserved", "Vendor Specific" }]
      uint16 GroupFeatures[], 
         [IN, Description ( 
             "If supplied, it provides additional refinements "
             "for the ReplicationType. For example, the "
             "CopyMethodology." ), 
          EmbeddedInstance ( "CIM_ReplicationSettingData" )]
      string ReplicationSettingData);

      [Description ( 
          "This method for a given ReplicationType returns the "
          "supported Consistency." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetSupportedConsistency(
         [IN, Description ( 
             "A value representing the ReplicationType." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 ReplicationType, 
         [OUT, Description ( 
             "An array of Supported Features. Sequentially "
             "Consistent: Members of a target group are "
             "sequentially consistent - the order of the write "
             "operations is maintained." ), 
          ValueMap { "2", "..", "0x8000.." }, 
          Values { "Sequentially Consistent", "DMTF Reserved", 
             "Vendor Specific" }, 
          ModelCorrespondence { 
             "CIM_GroupSynchronized.ConsistencyType" }]
      uint16 SupportedConsistency[], 
         [IN, Description ( 
             "If supplied, it provides additional refinements "
             "for the ReplicationType. For example, the "
             "CopyMethodology." ), 
          EmbeddedInstance ( "CIM_ReplicationSettingData" )]
      string ReplicationSettingData);

      [Description ( 
          "This method for a given ReplicationType returns the "
          "supported Operations on a StorageSynchronized "
          "association that can be supplied to the "
          "ModifyReplicaSynchronization method." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetSupportedOperations(
         [IN, Description ( 
             "A value representing the ReplicationType." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 ReplicationType, 
         [OUT, Description ( 
             "An array of Supported Operations. \n"
             "Abort: Abort the copy operation if it is possible. "
             "Activate Consistency: Ensure all target elements "
             "of a group are consistent. \n"
             "Activate: Activate an inactive or prepared source "
             "and target association. \n"
             "AddSyncPair: Add elements associated via "
             "StorageSynchronized to source and target groups. \n"
             "Deactivate Consistency: Disable consistency. \n"
             "Deactivate: Deactivate a source and target "
             "association. The \n"
             "writes to the target are deleted in the case of a "
             "snapshot. Detach: Remove the association between "
             "source and target. \n"
             "Dissolve: Dissolve the synchronization between two "
             "storage objects, however, the target element "
             "continues to exist. \n"
             "Failover: Switch to target element instead of "
             "source. \n"
             "Failback: Reverses the effects of failover. \n"
             "Fracture: Separate target element from source "
             "element. \n"
             "RemoveSyncPair: Remove pair of source and target "
             "elements from the source/target groups. \n"
             "Resync Replica: Synchronize a fractured/split "
             "source and target elements. \n"
             "Restore from Replica: Copy data from a fractured "
             "target back to source. \n"
             "Resume: Continue an association that was "
             "suspended. \n"
             "Reset To Sync: Change mode to synchronous. \n"
             "Reset To Async: Change mode to asynchronous. \n"
             "Reverse Roles: Make target the source and source "
             "the target. \n"
             "Return To ResourcePool: Applies to Snapshot -- "
             "delete the target element and its replication "
             "association. \n"
             "Split: Similar to Fracture, however, the provider "
             "needs to make sure whether there are pending I/O "
             "in transit before fracturing the connection. \n"
             "Suspend: Stop the copy operations to the target "
             "element. Continue when the operations is resumed. \n"
             "Unprepare: Causes the synchronization to be "
             "reinitialized and stop in Prepared state." ), 
          ValueMap { "2", "3", "4", "5", "6", "7", "8", "9", 
             "10", "11", "12", "13", "14", "15", "16", "17", 
             "18", "19", "20", "21", "22", "23", "..", 
             "0x8000..0xFFFF" }, 
          Values { "Abort", "Activate Consistency", "Activate", 
             "AddSyncPair", "Deactivate Consistency", 
             "Deactivate", "Detach", "Dissolve", "Failover", 
             "Failback", "Fracture", "RemoveSyncPair", 
             "Resync Replica", "Restore from Replica", "Resume", 
             "Reset To Sync", "Reset To Async", 
             "Return To ResourcePool", "Reverse Roles", "Split", 
             "Suspend", "Unprepare", "DMTF Reserved", 
             "Vendor Specific" }]
      uint16 SupportedOperations[], 
         [IN, Description ( 
             "If supplied, it provides additional refinements "
             "for the ReplicationType. For example, the "
             "CopyMethodology." ), 
          EmbeddedInstance ( "CIM_ReplicationSettingData" )]
      string ReplicationSettingData);

      [Description ( 
          "This method for a given ReplicationType returns the "
          "supported Operations on a GroupSynchronized association "
          "that can be supplied to the ModifyReplicaSynchronization "
          "method." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetSupportedGroupOperations(
         [IN, Description ( 
             "A value representing the ReplicationType." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 ReplicationType, 
         [OUT, Description ( 
             "An array of Supported group Operations. Abort: "
             "Abort the copy operation if it is possible. \n"
             "Activate Consistency: Ensure all target elements "
             "of a group are consistent. \n"
             "Activate: Activate an inactive or prepared source "
             "and target association. \n"
             "AddSyncPair: Add elements associated via "
             "StorageSynchronized to source and target groups. \n"
             "Deactivate Consistency: Disable consistency. \n"
             "Deactivate: Deactives a source and target "
             "association. The writes to the target are deleted "
             "in the case of a snapshot. \n"
             "Detach: Remove the association between source and "
             "target. \n"
             "Dissolve: Dissolve the synchronization between two "
             "storage objects, however, the target element "
             "continues to exist. \n"
             "Failover: Switch to target element instead of "
             "source. \n"
             "Failback: Reverses the effects of failover. \n"
             "Fracture: Separate target element from source "
             "element. \n"
             "RemoveSyncPair: Remove pair of source and target "
             "elements from the source/target groups. \n"
             "Resync Replica: Synchronize a fractured/split "
             "source and target elements. \n"
             "Restore from Replica: Copy data from a fractured "
             "target back to source. \n"
             "Resume: Continue an association that was "
             "suspended. \n"
             "Reset To Sync: Change mode to synchronous. \n"
             "Reset To Async: Change mode to asynchronous. \n"
             "Reverse Roles: Make target the source and source "
             "the target. \n"
             "Return To ResourcePool: Applies to Snapshot -- "
             "delete the target element and its replication "
             "association. \n"
             "Split: Similar to Fracture, however, the provider "
             "needs to make sure wether there are pending I/O in "
             "transit before fracturing the connection. \n"
             "Suspend: Stop the copy operations to the target "
             "element. Continue when the operations is resumed. \n"
             "Unprepare: Causes the synchronization to be "
             "reinitialized and stop in Prepared state." ), 
          ValueMap { "2", "3", "4", "5", "6", "7", "8", "9", 
             "10", "11", "12", "13", "14", "15", "16", "17", 
             "18", "19", "20", "21", "22", "23", "..", 
             "0x8000..0xFFFF" }, 
          Values { "Abort", "Activate Consistency", "Activate", 
             "AddSyncPair", "Deactivate Consistency", 
             "Deactivate", "Detach", "Dissolve", "Failover", 
             "Failback", "Fracture", "RemoveSyncPair", 
             "Resync Replica", "Restore from Replica", "Resume", 
             "Reset To Sync", "Reset To Async", 
             "Return To ResourcePool", "Reverse Roles", "Split", 
             "Suspend", "Unprepare", "DMTF Reserved", 
             "Vendor Specific" }]
      uint16 SupportedGroupOperations[], 
         [IN, Description ( 
             "If supplied, it provides additional refinements "
             "for the ReplicationType. For example, the "
             "CopyMethodology." ), 
          EmbeddedInstance ( "CIM_ReplicationSettingData" )]
      string ReplicationSettingData);

      [Description ( 
          "This method for a given ReplicationType returns the "
          "supported Operations on a list of StorageSynchronized or "
          "GroupSynchronized associations that can be supplied to "
          "the ModifyListSynchronization method." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetSupportedListOperations(
         [IN, Description ( 
             "A value representing the ReplicationType." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 ReplicationType, 
         [IN, Description ( 
             "Specifies the supported operations as they apply "
             "to a list of StorageSynchronized or "
             "GroupSynchronized. If this parameter is not "
             "specified, StorageSynchronized is assumed." ), 
          ValueMap { "2", "3", "..", "0x8000.." }, 
          Values { "StorageSynchronized", "GroupSynchronized", 
             "DMTF Reserved", "Vendor Specific" }]
      uint16 SynchronizationType, 
         [OUT, Description ( 
             "An array of Supported group Operations. Abort: "
             "Abort the copy operation if it is possible. \n"
             "Activate: Activate an inactive or prepared source "
             "and target association. \n"
             "Deactivate: Deactivate a source and target "
             "association. The writes to the target are deleted "
             "in the case of a snapshot. \n"
             "Detach: Remove the association between source and "
             "target. \n"
             "Dissolve: Dissolve the synchronization between two "
             "storage objects, however, the target element "
             "continues to exist. \n"
             "Failover: Switch to target element instead of "
             "source. \n"
             "Failback: Reverses the effects of failover. \n"
             "Fracture: Separate target element from source "
             "element. \n"
             "Resync Replica: Synchronize a fractured/split "
             "source and target elements. \n"
             "Restore from Replica: Copy data from a fractured "
             "target back to source. \n"
             "Resume: Continue an association that was "
             "suspended. \n"
             "Reset To Sync: Change mode to synchronous. \n"
             "Reset To Async: Change mode to asynchronous. \n"
             "Reverse Roles: Make target the source and source "
             "the target. \n"
             "Return To ResourcePool: Applies to Snapshot -- "
             "delete the target element and its replication "
             "association. \n"
             "Split: Similar to Fracture, however, the provider "
             "needs to make sure wether there are pending I/O in "
             "transit before fracturing the connection. \n"
             "Suspend: Stop the copy operations to the target "
             "element. \n"
             "Continue when the operations is resumed. \n"
             "Unprepare: Causes the synchronization to be "
             "reinitialized and stop in Prepared state." ), 
          ValueMap { "2", "3", "4", "5", "6", "7", "8", "9", 
             "10", "11", "12", "13", "14", "15", "16", "17", 
             "18", "19", "20", "21", "22", "23", "..", 
             "0x8000..0xFFFF" }, 
          Values { "Abort", "DMTF Reserved", "Activate", 
             "DMTF Reserved", "DMTF Reserved", "Deactivate", 
             "Detach", "Dissolve", "Failover", "Failback", 
             "Fracture", "DMTF Reserved", "Resync Replica", 
             "Restore from Replica", "Resume", "Reset To Sync", 
             "Reset To Async", "Return To ResourcePool", 
             "Reverse Roles", "Split", "Suspend", "Unprepare", 
             "DMTF Reserved", "Vendor Specific" }]
      uint16 SupportedListOperations[], 
         [IN, Description ( 
             "If supplied, it provides additional refinements "
             "for the ReplicationType. For example, the "
             "CopyMethodology." ), 
          EmbeddedInstance ( "CIM_ReplicationSettingData" )]
      string ReplicationSettingData);

      [Description ( 
          "This method for a given ReplicationType returns the "
          "supported Operations on a SettingsDefineState "
          "association that can be supplied to the "
          "ModifySettingsDefineState method." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetSupportedSettingsDefineStateOperations(
         [IN, Description ( 
             "A value representing the ReplicationType." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 ReplicationType, 
         [OUT, Description ( 
             "An array of supported Operations. /nActivate "
             "Consistency: Enable consistency Deactivate "
             "Consistency: Disable consistency Delete: Remove "
             "the SettingsDefineState association. Instance of "
             "SynchronizationAspect may also be deleted if it is "
             "not shared with other elements. Copy To Target: "
             "Introduces the target elements and forms the "
             "necessary associations between the source and the "
             "target elements i.e. StorageSynchronized and "
             "GroupSynchronized." ), 
          ValueMap { "2", "3", "4", "5", "6", "7", "8", "..", 
             "0x8000..0xFFFF" }, 
          Values { "Activate Consistency", 
             "Deactivate Consistency", "Delete", 
             "Copy To Target", "Detach", "Restore", 
             "Attach To Target", "DMTF Reserved", 
             "Vendor Specific" }]
      uint16 SupportedOperations[], 
         [IN, Description ( 
             "If supplied, it provides additional refinements "
             "for the ReplicationType. For example, the "
             "CopyMethodology." ), 
          EmbeddedInstance ( "CIM_ReplicationSettingData" )]
      string ReplicationSettingData);

      [Description ( 
          "This method for a given ReplicationType returns the "
          "supported features related to thin provisioning." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetSupportedThinProvisioningFeatures(
         [IN, Description ( 
             "A value representing the ReplicationType." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 ReplicationType, 
         [OUT, Description ( 
             "An array of Supported Thin Provisioning Features. \n"
             "Thin provisioning is not supported: Feature is "
             "unavailable. \n"
             "Zeros written in unused allocated blocks of "
             "target: In copying thin to full, the unused blocks "
             "of target will be written with zeros. \n"
             "Unused allocated blocks of target are not "
             "initialized: In copying thin to full, the unused "
             "blocks of target will remain uninitialized. \n"
             "See the property "
             "ReplicationSettingData.ThinProvisioningPolicy for "
             "a list of possible options for a copy operation." ), 
          ValueMap { "1", "2", "3", "..", "0x8000.." }, 
          Values { "Thin provisioning is not supported", 
             "Zeros written in unused allocated blocks of target", 
             "Unused allocated blocks of target are not initialized", 
             "DMTF Reserved", "Vendor Specific" }, 
          ModelCorrespondence { 
             "CIM_ReplicationSettingData.ThinProvisioningPolicy" }]
      uint16 SupportedThinProvisioningFeatures[], 
         [IN, Description ( 
             "If supplied, it provides additional refinements "
             "for the ReplicationType. For example, the "
             "CopyMethodology." ), 
          EmbeddedInstance ( "CIM_ReplicationSettingData" )]
      string ReplicationSettingData);

      [Description ( 
          "This method accepts a ReplicationType and a component, "
          "it then returns a static numeric value representing the "
          "maximum number of the specified component that the "
          "service supports. A value of 0 indicates unlimited "
          "components of the given type. In all cases the maximum "
          "value is bound by the availability of resources on the "
          "computer system. Effectively, the method informs clients "
          "of the edge conditions." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "..", 
          "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", 
          "Information is not available", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetSupportedMaximum(
         [IN, Description ( 
             "A value representing the ReplicationType." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 ReplicationType, 
         [IN, Description ( 
             "For the given Mirror, Snapshot, Clone and their "
             "mode and locality variations as specified by "
             "ReplicationType, this parameter represents one of "
             "the following components: Number of groups: "
             "Maximum number of groups supported by the "
             "replication service.Number of elements per source "
             "group: Maximum number of elements in a group that "
             "can be used as a source group. Number of elements "
             "per target group: Maximum number of elements in a "
             "group that can be used as a target group. Number "
             "of target elements per source element: Maximum "
             "number of target elements per source element. "
             "Number of total source elements: Maximum number of "
             "total source elements supported by the service. "
             "Number of total target elements: Maximum number of "
             "total target elements supported by the source. "
             "Number of peer systems: Maximum number of peer "
             "systems that replication service can communicate "
             "with. Number of hops in multi-hop replication: "
             "Maximum number of hops in multi-hop replication "
             "the service can manage. \n"
             "Maximum number of tokens supported: Maximum number "
             "of tokens per sub-system. \n"
             "Current number of tokens in-use: Number of tokens "
             "in use for the sub-system. \n"
             "Optimal token size: Refers to OptimalDataChunk." ), 
          ValueMap { "2", "3", "4", "5", "6", "7", "8", "9", 
             "10", "11", "12", "..", "0x8000.." }, 
          Values { "Number of groups", 
             "Number of elements per source group", 
             "Number of elements per target group", 
             "Number of target elements per source element", 
             "Number of total source elements", 
             "Number of total target elements", 
             "Number of peer systems", 
             "Number of hops in multi-hop copy", 
             "Maximum number of tokens supported", 
             "Current number of tokens in-use", 
             "Optimal token size", "DMTF Reserved", 
             "Vendor Specific" }]
      uint16 Component, 
         [OUT, Description ( 
             "The maximum value, or 0 if the maximum is unlimited."
              )]
      uint64 MaxValue, 
         [IN, Description ( 
             "If supplied, it provides additional refinements "
             "for the ReplicationType. For example, the "
             "CopyMethodology." ), 
          EmbeddedInstance ( "CIM_ReplicationSettingData" )]
      string ReplicationSettingData);

      [Description ( 
          "This method for a given ReplicationType, returns the "
          "default consistency value." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetDefaultConsistency(
         [IN, Description ( 
             "A value representing the ReplicationType." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 ReplicationType, 
         [OUT, Description ( 
             "Default consistency value, or 0 if there is no default value."
              ), 
          ValueMap { "0", "1", "2", "..", "0x8000.." }, 
          Values { "No default consistency", "DMTF Reserved", 
             "Sequentially Consistent", "DMTF Reserved", 
             "Vendor Specific" }, 
          ModelCorrespondence { 
             "CIM_GroupSynchronized.ConsistencyType" }]
      uint16 DefaultConsistency, 
         [IN, Description ( 
             "If supplied, it provides additional refinements "
             "for the ReplicationType. For example, the "
             "CopyMethodology." ), 
          EmbeddedInstance ( "CIM_ReplicationSettingData" )]
      string ReplicationSettingData);

      [Description ( 
          "This method returns the default persistency for a newly "
          "created group." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetDefaultGroupPersistency(
         [OUT, Description ( "Default group persistency value." ), 
          ValueMap { "0", "1", "2", "3", "..", "0x8000.." }, 
          Values { "No default persistency", "DMTF Reserved", 
             "Persistent", "Not Persistent", "DMTF Reserved", 
             "Vendor Specific" }]
      uint16 DefaultGroupPersistency);

      [Description ( 
          "This method, for a given ReplicationType and a supplied "
          "property, returns an array of supported settings that "
          "can be utilized in an instance of the "
          "ReplicationSettingData class." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetSupportedReplicationSettingData(
         [IN, Description ( 
             "A value representing the ReplicationType." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 ReplicationType, 
         [IN, Description ( 
             "A value representing the property name." ), 
          ValueMap { "2", "3", "4", "5", "6", "7", "8", "9", 
             "10", "11", "12", "13", "14", "15", "16", "17", 
             "18", "19", "20", "..", "0x8000.." }, 
          Values { "ConsistentPointInTime", 
             "DesiredCopyMethodology", "Multihop", 
             "OnGroupOrListError", "UnequalGroupsAction", 
             "TargetElementSupplier", "ThinProvisioningPolicy", 
             "Pairing", "FailedCopyStopsHostIO", 
             "CopyRecoveryMode", "UnequalListsAction", 
             "DeltaUpdateInterval", "DeltaUpdateBlocks", 
             "ReadOnly", "StorageCompressionPolicy", 
             "TargetElementResourcePool", "TargetElementGoal", 
             "RRCSoftwareCompressionEnabled", 
             "RRCHardwareCompressionEnabled", "DMTF Reserved", 
             "Vendor Specific" }]
      uint16 PropertyName, 
         [IN ( false ), OUT, Description ( 
             "An array containing the supported values that can "
             "be supplied in an instance of a "
             "ReplicationSettingData. Refer to the class "
             "ReplicationSettingData for the possible values for "
             "each property. For boolean data, use the following "
             "data mapping: 2=\"false\", 3=\"true\". \n"
             "For datetime data, use the following data mapping: "
             "0=\"property is supported\", 1=\"property is not "
             "supported\"." ), 
          ModelCorrespondence { 
             "CIM_ReplicationSettingData.ConsistentPointInTime", 
             "CIM_ReplicationSettingData.DesiredCopyMethodology", 
             "CIM_ReplicationSettingData.Multihop", 
             "CIM_ReplicationSettingData.OnGroupOrListError", 
             "CIM_ReplicationSettingData.Pairing", 
             "CIM_ReplicationSettingData.UnequalGroupsAction", 
             "CIM_ReplicationSettingData.TargetElementSupplier", 
             "CIM_ReplicationSettingData.ThinProvisioningPolicy", 
             "CIM_ReplicationSettingData.FailedCopyStopsHostIO", 
             "CIM_ReplicationSettingData.CopyRecoveryMode", 
             "CIM_ReplicationSettingData.UnequalListsAction", 
             "CIM_ReplicationSettingData.DeltaUpdateInterval", 
             "CIM_ReplicationSettingData.DeltaUpdateBlocks", 
             "CIM_ReplicationSettingData.ReadOnly", 
             "CIM_ReplicationSettingData.StorageCompressionPolicy", 
             "CIM_ReplicationSettingData.TargetElementResourcePool", 
             "CIM_ReplicationSettingData.TargetElementGoal", 
             "CIM_ReplicationSettingData.RRCSoftwareCompressionEnabled", 
             "CIM_ReplicationSettingData.RRCHardwareCompressionEnabled", 
             "CIM_ReplicationSettingData.AutoDelete", 
             "CIM_ReplicationSettingData.TimeBeforeRemoval" }]
      uint64 SupportedValues[], 
         [IN, Description ( 
             "If supplied, it provides additional refinements "
             "for the ReplicationType. For example, the "
             "CopyMethodology." ), 
          EmbeddedInstance ( "CIM_ReplicationSettingData" )]
      string ReplicationSettingData);

      [Description ( 
          "This method for a given ReplicationType returns the "
          "default ReplicationSettingData as an instance." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "..", 
          "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", 
          "No default ReplicationSettingData", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetDefaultReplicationSettingData(
         [IN, Description ( 
             "A value representing the ReplicationType." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 ReplicationType, 
         [OUT, Description ( 
             "A copy of the ReplicationSettingData instance is "
             "populated with default values for the given "
             "ReplicationType." ), 
          EmbeddedObject]
      string DefaultInstance);

      [Description ( 
          "This method accepts a connection reference and returns "
          "specific features of that connection." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetSupportedConnectionFeatures(
         [IN, Description ( 
             "A value representing the connection." )]
      CIM_ServiceAccessPoint REF connection, 
         [OUT, Description ( 
             "An array supported connection features. "
             "Unidirectional to ServiceAccessPoint: Data flow is "
             "unidirectional to ServiceAccessPoint such as a "
             "protocol end point. Unidirectional from "
             "ServiceAccessPoint: Data flow is unidirectional "
             "from ServiceAccessPoint such as a protocol end "
             "point." ), 
          ValueMap { "2", "3", "..", "0x8000.." }, 
          Values { "Unidirectional to ServiceAccessPoint", 
             "Unidirectional from ServiceAccessPoint", 
             "DMTF Reserved", "Vendor Specific" }]
      uint16 SupportedConnectionFeatures[]);

      [Description ( 
          "For the supplied element, this method returns the "
          "supported synchronization operations in a series of "
          "parallel output arrays." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetSynchronizationSupported(
         [IN, Description ( 
             "A reference to the supplied element. For example, "
             "the source element." )]
      CIM_ManagedElement REF LocalElement, 
         [IN, Description ( 
             "A reference to the other end of the "
             "synchronization association. For example, the "
             "target element. OtherElement can be a local or a "
             "remote element." )]
      CIM_ManagedElement REF OtherElement, 
         [IN, Description ( 
             "A reference to the access point instance to allow "
             "the service to access the OtherElement. If NULL, "
             "it is assumed the service does not need any access "
             "information or the element is local." )]
      CIM_ServiceAccessPoint REF OtherElementAccessPoint, 
         [IN, Description ( 
             "A value representing the desired method name." ), 
          ValueMap { "2", "3", "4", "..", "0x8000.." }, 
          Values { "CreateElementReplica", "CreateGroupReplica", 
             "CreateSynchronizationAspect", "DMTF Reserved", 
             "Vendor Specific" }]
      uint16 MethodName, 
         [IN, Description ( 
             "If provided, it overrides the default replication "
             "setting data for the given SyncType. For example, "
             "the intended CopyMethodology can be specified to "
             "determine if the copy operation is supported for "
             "the given source and target elements." ), 
          EmbeddedInstance ( "CIM_ReplicationSettingData" )]
      string ReplicationSettingData, 
         [OUT, Description ( 
             "An array of supported SyncTypes for the copy "
             "operations using the supplied element." ), 
          ValueMap { "6", "7", "8", "..", "0x8000.." }, 
          Values { "Mirror", "Snapshot", "Clone", 
             "DMTF Reserved", "Vendor Specific" }, 
          ModelCorrespondence { "CIM_Synchronized.SyncType" }]
      uint16 SyncTypes[], 
         [OUT, Description ( 
             "An array of supported Modes for the copy "
             "operations using the supplied element." ), 
          ValueMap { "2", "3", "..", "0x8000.." }, 
          Values { "Synchronous", "Asynchronous", 
             "DMTF Reserved", "Vendor Specific" }, 
          ModelCorrespondence { "CIM_Synchronized.Mode" }]
      uint16 Modes[], 
         [OUT, Description ( 
             "An array that specifies whether the local element "
             "can be the source or the target element of the "
             "copy operations. Possible values are: \n"
             "SystemElement: the source element. \n"
             "SyncedElement: the target element. \n"
             "These designations correspond to the keys of the "
             "Synchronized association." ), 
          ValueMap { "2", "3", "..", "0x8000.." }, 
          Values { "SystemElement", "SyncedElement", 
             "DMTF Reserved", "Vendor Specific" }]
      uint16 LocalElementRole[]);

      [Description ( 
          "This method for a given ReplicationType returns the "
          "supported features related to storage compression." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetSupportedStorageCompressionFeatures(
         [IN, Description ( 
             "A value representing the ReplicationType." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 ReplicationType, 
         [OUT, Description ( 
             "An array of supported Storage Compression Features." ), 
          ValueMap { "1", "2", "3", "4", "5", "6", "7", "..", 
             "0x8000.." }, 
          Values { "Storage compression is not supported", 
             "Compressed source to compressed target", 
             "Compressed source to uncompressed target", 
             "Uncompressed source to compressed target", 
             "Compression of target same as source", 
             "Target pool decides compression of target element", 
             "Implementation decides compression of target", 
             "DMTF Reserved", "Vendor specific" }, 
          ModelCorrespondence { 
             "CIM_ReplicationSettingData.StorageCompressionPolicy" }]
      uint16 SupportedStorageCompressionFeatures[], 
         [IN, Description ( 
             "If supplied, it provides additional refinements "
             "for the ReplicationType. For example, the "
             "CopyMethodology." ), 
          EmbeddedInstance ( "CIM_ReplicationSettingData" )]
      string ReplicationSettingData);

      [Description ( 
          "For the supplied elements, this method returns the "
          "supported tokenized ReplicationTypes. At least one "
          "supplied element is expected to be local to the service. \n"
          "Not Supported: Tokenized operation is not supported "
          "between the supplied elements. \n"
          "Source Temporarily Not Available: Source element "
          "temporarily cannot be used for tokenized operations -- "
          "for example, the source element is currently being used "
          "for another copy operation. \n"
          "Target Temporarily Not Available: Target element "
          "temporarily cannot be used for tokenized operations -- "
          "for example, the target element is currently being used "
          "for another copy operation." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "..", 
          "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", 
          "Source Temporarily Not Available", 
          "Target Temporarily Not Available", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetSupportedTokenizedReplicationType(
         [IN, Description ( "A reference to the source element." )]
      CIM_ManagedElement REF SourceElement, 
         [IN, Description ( "A reference to the target element." )]
      CIM_ManagedElement REF TargetElement, 
         [IN, Description ( 
             "A reference to the access point instance to allow "
             "the service to access the Element if the element "
             "is not local to the service. If NULL, it is "
             "assumed the service does not need any access "
             "information to the local element." )]
      CIM_ServiceAccessPoint REF ElementAccessPoint, 
         [IN, Description ( 
             "If supplied, it provides additional information "
             "about the copy operation. For example, the "
             "intended CopyMethodology." ), 
          EmbeddedInstance ( "CIM_ReplicationSettingData" )]
      string ReplicationSettingData, 
         [OUT, Description ( 
             "An array of supported tokenized ReplicationTypes." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 ReplicationTypes[]);

};



   [Version( "2.40.0" ), Description("{0}")]
class UNIX_ReplicationServiceCapabilities : CIM_ReplicationServiceCapabilities
{


};

