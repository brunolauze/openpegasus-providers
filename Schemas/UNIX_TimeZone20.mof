//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////



// Copyright (c) 2009 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "ManagedElement is an abstract class that provides a common "
       "superclass (or top of the inheritance tree) for the "
       "non-association classes in the CIM Schema." )]
class CIM_ManagedElement {

      [Description ( 
          "InstanceID is an optional property that may be used to "
          "opaquely and uniquely identify an instance of this class "
          "within the scope of the instantiating Namespace. Various "
          "subclasses of this class may override this property to "
          "make it required, or a key. Such subclasses may also "
          "modify the preferred algorithms for ensuring uniqueness "
          "that are defined below.\n"
          "To ensure uniqueness within the NameSpace, the value of "
          "InstanceID should be constructed using the following "
          "\"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If not null and the above "
          "\"preferred\" algorithm is not used, the defining entity "
          "must assure that the resulting InstanceID is not reused "
          "across any InstanceIDs produced by this or other "
          "providers for the NameSpace of this instance. \n"
          "If not set to null for DMTF-defined instances, the "
          "\"preferred\" algorithm must be used with the <OrgID> "
          "set to CIM." )]
   string InstanceID;

      [Description ( 
          "The Caption property is a short textual description "
          "(one- line string) of the object." ), 
       MaxLen ( 64 )]
   string Caption;

      [Description ( 
          "The Description property provides a textual description "
          "of the object." )]
   string Description;

      [Description ( 
          "A user-friendly name for the object. This property "
          "allows each instance to define a user-friendly name in "
          "addition to its key properties, identity data, and "
          "description information. \n"
          "Note that the Name property of ManagedSystemElement is "
          "also defined as a user-friendly name. But, it is often "
          "subclassed to be a Key. It is not reasonable that the "
          "same property can convey both identity and a "
          "user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of "
          "LogicalDevice), the same information can be present in "
          "both the Name and ElementName properties. Note that if "
          "there is an associated instance of "
          "CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask "
          "and MaxElementNameLen properties defined in that class." )]
   string ElementName;

      [Experimental, Description ( 
          "Generation is an optional, monotonically increasing "
          "property that may be used to identify a particular "
          "generation of the resource represented by this class.\n"
          "If Generation is supported by the implementation, its "
          "value shall not be null. \n"
          "Except as otherwise specified, a value (including null) "
          "of Generation specified at creation time shall be "
          "replaced by null if Generation is not supported by the "
          "implementation or shall be a, (possibly different), "
          "non-null value if the implementation does support Generation.\n"
          "After creation and if supported, Generation shall be "
          "updated, at least once per access, whenever the "
          "represented resource is modified, regardless of the "
          "source of the modification.\n"
          "Note: the Generation value only needs to be updated once "
          "between references, even if the resource is updated many "
          "times. The key point is to assure that it will be "
          "different if there have been updates, not to count each update.\n"
          "Note: unless otherwise specified, the value of "
          "Generation within one instance is not required to be "
          "coordinated with the value of Generation in any other instance.\n"
          "Note:the semantics of the instance, (as defined by its "
          "creation class), define the underlying resource. That "
          "underlying resource may be a collection or aggregation "
          "of resources. And, in that case, the semantics of the "
          "instance further define when updates to constituent "
          "resources also require updates to the Generation of the "
          "collective resource. Default behavior of composite "
          "aggregations should be to update the Generation of the "
          "composite whenever the Generation of a component is updated.\n"
          "Subclasses may define additional requirements for "
          "updates on some or all of related instances.\n"
          "For a particular instance, the value of Generation may "
          "wrap through zero, but the elapsed time between wraps "
          "shall be greater than 10\'s of years.\n"
          "This class does not require Generation to be unique "
          "across instances of other classes nor across instances "
          "of the same class that have different keys. Generation "
          "shall be different across power cycles, resets, or "
          "reboots if any of those actions results in an update. "
          "Generation may be different across power cycles, resets, "
          "or reboots if those actions do not result in an update. "
          "If the Generation property of an instance is non-null, "
          "and if any attempt to update the instance includes the "
          "Generation property, then if it doesn\'t match the "
          "current value, the update shall fail.\n"
          "The usage of this property is intended to be further "
          "specified by applicable management profiles. \n"
          "Typically, a client will read the value of this property "
          "and then supply that value as input to an operation that "
          "modifies the instance in some means. This may be via an "
          "explicit parameter in an extrinsic method or via an "
          "embedded value in an extrinsic method or intrinsic operation.\n"
          "For example: a profile may require that an intrinsic "
          "instance modification supply the Generation property and "
          "that it must match for the modification to succeed." )]
   uint64 Generation;


};



// Copyright (c) 2005 DMTF.  All rights reserved.
   [Abstract, Version ( "2.8.1000" ), 
    UMLPackagePath ( "CIM::Core::Settings" ), 
    Description ( 
       "The Setting class represents configuration-related and "
       "operational parameters for one or more ManagedSystemElements. "
       "An Element can have multiple Setting objects associated with "
       "it. The current operational values for the parameters of an "
       "Element are reflected by properties in the Element itself or "
       "by properties in its associations. These properties do not "
       "have to be the same values present in the Setting object. For "
       "example, a modem might have a Setting baud rate of 56Kb/sec "
       "but be operating at 19.2Kb/sec. \n"
       "Note: The CIM_SettingData class is very similar to "
       "CIM_Setting, yet both classes are present in the model because "
       "many implementations have successfully used CIM_Setting. "
       "However, issues have arisen that could not be resolved without "
       "defining a new class. Therefore, until a new major release "
       "occurs, both classes will exist in the model. Refer to the "
       "Core White Paper for additional information. Setting instances "
       "can be aggregated together into higher-level Setting objects "
       "using ConcreteComponent associations." )]
class CIM_Setting : CIM_ManagedElement {

      [Description ( 
          "The identifier by which the Setting object is known." ), 
       MaxLen ( 256 )]
   string SettingID;


      [Description ( 
          "The VerifyOKToApplyToMSE method is used to verify that "
          "this Setting can be applied to the referenced "
          "ManagedSystemElement at the given time or time interval. "
          "This method takes three input parameters: MSE (the "
          "Managed SystemElement that is being verified), "
          "TimeToApply (which, being a datetime, can be either a "
          "specific time or a time interval), and MustBeCompletedBy "
          "(which indicates the required completion time for the "
          "method). The return value should be 0 if it is okay to "
          "apply the Setting, 1 if the method is not supported, 2 "
          "if the Setting cannot be applied within the specified "
          "times, and any other number if an error occurred. In a "
          "subclass, the set of possible return codes could be "
          "specified using a ValueMap qualifier on the method. The "
          "strings to which the ValueMap contents are \"translated\" "
          "can also be specified in the subclass as a Values array "
          "qualifier." )]
   uint32 VerifyOKToApplyToMSE(
         [IN, Description ( 
             "The ManagedSystemElement that is being verified." )]
      CIM_ManagedSystemElement REF MSE, 
         [IN, Description ( 
             "TimeToApply can be either a specific time or a time interval."
              )]
      datetime TimeToApply, 
         [IN, Description ( 
             "The required completion time for the method." )]
      datetime MustBeCompletedBy);

      [Description ( 
          "The ApplyToMSE method performs the actual application of "
          "the Setting to the referenced ManagedSystemElement. It "
          "takes three input parameters: MSE (the "
          "ManagedSystemElement to which the Setting is being "
          "applied), TimeToApply (which, being a datetime, can be "
          "either a specific time or a time interval), and "
          "MustBeCompletedBy (which indicates the required "
          "completion time for the method). Note that the semantics "
          "of this method are that individual Settings are either "
          "wholly applied or not applied at all to their target "
          "ManagedSystemElement. The return value should be 0 if "
          "the Setting is successfully applied to the referenced "
          "ManagedSystemElement, 1 if the method is not supported, "
          "2 if the Setting was not applied within the specified "
          "times, and any other number if an error occurred. In a "
          "subclass, the set of possible return codes could be "
          "specified, using a ValueMap qualifier on the method. The "
          "strings to which the ValueMap contents are \"translated\" "
          "can also be specified in the subclass as a Values array "
          "qualifier. \n"
          "Note: If an error occurs when applying the Setting to a "
          "ManagedSystemElement, the Element must be configured as "
          "it was when the \"Apply\" attempt began. That is, the "
          "Element should not be left in an indeterminate state." )]
   uint32 ApplyToMSE(
         [IN, Description ( 
             "The ManagedSystemElement to which the Setting is being applied."
              )]
      CIM_ManagedSystemElement REF MSE, 
         [IN, Description ( 
             "TimeToApply can be either a specific time or a time interval."
              )]
      datetime TimeToApply, 
         [IN, Description ( 
             "The required completion time for the method." )]
      datetime MustBeCompletedBy);

      [Description ( 
          "The VerifyOKToApplyToCollection method is used to verify "
          "that this Setting can be applied to the referenced "
          "Collection of ManagedSystemElements, at the given time "
          "or time interval, without causing adverse effects to "
          "either the Collection itself or its surrounding "
          "environment. The net effect is to execute the "
          "VerifyOKToApply method against each of the Elements that "
          "are aggregated by the Collection. This method takes "
          "three input parameters: Collection (the Collection of "
          "ManagedSystemElements that is being verified), "
          "TimeToApply (which, being a datetime, can be either a "
          "specific time or a time interval), and MustBeCompletedBy "
          "(which indicates the required completion time for the "
          "method). The return value should be 0 if it is okay to "
          "apply the Setting, 1 if the method is not supported, 2 "
          "if the Setting cannot be applied within the specified "
          "times, and any other number if an error occurred. One "
          "output parameter, CanNotApply, is defined, which is a "
          "string array that lists the keys of the "
          "ManagedSystemElements to which the Setting cannot be "
          "applied. This parameter enables those Elements to be "
          "revisited and either fixed or have other corrective "
          "action taken on them. \n"
          "In a subclass, the set of possible return codes could be "
          "specified, using a ValueMap qualifier on the method. The "
          "strings to which the ValueMap contents are \"translated\" "
          "can also be specified in the subclass as a Values array "
          "qualifier." )]
   uint32 VerifyOKToApplyToCollection(
         [IN, Description ( 
             "The Collection of ManagedSystemElements that is being verified."
              )]
      CIM_CollectionOfMSEs REF Collection, 
         [IN, Description ( 
             "TimeToApply can be either a specific time or a time interval."
              )]
      datetime TimeToApply, 
         [IN, Description ( 
             "The required completion time for the method." )]
      datetime MustBeCompletedBy, 
         [IN ( false ), OUT, Description ( 
             "A string array that lists the keys of the "
             "ManagedSystemElements to which the Setting cannot "
             "be applied." )]
      string CanNotApply[]);

      [Description ( 
          "The ApplyToCollection method performs the application of "
          "the Setting to the referenced Collection of "
          "ManagedSystemElements. The net effect is to execute the "
          "ApplyToMSE method against each of the Elements that are "
          "aggregated by the Collection. If the input value "
          "ContinueOnError is false, this method applies the "
          "Setting to all Elements in the Collection until it "
          "encounters an error. In the case of an error, the method "
          "stops execution, logs the key of the Element that caused "
          "the error in the CanNotApply array, and issues a return "
          "code of 2. If the input value ContinueOnError is true, "
          "then this method applies the Setting to all of the "
          "ManagedSystemElements in the Collection, and reports the "
          "failed Elements in the array, CanNotApply. For the "
          "latter, processing will continue until the method is "
          "applied to all Elements in the Collection, regardless of "
          "any errors encountered. The key of each "
          "ManagedSystemElement to which the Setting could not be "
          "applied is logged into the CanNotApply array. This "
          "method takes four input parameters: Collection (the "
          "Collection of Elements to which the Setting is being "
          "applied), TimeToApply (which, being a datetime, can be "
          "either a specific time or a time interval), "
          "ContinueOnError (true indicates to continue processing "
          "when an error is encountered), and MustBeCompletedBy "
          "(which indicates the required completion time for the "
          "method). The return value should be 0 if the Setting is "
          "successfully applied to the referenced Collection, 1 if "
          "the method is not supported, 2 if the Setting was not "
          "applied within the specified times, 3 if the Setting "
          "cannot be applied using the input value for "
          "ContinueOnError, and any other number if an error "
          "occurred. One output parameter, CanNotApplystring, is "
          "defined, which is an array that lists the keys of the "
          "ManagedSystemElements to which the Setting could not be "
          "applied. This output parameter has meaning only when the "
          "ContinueOnError parameter is true. \n"
          "In a subclass, the set of possible return codes could be "
          "specified using a ValueMap qualifier on the method. The "
          "strings to which the ValueMap contents are \"translated\" "
          "can also be specified in the subclass as a Values array "
          "qualifier. \n"
          "Note: If an error occurs when applying the Setting to a "
          "ManagedSystemElement in the Collection, the Element must "
          "be configured as it was when the \"Apply\" attempt "
          "began. That is, the Element should not be left in an "
          "indeterminate state." )]
   uint32 ApplyToCollection(
         [IN, Description ( 
             "The Collection of ManagedSystemElements to be applied."
              )]
      CIM_CollectionOfMSEs REF Collection, 
         [IN, Description ( 
             "TimeToApply can be either a specific time or a time interval."
              )]
      datetime TimeToApply, 
         [IN, Description ( 
             "True means to continue processing when an error is encountered."
              )]
      boolean ContinueOnError, 
         [IN, Description ( 
             "The required completion time for the method." )]
      datetime MustBeCompletedBy, 
         [IN ( false ), OUT, Description ( 
             "A string array that lists the keys of the "
             "ManagedSystemElements to which the Setting could "
             "not be applied." )]
      string CanNotApply[]);

      [Description ( 
          "The VerifyOKToApplyIncrementalChangeToMSE method is used "
          "to verify that a subset of the properties in this "
          "Setting can be applied to the referenced "
          "ManagedSystemElement at the given time or time interval. "
          "This method takes four input parameters: MSE (the "
          "ManagedSystemElement that is being verified), "
          "TimeToApply (which, being a datetime, can be either a "
          "specific time or a time interval), MustBeCompletedBy "
          "(which indicates the required completion time for the "
          "method), and a PropertiesToApply array (which contains a "
          "list of the property names whose values will be "
          "verified). If the array is null or empty or contains the "
          "string \"ALL\" as a property name, then all Settings "
          "properties will be verified. If it is set to \"NONE\", "
          "then no Settings properties will be verified. The return "
          "value should be 0 if it is okay to apply the Setting, 1 "
          "if the method is not supported, 2 if the Setting cannot "
          "be applied within the specified times, and any other "
          "number if an error occurred. In a subclass, the set of "
          "possible return codes could be specified using a "
          "ValueMap qualifier on the method. The strings to which "
          "the ValueMap contents are \"translated\" can also be "
          "specified in the subclass as a Values array qualifier." )]
   uint32 VerifyOKToApplyIncrementalChangeToMSE(
         [IN, Description ( 
             "The ManagedSystemElement for which the Setting is "
             "being verified." )]
      CIM_ManagedSystemElement REF MSE, 
         [IN, Description ( 
             "TimeToApply can be either a specific time or a time interval."
              )]
      datetime TimeToApply, 
         [IN, Description ( 
             "The required completion time for the method." )]
      datetime MustBeCompletedBy, 
         [IN, Description ( 
             "A list of the property names whose values will be verified."
              )]
      string PropertiesToApply[]);

      [Description ( 
          "The ApplyIncrementalChangeToMSE method performs the "
          "actual application of a subset of the properties in the "
          "Setting to the referenced ManagedSystemElement. It takes "
          "four input parameters: MSE (the ManagedSystem Element to "
          "which the Setting is being applied), TimeToApply (which, "
          "being a datetime, can be either a specific time or a "
          "time interval), MustBeCompletedBy (which indicates the "
          "required completion time for the method), and a "
          "PropertiesToApply array (which contains a list of the "
          "property names whose values will be applied). If a "
          "property is not in this list, it will be ignored by the "
          "Apply. If the array is null, empty, or contains the "
          "string \"ALL\" as a property name, then all Settings "
          "properties will be applied. If it is set to \"NONE\", "
          "then no Settings properties will be applied. \n"
          "Note that the semantics of this method are that "
          "individual Settings are either wholly applied or not "
          "applied at all to their target ManagedSystemElement. The "
          "return value should be 0 if the Setting is successfully "
          "applied to the referenced ManagedSystemElement, 1 if the "
          "method is not supported, 2 if the Setting was not "
          "applied within the specified times, and any other number "
          "if an error occurred. In a subclass, the set of possible "
          "return codes could be specified using a ValueMap "
          "qualifier on the method. The strings to which the "
          "ValueMap contents are \"translated\" can also be "
          "specified in the subclass as a Values array qualifier. \n"
          "Note: If an error occurs when applying the Setting to a "
          "ManagedSystemElement, the Element must be configured as "
          "it was when the \"Apply\" attempt began. That is, the "
          "Element should not be left in an indeterminate state." )]
   uint32 ApplyIncrementalChangeToMSE(
         [IN, Description ( 
             "The ManagedSystemElement to which the Setting is being applied."
              )]
      CIM_ManagedSystemElement REF MSE, 
         [IN, Description ( 
             "TimeToApply can be either a specific time or a time interval."
              )]
      datetime TimeToApply, 
         [IN, Description ( 
             "The required completion time for the method." )]
      datetime MustBeCompletedBy, 
         [IN, Description ( 
             "A list of the property names whose values will be applied."
              )]
      string PropertiesToApply[]);

      [Description ( 
          "The VerifyOKToApplyIncrementalChangeToCollection method "
          "is used to verify that a subset of the properties in "
          "this Setting can be applied to the referenced Collection "
          "of ManagedSystemElements at the given time or time "
          "interval, without causing adverse effects to either the "
          "Collection itself or its surrounding environment. The "
          "net effect is to execute the "
          "VerifyOKToApplyIncrementalChangeToMSE method against "
          "each of the Elements that are aggregated by the "
          "Collection. This method takes four input parameters: "
          "Collection (the Collection of ManagedSystemElements that "
          "is being verified), TimeToApply (which, being a "
          "datetime, can be either a specific time or a time "
          "interval), MustBeCompletedBy (which indicates the "
          "required completion time for the method), and a "
          "PropertiesToApply array (which contains a list of the "
          "property names whose values will be verified). If the "
          "array is null or empty or contains the string \"all\" as "
          "a property name, all Settings properties will be "
          "verified. If it is set to \"none\" then no Settings "
          "properties will be verified. The return value should be "
          "0 if it is okay to apply the Setting, 1 if the method is "
          "not supported, 2 if the Setting cannot be applied within "
          "the specified times, and any other number if an error "
          "occurred. One output parameter, CanNotApply, is defined, "
          "which is a string array that lists the keys of the "
          "ManagedSystemElements to which the Setting cannot be "
          "applied. This parameter enables those Elements to be "
          "revisited and either fixed or have other corrective "
          "action taken on them. \n"
          "In a subclass, the set of possible return codes could be "
          "specified using a ValueMap qualifier on the method. The "
          "strings to which the ValueMap contents are \"translated\" "
          "can also be specified in the subclass as a Values array "
          "qualifier." )]
   uint32 VerifyOKToApplyIncrementalChangeToCollection(
         [IN, Description ( 
             "The Collection of ManagedSystemElements for which "
             "the setting is being verified." )]
      CIM_CollectionOfMSEs REF Collection, 
         [IN, Description ( 
             "TimeToApply can be either a specific time or a time interval."
              )]
      datetime TimeToApply, 
         [IN, Description ( 
             "The required completion time for the method." )]
      datetime MustBeCompletedBy, 
         [IN, Description ( 
             "A list of the property names whose values will be verified."
              )]
      string PropertiesToApply[], 
         [IN ( false ), OUT, Description ( 
             "A string array that lists the keys of the "
             "ManagedSystemElements to which the Setting cannot "
             "be applied." )]
      string CanNotApply[]);

      [Description ( 
          "The ApplyIncrementalChangeToCollection method performs "
          "the application of a subset of the properties in this "
          "Setting to the referenced Collection of "
          "ManagedSystemElements. The net effect is to execute the "
          "ApplyIncrementalChangeToMSE method against each of the "
          "Elements that are aggregated by the Collection. If the "
          "input value ContinueOnError is false, this method "
          "applies the Setting to all Elements in the Collection "
          "until it encounters an error, in which case it stops "
          "execution, logs the key of the Element that caused the "
          "error in the CanNotApply array, and issues a return code "
          "of 2. If the input value ContinueOnError is true, then "
          "this method applies the Setting to all of the "
          "ManagedSystemElements in the Collection, and reports the "
          "failed Elements in the array, CanNotApply. For the "
          "latter, processing will continue until the method is "
          "applied to all Elements in the Collection, regardless of "
          "any errors encountered. The key of each "
          "ManagedSystemElement to which the Setting could not be "
          "applied is logged into the CanNotApply array. This "
          "method takes four input parameters: Collection (the "
          "Collection of Elements to which the Setting is being "
          "applied), TimeToApply (which, being a datetime, can be "
          "either a specific time or a time interval), "
          "ContinueOnError (true indicates to continue processing "
          "when an error is encountered), MustBeCompletedBy (which "
          "indicates the required completion time for the method), "
          "and a PropertiesToApply array (which contains a list of "
          "the property names whose values will be applied). If a "
          "property is not in this list, it will be ignored by the "
          "Apply. If the array is null or empty or contains the "
          "string \"ALL\" as a property name, then all Settings "
          "properties will be applied. If it is set to \"NONE\", "
          "then no Settings properties will be applied. \n"
          "The return value should be 0 if the Setting is "
          "successfully applied to the referenced Collection, 1 if "
          "the method is not supported, 2 if the Setting was not "
          "applied within the specified time, 3 if the Setting "
          "cannot be applied using the input value for "
          "ContinueOnError, and any other number if an error "
          "occurred. One output parameter, CanNotApplystring, is "
          "defined, which is an array that lists the keys of the "
          "ManagedSystemElements to which the Setting could not be "
          "applied. This output parameter has meaning only when the "
          "ContinueOnError parameter is true. \n"
          "In a subclass, the set of possible return codes could be "
          "specified using a ValueMap qualifier on the method. The "
          "strings to which the ValueMap contents are \"translated\" "
          "can also be specified in the subclass as a Values array "
          "qualifier. \n"
          "Note: If an error occurs when applying the Setting to a "
          "ManagedSystemElement in the Collection, the Element must "
          "be configured as it was when the \"Apply\" attempt "
          "began. That is, the Element should not be left in an "
          "indeterminate state." )]
   uint32 ApplyIncrementalChangeToCollection(
         [IN, Description ( 
             "The Collection of Elements to which the Setting is "
             "being applied." )]
      CIM_CollectionOfMSEs REF Collection, 
         [IN, Description ( "A specific time or a time interval." )]
      datetime TimeToApply, 
         [IN, Description ( 
             "True indicates to continue processing when an "
             "error is encountered." )]
      boolean ContinueOnError, 
         [IN, Description ( 
             "This parameter indicates the required completion "
             "time for the method." )]
      datetime MustBeCompletedBy, 
         [IN, Description ( 
             "A list of the property names whose values will be verified."
              )]
      string PropertiesToApply[], 
         [IN ( false ), OUT, Description ( 
             "A string array that lists the keys of the "
             "ManagedSystemElements to which the Setting cannot "
             "be applied." )]
      string CanNotApply[]);

};



// Copyright (c) 2005 DMTF.  All rights reserved.
   [Deprecated { "CIM_TimeZoneSettingData" }, 
    Experimental, Version ( "2.8.1000" ), 
    UMLPackagePath ( "CIM::System::Time" ), 
    Description ( 
       "The TimeZone class is a set of properties defining a "
       "particular time zone. These properties include the concept of "
       "daylight saving time. It is deprecated to move the concept "
       "into the SettingData hierarchy." )]
class CIM_TimeZone : CIM_Setting {

      [Deprecated { "CIM_TimeZoneSettingData.InstanceID" }, 
       Key, Description ( 
          "Time zone identifier. The Id MAY be expressed in the "
          "form \'area name/city name\' (e.g., \"America/New_York\"), "
          "or as a time zone name (for example, EST or EDT)." )]
   string TimeZoneID;

      [Deprecated { "No value" }, 
       Key, Description ( 
          "The date and time at which this time zone definition "
          "takes effect. The value is specified in UTC." )]
   datetime TimeZoneStartDate;

      [Deprecated { "CIM_TimeZoneSettingData.StandardName" }, 
       Description ( 
          "Full name of the \'standard\' time zone (e.g., \"U.S. "
          "Eastern Standard Time\"), suitable for presentation to "
          "the user in the default locale." ), 
       ModelCorrespondence { "CIM_TimeZone.StandardCaption" }]
   string StandardName;

      [Deprecated { "CIM_TimeZoneSettingData.StandardCaption" }, 
       Description ( 
          "Short name of the \'standard\' time zone (e.g., \"EST\"), "
          "suitable for presentation to the user in the default "
          "locale. Note that a specific StandardCaption property is "
          "defined, instead of using the inherited Caption. This is "
          "done to force consistent property naming for the "
          "StandardXXX and DaylightXXX properties." ), 
       ModelCorrespondence { "CIM_TimeZone.StandardName" }]
   string StandardCaption;

      [Deprecated { "CIM_TimeZoneSettingData.StandardOffset" }, 
       Description ( 
          "The number of minutes by which this \'standard\' time "
          "differs from UTC. For example, U.S. EST differs from UTC "
          "by -5.0 hours or -300 minutes, whereas Australia "
          "Adelaide Standard Time differs by 9.5 hours or 570 "
          "minutes." ), 
       Units ( "Minutes" ), 
       PUnit ( "minute" )]
   sint32 StandardOffset;

      [Deprecated { "CIM_TimeZoneSettingData.StandardMonth" }, 
       Description ( 
          "The month in which daylight saving time ends (and "
          "\'standard\' time begins). Specify 0 for January, 1 for "
          "February, and so on." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11" }, 
       Values { "January", "February", "March", "April", "May", 
          "June", "July", "August", "September", "October", 
          "November", "December" }, 
       ModelCorrespondence { "CIM_TimeZone.StandardDay" }]
   uint8 StandardMonth;

      [Deprecated { "CIM_TimeZoneSettingData.StandardDay" }, 
       Description ( 
          "There are two different interpretations for this "
          "property, depending on the value of StandardDayOfWeek. "
          "In one case, StandardDay defines the day-in-month on "
          "which daylight saving time ends. This interpretation is "
          "used when the StandardDayOfWeek is 0. A positive or "
          "negative integer is specified to indicate whether the "
          "StandardDay is calculated from the beginning or the end "
          "of the month. For example, 5 indicates the fifth day in "
          "the StandardMonth and -1 indicates the last day in the "
          "StandardMonth. \n"
          "\n"
          "When StandardDayOfWeek is not 0, StandardDay is the day- "
          "in-month on which daylight saving time ends, defined in "
          "conjunction with StandardDayOfWeek. For example, if "
          "StandardDay is 15 and StandardDayOfWeek is Saturday, "
          "then daylight saving time ends on the first Saturday on "
          "or after the 15th day in the StandardMonth (i.e., the "
          "third Saturday in the month). If StandardDay is 20 and "
          "StandardDayOfWeek is -Saturday, then this indicates the "
          "first Saturday on or before the 20th day in the "
          "StandardMonth. If StandardDay is -1 and "
          "StandardDayOfWeek is -Sunday, then this indicates the "
          "last Sunday in the StandardMonth." ), 
       MinValue ( -31 ), 
       MaxValue ( 31 ), 
       ModelCorrespondence { "CIM_TimeZone.StandardDayOfWeek" }]
   sint8 StandardDay;

      [Deprecated { "CIM_TimeZoneSettingData.StandardDayOfWeek" }, 
       Description ( 
          "Positive or negative integer used in conjunction with "
          "StandardDay to indicate the day of the week on which "
          "daylight saving time ends (and \'standard\' time "
          "begins). StandardDayOfWeek is set to 0 to indicate an "
          "exact day of the month, such as March 1. A positive "
          "integer (representing Sunday, Monday, ..., Saturday) "
          "means that the day of week is found on or after the "
          "specified StandardDay. A negative integer (representing "
          "-Sunday, -Monday, ..., -Saturday) means that the day of "
          "week is found on or before the StandardDay." ), 
       ValueMap { "-7", "-6", "-5", "-4", "-3", "-2", "-1", "0", 
          "1", "2", "3", "4", "5", "6", "7" }, 
       Values { "-Saturday", "-Friday", "-Thursday", "-Wednesday", 
          "-Tuesday", "-Monday", "-Sunday", "ExactDayOfMonth", 
          "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", 
          "Friday", "Saturday" }, 
       ModelCorrespondence { "CIM_TimeZone.StandardDay" }]
   sint8 StandardDayOfWeek;

      [Deprecated { "CIM_TimeZoneSettingData.StandardStartInterval" }, 
       Description ( 
          "The time interval after midnight when daylight saving "
          "time ends. For example, \n"
          "00000000020000.000000:000 \n"
          "indicates that daylight saving time ends at two o\'clock, "
          "local time (usually, daylight saving time)." )]
   datetime StandardStartInterval;

      [Deprecated { "CIM_TimeZoneSettingData.DaylightName" }, 
       Description ( 
          "Full name of the \'daylight\' time zone (e.g., \"U.S. "
          "Eastern Daylight Saving Time\"), suitable for "
          "presentation to the user in the default locale." ), 
       ModelCorrespondence { "CIM_TimeZone.DaylightCaption" }]
   string DaylightName;

      [Deprecated { "CIM_TimeZoneSettingData.DaylightCaption" }, 
       Description ( 
          "Short name of the \'daylight\' time zone (e.g., \"EDT\"), "
          "suitable for presentation to the user in the default "
          "locale. Note that a specific DaylightCaption property is "
          "defined, instead of using the inherited Caption. This is "
          "done to force consistent property naming for the "
          "StandardXXX and DaylightXXX properties." ), 
       ModelCorrespondence { "CIM_TimeZone.DaylightName" }]
   string DaylightCaption;

      [Deprecated { "CIM_TimeZoneSettingData.DaylightOffset" }, 
       Description ( 
          "The number of minutes by which this daylight saving time "
          "differs from UTC. For example, U.S. EDT differs from UTC "
          "by -4.0 hours or -240 minutes, whereas Australia "
          "Adelaide Daylight Time differs by 10.5 hours or 630 "
          "minutes." ), 
       Units ( "Minutes" ), 
       PUnit ( "minute" )]
   sint32 DaylightOffset;

      [Deprecated { "CIM_TimeZoneSettingData.DaylightMonth" }, 
       Description ( 
          "The month in which daylight saving time starts. Specify "
          "0 for January, 1 for February, and so on." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11" }, 
       Values { "January", "February", "March", "April", "May", 
          "June", "July", "August", "September", "October", 
          "November", "December" }, 
       ModelCorrespondence { "CIM_TimeZone.DaylightDay" }]
   uint8 DaylightMonth;

      [Deprecated { "CIM_TimeZoneSettingData.DaylightDay" }, 
       Description ( 
          "There are two different interpretations for this "
          "property, depending on the value of DaylightDayOfWeek. "
          "In one case, DaylightDay defines the day-in-month on "
          "which daylight saving time starts. This interpretation "
          "is used when the DaylightDayOfWeek is 0. A positive or "
          "negative integer is specified to indicate whether the "
          "DaylightDay is calculated from the beginning or the end "
          "of the month. For example, 5 indicates the fifth day in "
          "the DaylightMonth and -1 indicates the last day in the "
          "DaylightMonth. \n"
          "\n"
          "When DaylightDayOfWeek is not 0, DaylightDay is the day- "
          "in-month on which daylight saving time starts, defined "
          "in conjunction with DaylightDayOfWeek. For example, if "
          "DaylightDay is 15 and DaylightDayOfWeek is Saturday, "
          "then daylight saving time starts on the first Saturday "
          "on or after the 15th day in the DaylightMonth (i.e., the "
          "third Saturday in the month). If DaylightDay is 20 and "
          "DaylightDayOfWeek is -Saturday, then this indicates the "
          "first Saturday on or before the 20th day in the "
          "DaylightMonth. If DaylightDay is -1 and "
          "DaylightDayOfWeek is -Sunday, then this indicates the "
          "last Sunday in the month." ), 
       MinValue ( -31 ), 
       MaxValue ( 31 ), 
       ModelCorrespondence { "CIM_TimeZone.DaylightDayOfWeek" }]
   sint8 DaylightDay;

      [Deprecated { "CIM_TimeZoneSettingData.DaylightDayOfWeek" }, 
       Description ( 
          "Positive or negative integer used in conjunction with "
          "DaylightDay to indicate the day of the week on which "
          "daylight saving time starts. Set DaylightDayOfWeek to 0 "
          "to indicate an exact day of month, such as March 1. "
          "Positive integer (Sunday, Monday, ..., Saturday) means "
          "that the day of week is found on or after DaylightDay. "
          "Negative integer (-Sunday, -Monday, ..., -Saturday) "
          "means that the day of week is found on or before "
          "DaylightDay." ), 
       ValueMap { "-7", "-6", "-5", "-4", "-3", "-2", "-1", "0", 
          "1", "2", "3", "4", "5", "6", "7" }, 
       Values { "-Saturday", "-Friday", "-Thursday", "-Wednesday", 
          "-Tuesday", "-Monday", "-Sunday", "ExactDayOfMonth", 
          "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", 
          "Friday", "Saturday" }, 
       ModelCorrespondence { "CIM_TimeZone.DaylightDay" }]
   sint8 DaylightDayOfWeek;

      [Deprecated { "CIM_TimeZoneSettingData.DaylightStartInterval" }, 
       Description ( 
          "The time interval after midnight when daylight saving "
          "time starts. For example, \n"
          "00000000020000.000000:000 \n"
          "indicates that daylight saving time starts at two "
          "o\'clock, local time (usually, standard time)." )]
   datetime DaylightStartInterval;


};



   [Version( "2.40.0" ), Description("{0}")]
class UNIX_TimeZone : CIM_TimeZone
{


};

