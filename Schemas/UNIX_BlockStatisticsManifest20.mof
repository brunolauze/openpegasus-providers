//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////



// Copyright (c) 2009 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "ManagedElement is an abstract class that provides a common "
       "superclass (or top of the inheritance tree) for the "
       "non-association classes in the CIM Schema." )]
class CIM_ManagedElement {

      [Description ( 
          "InstanceID is an optional property that may be used to "
          "opaquely and uniquely identify an instance of this class "
          "within the scope of the instantiating Namespace. Various "
          "subclasses of this class may override this property to "
          "make it required, or a key. Such subclasses may also "
          "modify the preferred algorithms for ensuring uniqueness "
          "that are defined below.\n"
          "To ensure uniqueness within the NameSpace, the value of "
          "InstanceID should be constructed using the following "
          "\"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If not null and the above "
          "\"preferred\" algorithm is not used, the defining entity "
          "must assure that the resulting InstanceID is not reused "
          "across any InstanceIDs produced by this or other "
          "providers for the NameSpace of this instance. \n"
          "If not set to null for DMTF-defined instances, the "
          "\"preferred\" algorithm must be used with the <OrgID> "
          "set to CIM." )]
   string InstanceID;

      [Description ( 
          "The Caption property is a short textual description "
          "(one- line string) of the object." ), 
       MaxLen ( 64 )]
   string Caption;

      [Description ( 
          "The Description property provides a textual description "
          "of the object." )]
   string Description;

      [Description ( 
          "A user-friendly name for the object. This property "
          "allows each instance to define a user-friendly name in "
          "addition to its key properties, identity data, and "
          "description information. \n"
          "Note that the Name property of ManagedSystemElement is "
          "also defined as a user-friendly name. But, it is often "
          "subclassed to be a Key. It is not reasonable that the "
          "same property can convey both identity and a "
          "user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of "
          "LogicalDevice), the same information can be present in "
          "both the Name and ElementName properties. Note that if "
          "there is an associated instance of "
          "CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask "
          "and MaxElementNameLen properties defined in that class." )]
   string ElementName;

      [Experimental, Description ( 
          "Generation is an optional, monotonically increasing "
          "property that may be used to identify a particular "
          "generation of the resource represented by this class.\n"
          "If Generation is supported by the implementation, its "
          "value shall not be null. \n"
          "Except as otherwise specified, a value (including null) "
          "of Generation specified at creation time shall be "
          "replaced by null if Generation is not supported by the "
          "implementation or shall be a, (possibly different), "
          "non-null value if the implementation does support Generation.\n"
          "After creation and if supported, Generation shall be "
          "updated, at least once per access, whenever the "
          "represented resource is modified, regardless of the "
          "source of the modification.\n"
          "Note: the Generation value only needs to be updated once "
          "between references, even if the resource is updated many "
          "times. The key point is to assure that it will be "
          "different if there have been updates, not to count each update.\n"
          "Note: unless otherwise specified, the value of "
          "Generation within one instance is not required to be "
          "coordinated with the value of Generation in any other instance.\n"
          "Note:the semantics of the instance, (as defined by its "
          "creation class), define the underlying resource. That "
          "underlying resource may be a collection or aggregation "
          "of resources. And, in that case, the semantics of the "
          "instance further define when updates to constituent "
          "resources also require updates to the Generation of the "
          "collective resource. Default behavior of composite "
          "aggregations should be to update the Generation of the "
          "composite whenever the Generation of a component is updated.\n"
          "Subclasses may define additional requirements for "
          "updates on some or all of related instances.\n"
          "For a particular instance, the value of Generation may "
          "wrap through zero, but the elapsed time between wraps "
          "shall be greater than 10\'s of years.\n"
          "This class does not require Generation to be unique "
          "across instances of other classes nor across instances "
          "of the same class that have different keys. Generation "
          "shall be different across power cycles, resets, or "
          "reboots if any of those actions results in an update. "
          "Generation may be different across power cycles, resets, "
          "or reboots if those actions do not result in an update. "
          "If the Generation property of an instance is non-null, "
          "and if any attempt to update the instance includes the "
          "Generation property, then if it doesn\'t match the "
          "current value, the update shall fail.\n"
          "The usage of this property is intended to be further "
          "specified by applicable management profiles. \n"
          "Typically, a client will read the value of this property "
          "and then supply that value as input to an operation that "
          "modifies the instance in some means. This may be via an "
          "explicit parameter in an extrinsic method or via an "
          "embedded value in an extrinsic method or intrinsic operation.\n"
          "For example: a profile may require that an intrinsic "
          "instance modification supply the Generation property and "
          "that it must match for the modification to succeed." )]
   uint64 Generation;


};



// Copyright (c) 2013 DMTF.  All rights reserved.
   [Version ( "2.39.0" ), 
    UMLPackagePath ( "CIM::Device::StorageStatistics" ), 
    Description ( 
       "Instances of this class define a list of supported or desired "
       "properties of BlockStatisticalData instances. In the case "
       "where a BlockStatisticsManifest instance is a member of a "
       "BlockStatisticsManifestCollection used in a "
       "BlockStatisticsService.GetStatisticsCollection request, for "
       "each of the boolean \"include\" properties set to true in that "
       "BlockStatisticsManifest, the corresponding "
       "BlockStatisticalData property will be included, if available, "
       "in the statistics returned for BlockStatisticalData instances "
       "whose ElementType matches the ElementType of the "
       "BlockStatisticsManifest." )]
class CIM_BlockStatisticsManifest : CIM_ManagedElement {

      [Key, Override ( "InstanceID" ), 
       Description ( 
          "Within the scope of the instantiating Namespace, "
          "InstanceID opaquely and uniquely identifies an instance "
          "of this class. To ensure uniqueness within the "
          "NameSpace, the value of InstanceID should be constructed "
          "using the following \"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If the above \"preferred\" "
          "algorithm is not used, the defining entity must assure "
          "that the resulting InstanceID is not reused across any "
          "InstanceIDs produced by this or other providers for the "
          "NameSpace of this instance. \n"
          "For DMTF-defined instances, the \"preferred\" algorithm "
          "must be used with the <OrgID> set to CIM." )]
   string InstanceID;

      [Description ( 
          "Determines the type of elements that this "
          "BlockStatisticsManifest can be applied to (e.g. during a "
          "GetStatisticsCollection request). This is used when the "
          "same set of statistical metrics is calculated for "
          "several types of devices. In this way, a single "
          "BlockStatisticsManifest instance can be used to filter "
          "all the StatsiticalData instances that contain metrics "
          "for the same type of element in a StatisticsCollection. "
          "If used, a subclass should override this property to "
          "specify the element types supported by that class, "
          "preferably through ValueMap and Values qualifiers to "
          "allow clients to programmatically retrieve those "
          "supported types." ), 
       ValueMap { "2", "3", "4", "5", "6", "7", "8", "9", "10", 
          "11", "12", "..", "0x8000.." }, 
       Values { "Computer System", "Front-end Computer System", 
          "Peer Computer System", "Back-end Computer System", 
          "Front-end Port", "Back-end Port", "Volume", "Extent", 
          "Disk Drive", "Arbitrary LUs", "Remote Replica Group", 
          "DMTF Reserved", "Vendor Specific" }, 
       ModelCorrespondence { 
          "CIM_BlockStorageStatisticalData.ElementType" }]
   uint16 ElementType;

      [Description ( 
          "Indicates whether or not the Statistics property of "
          "StatisticsService.GetStatisticsCollection method will "
          "include the time at time when statistics for this "
          "BlockStatisticsManifest were first captured." ), 
       ModelCorrespondence { 
          "CIM_BlockStorageStatisticalData.StartStatisticTime" }]
   boolean IncludeStartStatisticTime = false;

      [Description ( 
          "Indicates whether or not the Statistics property of "
          "StatisticsService.GetStatisticsCollection method will "
          "include the time when statistics for this "
          "BlockStatisticsManifest were last captured." ), 
       ModelCorrespondence { 
          "CIM_BlockStorageStatisticalData.StatisticTime" }]
   boolean IncludeStatisticTime = false;

      [Description ( 
          "Whether to include in a filter for a metered element the "
          "cumulative count of I/Os for that element." ), 
       ModelCorrespondence { 
          "CIM_BlockStorageStatisticalData.StatisticTime" }]
   boolean IncludeTotalIOs = false;

      [Description ( 
          "Whether to include in a filter for a metered element the "
          "cumulative count of data transferred in Kbytes for that "
          "element." ), 
       ModelCorrespondence { 
          "CIM_BlockStorageStatisticalData.KBytesTransferred" }]
   boolean IncludeKBytesTransferred = false;

      [Description ( 
          "Whether to include in a filter for a metered element the "
          "cumulative elapsed I/O time (number of Clock Tick "
          "Intervals) for all I/Os for that element as defined in "
          "\'Total I/Os\'." ), 
       ModelCorrespondence { 
          "CIM_BlockStorageStatisticalData.IOTimeCounter" }]
   boolean IncludeIOTimeCounter = false;

      [Description ( 
          "Whether to include in a filter for a metered element the "
          "cumulative count of all reads for that element." ), 
       ModelCorrespondence { 
          "CIM_BlockStorageStatisticalData.ReadIOs" }]
   boolean IncludeReadIOs = false;

      [Description ( 
          "Whether to include in a filter for a metered element the "
          "cumulative count of all read cache hits (Reads from "
          "Cache) for that element." ), 
       ModelCorrespondence { 
          "CIM_BlockStorageStatisticalData.ReadHitIOs" }]
   boolean IncludeReadHitIOs = false;

      [Description ( 
          "Whether to include in a filter for a metered element the "
          "cumulative elapsed time for all cumulative Read I/Os for "
          "that element." ), 
       ModelCorrespondence { 
          "CIM_BlockStorageStatisticalData.ReadIOTimeCounter" }]
   boolean IncludeReadIOTimeCounter = false;

      [Description ( 
          "Whether to include in a filter for a metered element the "
          "cumulative elapsed time for all Read I/Os read from "
          "cache for that element." ), 
       ModelCorrespondence { 
          "CIM_BlockStorageStatisticalData.ReadHitIOTimeCounter" }]
   boolean IncludeReadHitIOTimeCounter = false;

      [Description ( 
          "Whether to include in a filter for a metered element the "
          "cumulative count of data read in Kbytes for that "
          "element." ), 
       ModelCorrespondence { 
          "CIM_BlockStorageStatisticalData.KBytesRead" }]
   boolean IncludeKBytesRead = false;

      [Description ( 
          "Whether to include in a filter for a metered element the "
          "cumulative count of all writes for tat element." ), 
       ModelCorrespondence { 
          "CIM_BlockStorageStatisticalData.WriteIOs" }]
   boolean IncludeWriteIOs = false;

      [Description ( 
          "Whether to include in a filter for a metered element the "
          "cumulative count of Write Cache Hits (Writes that went "
          "directly to Cache) for that element." ), 
       ModelCorrespondence { 
          "CIM_BlockStorageStatisticalData.WriteHitIOs" }]
   boolean IncludeWriteHitIOs = false;

      [Description ( 
          "Whether to include in a filter for a metered element the "
          "cumulative elapsed time for all Write I/Os for that "
          "element." ), 
       ModelCorrespondence { 
          "CIM_BlockStorageStatisticalData.WriteIOTimeCounter" }]
   boolean IncludeWriteIOTimeCounter = false;

      [Description ( 
          "Whether to include in a filter for a metered element the "
          "cumulative elapsed time for all Write I/Os written to "
          "cache for that element." ), 
       ModelCorrespondence { 
          "CIM_BlockStorageStatisticalData.WriteHitIOTimeCounter" }]
   boolean IncludeWriteHitIOTimeCounter = false;

      [Description ( 
          "Whether to include in a filter for a metered element the "
          "cumulative count of data written in Kbytes for that "
          "element." ), 
       ModelCorrespondence { 
          "CIM_BlockStorageStatisticalData.KBytesWritten" }]
   boolean IncludeKBytesWritten = false;

      [Description ( 
          "Whether to include in a filter for a metered element the "
          "cumulative elapsed idle time for that element." ), 
       ModelCorrespondence { 
          "CIM_BlockStorageStatisticalData.IdleTimeCounter" }]
   boolean IncludeIdleTimeCounter = false;

      [Description ( 
          "Whether to include in a filter for a metered element the "
          "cumulative count of all maintenance operations for that "
          "element." ), 
       ModelCorrespondence { 
          "CIM_BlockStorageStatisticalData.MaintOp" }]
   boolean IncludeMaintOp = false;

      [Description ( 
          "Whether to include in a filter for a metered element the "
          "cumulative elapsed maintenance time for that element." ), 
       ModelCorrespondence { 
          "CIM_BlockStorageStatisticalData.MaintTimeCounter" }]
   boolean IncludeMaintTimeCounter = false;

      [Experimental, Description ( 
          "The sequence of BlockStorageStatisticalData property "
          "names for properties that will be returned are encoded "
          "in the CSVSequence array. Properties that are not "
          "included will not be returned with "
          "GetStatisticsCollection. Properties that are included in "
          "CSVSequence will be returned in the order they appear in "
          "CSVSequence." )]
   string CSVSequence[];

      [Experimental, Description ( 
          "The sequence of BlockStorageStatisticalData property "
          "names for properties that will be returned are encoded "
          "in the CSVRateSequence array. Properties that are not "
          "included will not be returned with "
          "GetRateStatisticsCollection. Properties that are "
          "included in CSVRateSequence will be returned in the "
          "order they appear in CSVRateSequence." )]
   string CSVRateSequence[];

      [Experimental, Description ( 
          "Whether to include in a filter for a metered element the "
          "count of data read in Kbytes per second for that "
          "element." ), 
       ModelCorrespondence { 
          "CIM_BlockStorageStatisticalData.KBytesReadRate" }]
   boolean IncludeKBytesReadRate = false;

      [Experimental, Description ( 
          "Whether to include in a filter for a metered element the "
          "data transferred in Kbytes per second for that element." ), 
       ModelCorrespondence { 
          "CIM_BlockStorageStatisticalData.KBytesTransferredRate" }]
   boolean IncludeKBytesTransferredRate = false;

      [Experimental, Description ( 
          "Whether to include in a filter for a metered element the "
          "count of data written in Kbytes per second for that "
          "element." ), 
       ModelCorrespondence { 
          "CIM_BlockStorageStatisticalData.KBytesWrittenRate" }]
   boolean IncludeKBytesWrittenRate = false;

      [Experimental, Description ( 
          "Whether to include in a filter for a metered element the "
          "count of all maintenance operations per second for that "
          "element." ), 
       ModelCorrespondence { 
          "CIM_BlockStorageStatisticalData.MaintOpRate" }]
   boolean IncludeMaintOpRate = false;

      [Experimental, Description ( 
          "Indicates whether or not the Statistics property of "
          "StatisticsService.GetTimePeriodStatisticsCollection "
          "method will include the time when statistics for this "
          "BlockStatisticsManifest were last captured." ), 
       ModelCorrespondence { 
          "CIM_BlockStorageStatisticalData.RateIntervalEndTime" }]
   boolean IncludeRateIntervalEndTime = false;

      [Experimental, Description ( 
          "Indicates whether or not the Statistics property of "
          "StatisticsService.GetTimePeriodStatisticsCollection "
          "method will include the time when statistics for this "
          "BlockStatisticsManifest were last captured." ), 
       ModelCorrespondence { 
          "CIM_BlockStorageStatisticalData.RateIntervalStartTime" }]
   boolean IncludeRateIntervalStartTime = false;

      [Experimental, Description ( 
          "Whether to include in a filter for a metered element the "
          "count of all read cache hits (Reads from Cache) per "
          "second for that element." ), 
       ModelCorrespondence { 
          "CIM_BlockStorageStatisticalData.ReadHitIOsRate" }]
   boolean IncludeReadHitIOsRate = false;

      [Experimental, Description ( 
          "Whether to include in a filter for a metered element the "
          "count of all reads per second for that element." ), 
       ModelCorrespondence { 
          "CIM_BlockStorageStatisticalData.ReadIOsRate" }]
   boolean IncludeReadIOsRate = false;

      [Experimental, Description ( 
          "Whether to include in a filter for a metered element the "
          "count of I/Os per second for that element." ), 
       ModelCorrespondence { 
          "CIM_BlockStorageStatisticalData.TotalIOsRate" }]
   boolean IncludeTotalIOsRate = false;

      [Experimental, Description ( 
          "Whether to include in a filter for a metered element the "
          "count of Write Cache Hits (Writes that went directly to "
          "Cache) per second for that element." ), 
       ModelCorrespondence { 
          "CIM_BlockStorageStatisticalData.WriteHitIOsRate" }]
   boolean IncludeWriteHitIOsRate = false;

      [Experimental, Description ( 
          "Whether to include in a filter for a metered element the "
          "count of all writes per second for tat element." ), 
       ModelCorrespondence { 
          "CIM_BlockStorageStatisticalData.WriteIOsRate" }]
   boolean IncludeWriteIOsRate = false;

      [Experimental, Description ( 
          "Similar description as the ElementType, except for rated data."
           ), 
       ValueMap { "13", "14", "15", "16", "17", "18", "19", "20", 
          "21", "22", "23", "..", "0x8000.." }, 
       Values { "Computer System Rate", 
          "Front-end Computer System Rate", 
          "Peer Computer System Rate", 
          "Back-end Computer System Rate", "Front-end Port Rate", 
          "Back-end Port Rate", "Volume Rate", "Extent Rate", 
          "Disk Drive Rate", "Arbitrary LUs Rate", 
          "Remote Replica Group Rate", "DMTF Reserved", 
          "Vendor Specific" }, 
       ModelCorrespondence { 
          "CIM_BlockStorageStatisticalData.RateElementType" }]
   uint16 RateElementType;


};



   [Version( "2.40.0" ), Description("{0}")]
class UNIX_BlockStatisticsManifest : CIM_BlockStatisticsManifest
{


};

