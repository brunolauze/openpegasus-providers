//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////



// Copyright (c) 2009 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "ManagedElement is an abstract class that provides a common "
       "superclass (or top of the inheritance tree) for the "
       "non-association classes in the CIM Schema." )]
class CIM_ManagedElement {

      [Description ( 
          "InstanceID is an optional property that may be used to "
          "opaquely and uniquely identify an instance of this class "
          "within the scope of the instantiating Namespace. Various "
          "subclasses of this class may override this property to "
          "make it required, or a key. Such subclasses may also "
          "modify the preferred algorithms for ensuring uniqueness "
          "that are defined below.\n"
          "To ensure uniqueness within the NameSpace, the value of "
          "InstanceID should be constructed using the following "
          "\"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If not null and the above "
          "\"preferred\" algorithm is not used, the defining entity "
          "must assure that the resulting InstanceID is not reused "
          "across any InstanceIDs produced by this or other "
          "providers for the NameSpace of this instance. \n"
          "If not set to null for DMTF-defined instances, the "
          "\"preferred\" algorithm must be used with the <OrgID> "
          "set to CIM." )]
   string InstanceID;

      [Description ( 
          "The Caption property is a short textual description "
          "(one- line string) of the object." ), 
       MaxLen ( 64 )]
   string Caption;

      [Description ( 
          "The Description property provides a textual description "
          "of the object." )]
   string Description;

      [Description ( 
          "A user-friendly name for the object. This property "
          "allows each instance to define a user-friendly name in "
          "addition to its key properties, identity data, and "
          "description information. \n"
          "Note that the Name property of ManagedSystemElement is "
          "also defined as a user-friendly name. But, it is often "
          "subclassed to be a Key. It is not reasonable that the "
          "same property can convey both identity and a "
          "user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of "
          "LogicalDevice), the same information can be present in "
          "both the Name and ElementName properties. Note that if "
          "there is an associated instance of "
          "CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask "
          "and MaxElementNameLen properties defined in that class." )]
   string ElementName;

      [Experimental, Description ( 
          "Generation is an optional, monotonically increasing "
          "property that may be used to identify a particular "
          "generation of the resource represented by this class.\n"
          "If Generation is supported by the implementation, its "
          "value shall not be null. \n"
          "Except as otherwise specified, a value (including null) "
          "of Generation specified at creation time shall be "
          "replaced by null if Generation is not supported by the "
          "implementation or shall be a, (possibly different), "
          "non-null value if the implementation does support Generation.\n"
          "After creation and if supported, Generation shall be "
          "updated, at least once per access, whenever the "
          "represented resource is modified, regardless of the "
          "source of the modification.\n"
          "Note: the Generation value only needs to be updated once "
          "between references, even if the resource is updated many "
          "times. The key point is to assure that it will be "
          "different if there have been updates, not to count each update.\n"
          "Note: unless otherwise specified, the value of "
          "Generation within one instance is not required to be "
          "coordinated with the value of Generation in any other instance.\n"
          "Note:the semantics of the instance, (as defined by its "
          "creation class), define the underlying resource. That "
          "underlying resource may be a collection or aggregation "
          "of resources. And, in that case, the semantics of the "
          "instance further define when updates to constituent "
          "resources also require updates to the Generation of the "
          "collective resource. Default behavior of composite "
          "aggregations should be to update the Generation of the "
          "composite whenever the Generation of a component is updated.\n"
          "Subclasses may define additional requirements for "
          "updates on some or all of related instances.\n"
          "For a particular instance, the value of Generation may "
          "wrap through zero, but the elapsed time between wraps "
          "shall be greater than 10\'s of years.\n"
          "This class does not require Generation to be unique "
          "across instances of other classes nor across instances "
          "of the same class that have different keys. Generation "
          "shall be different across power cycles, resets, or "
          "reboots if any of those actions results in an update. "
          "Generation may be different across power cycles, resets, "
          "or reboots if those actions do not result in an update. "
          "If the Generation property of an instance is non-null, "
          "and if any attempt to update the instance includes the "
          "Generation property, then if it doesn\'t match the "
          "current value, the update shall fail.\n"
          "The usage of this property is intended to be further "
          "specified by applicable management profiles. \n"
          "Typically, a client will read the value of this property "
          "and then supply that value as input to an operation that "
          "modifies the instance in some means. This may be via an "
          "explicit parameter in an extrinsic method or via an "
          "embedded value in an extrinsic method or intrinsic operation.\n"
          "For example: a profile may require that an intrinsic "
          "instance modification supply the Generation property and "
          "that it must match for the modification to succeed." )]
   uint64 Generation;


};



// Copyright (c) 2011 DMTF.  All rights reserved.
   [Abstract, Version ( "2.28.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "CIM_ManagedSystemElement is the base class for the System "
       "Element hierarchy. Any distinguishable component of a System "
       "is a candidate for inclusion in this class. Examples of system "
       "components include: \n"
       "- software components such as application servers, databases, "
       "and applications \n"
       "- operating system components such as files, processes, and "
       "threads \n"
       "- device components such as disk drives, controllers, "
       "processors, and printers \n"
       "- physical components such as chips and cards." )]
class CIM_ManagedSystemElement : CIM_ManagedElement {

      [Description ( 
          "A datetime value that indicates when the object was "
          "installed. Lack of a value does not indicate that the "
          "object is not installed." ), 
       MappingStrings { "MIF.DMTF|ComponentID|001.5" }]
   datetime InstallDate;

      [Description ( 
          "The Name property defines the label by which the object "
          "is known. When subclassed, the Name property can be "
          "overridden to be a Key property." ), 
       MaxLen ( 1024 )]
   string Name;

      [Description ( 
          "Indicates the current statuses of the element. Various "
          "operational statuses are defined. Many of the "
          "enumeration\'s values are self-explanatory. However, a "
          "few are not and are described here in more detail. \n"
          "\"Stressed\" indicates that the element is functioning, "
          "but needs attention. Examples of \"Stressed\" states are "
          "overload, overheated, and so on. \n"
          "\"Predictive Failure\" indicates that an element is "
          "functioning nominally but predicting a failure in the "
          "near future. \n"
          "\"In Service\" describes an element being configured, "
          "maintained, cleaned, or otherwise administered. \n"
          "\"No Contact\" indicates that the monitoring system has "
          "knowledge of this element, but has never been able to "
          "establish communications with it. \n"
          "\"Lost Communication\" indicates that the ManagedSystem "
          "Element is known to exist and has been contacted "
          "successfully in the past, but is currently unreachable. \n"
          "\"Stopped\" and \"Aborted\" are similar, although the "
          "former implies a clean and orderly stop, while the "
          "latter implies an abrupt stop where the state and "
          "configuration of the element might need to be updated. \n"
          "\"Dormant\" indicates that the element is inactive or "
          "quiesced. \n"
          "\"Supporting Entity in Error\" indicates that this "
          "element might be \"OK\" but that another element, on "
          "which it is dependent, is in error. An example is a "
          "network service or endpoint that cannot function due to "
          "lower-layer networking problems. \n"
          "\"Completed\" indicates that the element has completed "
          "its operation. This value should be combined with either "
          "OK, Error, or Degraded so that a client can tell if the "
          "complete operation Completed with OK (passed), Completed "
          "with Error (failed), or Completed with Degraded (the "
          "operation finished, but it did not complete OK or did "
          "not report an error). \n"
          "\"Power Mode\" indicates that the element has additional "
          "power model information contained in the Associated "
          "PowerManagementService association. \n"
          "\"Relocating\" indicates the element is being relocated.\n"
          "OperationalStatus replaces the Status property on "
          "ManagedSystemElement to provide a consistent approach to "
          "enumerations, to address implementation needs for an "
          "array property, and to provide a migration path from "
          "today\'s environment to the future. This change was not "
          "made earlier because it required the deprecated "
          "qualifier. Due to the widespread use of the existing "
          "Status property in management applications, it is "
          "strongly recommended that providers or instrumentation "
          "provide both the Status and OperationalStatus "
          "properties. Further, the first value of "
          "OperationalStatus should contain the primary status for "
          "the element. When instrumented, Status (because it is "
          "single-valued) should also provide the primary status of "
          "the element." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11", "12", "13", "14", "15", "16", "17", "18", 
          "19", "..", "0x8000.." }, 
       Values { "Unknown", "Other", "OK", "Degraded", "Stressed", 
          "Predictive Failure", "Error", "Non-Recoverable Error", 
          "Starting", "Stopping", "Stopped", "In Service", 
          "No Contact", "Lost Communication", "Aborted", "Dormant", 
          "Supporting Entity in Error", "Completed", "Power Mode", 
          "Relocating", "DMTF Reserved", "Vendor Reserved" }, 
       ArrayType ( "Indexed" ), 
       ModelCorrespondence { 
          "CIM_ManagedSystemElement.StatusDescriptions" }]
   uint16 OperationalStatus[];

      [Description ( 
          "Strings describing the various OperationalStatus array "
          "values. For example, if \"Stopping\" is the value "
          "assigned to OperationalStatus, then this property may "
          "contain an explanation as to why an object is being "
          "stopped. Note that entries in this array are correlated "
          "with those at the same array index in OperationalStatus." ), 
       ArrayType ( "Indexed" ), 
       ModelCorrespondence { 
          "CIM_ManagedSystemElement.OperationalStatus" }]
   string StatusDescriptions[];

      [Deprecated { "CIM_ManagedSystemElement.OperationalStatus" }, 
       Description ( 
          "A string indicating the current status of the object. "
          "Various operational and non-operational statuses are "
          "defined. This property is deprecated in lieu of "
          "OperationalStatus, which includes the same semantics in "
          "its enumeration. This change is made for 3 reasons: \n"
          "1) Status is more correctly defined as an array. This "
          "definition overcomes the limitation of describing status "
          "using a single value, when it is really a multi-valued "
          "property (for example, an element might be OK AND "
          "Stopped. \n"
          "2) A MaxLen of 10 is too restrictive and leads to "
          "unclear enumerated values. \n"
          "3) The change to a uint16 data type was discussed when "
          "CIM V2.0 was defined. However, existing V1.0 "
          "implementations used the string property and did not "
          "want to modify their code. Therefore, Status was "
          "grandfathered into the Schema. Use of the deprecated "
          "qualifier allows the maintenance of the existing "
          "property, but also permits an improved definition using "
          "OperationalStatus." ), 
       ValueMap { "OK", "Error", "Degraded", "Unknown", "Pred Fail", 
          "Starting", "Stopping", "Service", "Stressed", 
          "NonRecover", "No Contact", "Lost Comm", "Stopped" }, 
       MaxLen ( 10 )]
   string Status;

      [Description ( 
          "Indicates the current health of the element. This "
          "attribute expresses the health of this element but not "
          "necessarily that of its subcomponents. The possible "
          "values are 0 to 30, where 5 means the element is "
          "entirely healthy and 30 means the element is completely "
          "non-functional. The following continuum is defined: \n"
          "\"Non-recoverable Error\" (30) - The element has "
          "completely failed, and recovery is not possible. All "
          "functionality provided by this element has been lost. \n"
          "\"Critical Failure\" (25) - The element is "
          "non-functional and recovery might not be possible. \n"
          "\"Major Failure\" (20) - The element is failing. It is "
          "possible that some or all of the functionality of this "
          "component is degraded or not working. \n"
          "\"Minor Failure\" (15) - All functionality is available "
          "but some might be degraded. \n"
          "\"Degraded/Warning\" (10) - The element is in working "
          "order and all functionality is provided. However, the "
          "element is not working to the best of its abilities. For "
          "example, the element might not be operating at optimal "
          "performance or it might be reporting recoverable errors. \n"
          "\"OK\" (5) - The element is fully functional and is "
          "operating within normal operational parameters and "
          "without error. \n"
          "\"Unknown\" (0) - The implementation cannot report on "
          "HealthState at this time. \n"
          "DMTF has reserved the unused portion of the continuum "
          "for additional HealthStates in the future." ), 
       ValueMap { "0", "5", "10", "15", "20", "25", "30", "..", 
          "32768..65535" }, 
       Values { "Unknown", "OK", "Degraded/Warning", 
          "Minor failure", "Major failure", "Critical failure", 
          "Non-recoverable error", "DMTF Reserved", "Vendor Specific" }]
   uint16 HealthState;

      [Description ( 
          "CommunicationStatus indicates the ability of the "
          "instrumentation to communicate with the underlying "
          "ManagedElement. CommunicationStatus consists of one of "
          "the following values: Unknown, None, Communication OK, "
          "Lost Communication, or No Contact. \n"
          "A Null return indicates the implementation (provider) "
          "does not implement this property. \n"
          "\"Unknown\" indicates the implementation is in general "
          "capable of returning this property, but is unable to do "
          "so at this time. \n"
          "\"Not Available\" indicates that the implementation "
          "(provider) is capable of returning a value for this "
          "property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not "
          "used because it adds no meaningful information (as in "
          "the case of a property that is intended to add "
          "additional info to another property). \n"
          "\"Communication OK \" indicates communication is "
          "established with the element, but does not convey any "
          "quality of service. \n"
          "\"No Contact\" indicates that the monitoring system has "
          "knowledge of this element, but has never been able to "
          "establish communications with it. \n"
          "\"Lost Communication\" indicates that the Managed "
          "Element is known to exist and has been contacted "
          "successfully in the past, but is currently unreachable." ), 
       ValueMap { "0", "1", "2", "3", "4", "..", "0x8000.." }, 
       Values { "Unknown", "Not Available", "Communication OK", 
          "Lost Communication", "No Contact", "DMTF Reserved", 
          "Vendor Reserved" }]
   uint16 CommunicationStatus;

      [Description ( 
          "DetailedStatus compliments PrimaryStatus with additional "
          "status detail. It consists of one of the following "
          "values: Not Available, No Additional Information, "
          "Stressed, Predictive Failure, Error, Non-Recoverable "
          "Error, SupportingEntityInError. Detailed status is used "
          "to expand upon the PrimaryStatus of the element. \n"
          "A Null return indicates the implementation (provider) "
          "does not implement this property. \n"
          "\"Not Available\" indicates that the implementation "
          "(provider) is capable of returning a value for this "
          "property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not "
          "used because it adds no meaningful information (as in "
          "the case of a property that is intended to add "
          "additional info to another property). \n"
          "\"No Additional Information\" indicates that the element "
          "is functioning normally as indicated by PrimaryStatus = "
          "\"OK\". \n"
          "\"Stressed\" indicates that the element is functioning, "
          "but needs attention. Examples of \"Stressed\" states are "
          "overload, overheated, and so on. \n"
          "\"Predictive Failure\" indicates that an element is "
          "functioning normally but a failure is predicted in the "
          "near future. \n"
          "\"Non-Recoverable Error \" indicates that this element "
          "is in an error condition that requires human "
          "intervention. \n"
          "\"Supporting Entity in Error\" indicates that this "
          "element might be \"OK\" but that another element, on "
          "which it is dependent, is in error. An example is a "
          "network service or endpoint that cannot function due to "
          "lower-layer networking problems." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "..", "0x8000.." }, 
       Values { "Not Available", "No Additional Information", 
          "Stressed", "Predictive Failure", "Non-Recoverable Error", 
          "Supporting Entity in Error", "DMTF Reserved", 
          "Vendor Reserved" }, 
       ModelCorrespondence { 
          "CIM_EnabledLogicalElement.PrimaryStatus", 
          "CIM_ManagedSystemElement.HealthState" }]
   uint16 DetailedStatus;

      [Description ( 
          "OperatingStatus provides a current status value for the "
          "operational condition of the element and can be used for "
          "providing more detail with respect to the value of "
          "EnabledState. It can also provide the transitional "
          "states when an element is transitioning from one state "
          "to another, such as when an element is transitioning "
          "between EnabledState and RequestedState, as well as "
          "other transitional conditions.\n"
          "OperatingStatus consists of one of the following values: "
          "Unknown, Not Available, In Service, Starting, Stopping, "
          "Stopped, Aborted, Dormant, Completed, Migrating, "
          "Emmigrating, Immigrating, Snapshotting. Shutting Down, "
          "In Test \n"
          "A Null return indicates the implementation (provider) "
          "does not implement this property. \n"
          "\"Unknown\" indicates the implementation is in general "
          "capable of returning this property, but is unable to do "
          "so at this time. \n"
          "\"None\" indicates that the implementation (provider) is "
          "capable of returning a value for this property, but not "
          "ever for this particular piece of hardware/software or "
          "the property is intentionally not used because it adds "
          "no meaningful information (as in the case of a property "
          "that is intended to add additional info to another "
          "property). \n"
          "\"Servicing\" describes an element being configured, "
          "maintained, cleaned, or otherwise administered. \n"
          "\"Starting\" describes an element being initialized. \n"
          "\"Stopping\" describes an element being brought to an "
          "orderly stop. \n"
          "\"Stopped\" and \"Aborted\" are similar, although the "
          "former implies a clean and orderly stop, while the "
          "latter implies an abrupt stop where the state and "
          "configuration of the element might need to be updated. \n"
          "\"Dormant\" indicates that the element is inactive or "
          "quiesced. \n"
          "\"Completed\" indicates that the element has completed "
          "its operation. This value should be combined with either "
          "OK, Error, or Degraded in the PrimaryStatus so that a "
          "client can tell if the complete operation Completed with "
          "OK (passed), Completed with Error (failed), or Completed "
          "with Degraded (the operation finished, but it did not "
          "complete OK or did not report an error). \n"
          "\"Migrating\" element is being moved between host "
          "elements. \n"
          "\"Immigrating\" element is being moved to new host "
          "element. \n"
          "\"Emigrating\" element is being moved away from host "
          "element. \n"
          "\"Shutting Down\" describes an element being brought to "
          "an abrupt stop. \n"
          "\"In Test\" element is performing test functions. \n"
          "\"Transitioning\" describes an element that is between "
          "states, that is, it is not fully available in either its "
          "previous state or its next state. This value should be "
          "used if other values indicating a transition to a "
          "specific state are not applicable.\n"
          "\"In Service\" describes an element that is in service "
          "and operational." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11", "12", "13", "14", "15", "16", "..", "0x8000.." }, 
       Values { "Unknown", "Not Available", "Servicing", "Starting", 
          "Stopping", "Stopped", "Aborted", "Dormant", "Completed", 
          "Migrating", "Emigrating", "Immigrating", "Snapshotting", 
          "Shutting Down", "In Test", "Transitioning", "In Service", 
          "DMTF Reserved", "Vendor Reserved" }, 
       ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState" }]
   uint16 OperatingStatus;

      [Description ( 
          "PrimaryStatus provides a high level status value, "
          "intended to align with Red-Yellow-Green type "
          "representation of status. It should be used in "
          "conjunction with DetailedStatus to provide high level "
          "and detailed health status of the ManagedElement and its "
          "subcomponents. \n"
          "PrimaryStatus consists of one of the following values: "
          "Unknown, OK, Degraded or Error. \"Unknown\" indicates "
          "the implementation is in general capable of returning "
          "this property, but is unable to do so at this time. \n"
          "\"OK\" indicates the ManagedElement is functioning "
          "normally. \n"
          "\"Degraded\" indicates the ManagedElement is functioning "
          "below normal. \n"
          "\"Error\" indicates the ManagedElement is in an Error "
          "condition." ), 
       ValueMap { "0", "1", "2", "3", "..", "0x8000.." }, 
       Values { "Unknown", "OK", "Degraded", "Error", 
          "DMTF Reserved", "Vendor Reserved" }, 
       ModelCorrespondence { 
          "CIM_ManagedSystemElement.DetailedStatus", 
          "CIM_ManagedSystemElement.HealthState" }]
   uint16 PrimaryStatus;


};



// Copyright (c) 2005 DMTF.  All rights reserved.
   [Abstract, Version ( "2.6.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "CIM_LogicalElement is a base class for all the components of a "
       "System that represent abstract system components, such as "
       "Files, Processes, or LogicalDevices." )]
class CIM_LogicalElement : CIM_ManagedSystemElement {


};



// Copyright (c) 2009 DMTF.  All rights reserved.
   [Version ( "2.22.0" ), 
    UMLPackagePath ( "CIM::Core::Resource" ), 
    Description ( 
       "A ResourcePool is a logical entity (with associated "
       "controls)provided by the host system for the purpose of "
       "allocation and assignment of resources. A given ResourcePool "
       "may be used to allocate resources of a specific type. "
       "Hierarchies of ResourcePools may be created to provide "
       "administrative control over allocations. In the cases where "
       "resources are subdivided, multiple resource pools may exist "
       "(e.g. nodal boundaries in NUMA-like systems). In systems that "
       "support over commitment, pools represent the reservable "
       "capacity, not an upper bound or limit on the maximum amount "
       "that can be allocated. Admission control during power on may "
       "detect and prevent systems from powering due to resource "
       "exhaustion. For example, over commitment on a ResourcePool "
       "with ResourceType=Memory would require that sufficient space "
       "be available in some backing-store, that may be managed "
       "through a storage ResourcePool." )]
class CIM_ResourcePool : CIM_LogicalElement {

      [Key, Override ( "InstanceID" ), 
       Description ( 
          "Within the scope of the instantiating Namespace, "
          "InstanceID opaquely and uniquely identifies an instance "
          "of this class. To ensure uniqueness within the "
          "NameSpace, the value of InstanceID should be constructed "
          "using the following \"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If the above \"preferred\" "
          "algorithm is not used, the defining entity must ensure "
          "that the resulting InstanceID is not reused across any "
          "InstanceIDs produced by this or other providers for the "
          "NameSpace of this instance. \n"
          "For DMTF-defined instances, the \"preferred\" algorithm "
          "must be used with the <OrgID> set to CIM." )]
   string InstanceID;

      [Description ( 
          "An opaque identifier for the pool. This property is used "
          "to provide correlation across save and restore of "
          "configuration data to underlying persistent storage." ), 
       ModelCorrespondence { 
          "CIM_ResourceAllocationSettingData.PoolId" }]
   string PoolID;

      [Description ( 
          "If true, \"Primordial\" indicates that this ResourcePool "
          "is a base from which resources are drawn and returned in "
          "the activity of resource management. Being primordial "
          "means that this ResourcePool shall not be created or "
          "deleted by consumers of this model. However, other "
          "actions, modeled or not, may affect the characteristics "
          "or size of primordial ResourcePools. If false, "
          "\"Primordial\" indicates that the ResourcePool, a "
          "concrete Resource Pool, is subject to resource "
          "allocation services functions. This distinction is "
          "important because higher-level ResourcePools may be "
          "assembled using the Component or "
          "ElementAllocatedFromPool associations. Although the "
          "higher-level abstractions can be created and deleted, "
          "the most basic, (i.e. primordial), hardware-based "
          "ResourcePools cannot. They are physically realized as "
          "part of the System, or are actually managed by some "
          "other System and imported as if they were physically "
          "realized." )]
   boolean Primordial = false;

      [Description ( 
          "This property represents the maximum amount (in units of "
          "AllocationUnits) of reservations that the ResourcePool "
          "can support." )]
   uint64 Capacity;

      [Description ( 
          "This property represents the current reservations (in "
          "units of AllocationUnits) spread across all active "
          "allocations from this pool. In a hierarchical "
          "configuration, this represents the sum of all descendant "
          "ResourcePool current reservations." )]
   uint64 Reserved;

      [Description ( 
          "The type of resource this ResourcePool may allocate." ), 
       ValueMap { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", 
          "11", "12", "13", "14", "15", "16", "17", "18", "19", 
          "20", "21", "22", "23", "24", "25", "26", "27", "28", 
          "29", "30", "31", "32", "33", "..", "0x8000..0xFFFF" }, 
       Values { "Other", "Computer System", "Processor", "Memory", 
          "IDE Controller", "Parallel SCSI HBA", "FC HBA", 
          "iSCSI HBA", "IB HCA", "Ethernet Adapter", 
          "Other Network Adapter", "I/O Slot", "I/O Device", 
          "Floppy Drive", "CD Drive", "DVD drive", "Disk Drive", 
          "Tape Drive", "Storage Extent", "Other storage device", 
          "Serial port", "Parallel port", "USB Controller", 
          "Graphics controller", "IEEE 1394 Controller", 
          "Partitionable Unit", "Base Partitionable Unit", "Power", 
          "Cooling Capacity", "Ethernet Switch Port", 
          "Logical Disk", "Storage Volume", "Ethernet Connection", 
          "DMTF reserved", "Vendor Reserved" }, 
       ModelCorrespondence { "CIM_ResourcePool.OtherResourceType", 
          "CIM_ResourcePool.ResourceSubType" }]
   uint16 ResourceType;

      [Description ( 
          "A string that describes the resource type when a well "
          "defined value is not available and ResourceType is set "
          "to 0 for Other." ), 
       ModelCorrespondence { "CIM_ResourcePool.ResourceType" }]
   string OtherResourceType;

      [Description ( 
          "A string describing an implementation specific sub-type "
          "for this pool. For example, this may be used to "
          "distinguish different models of the same resource type." ), 
       ModelCorrespondence { "CIM_ResourcePool.ResourceType" }]
   string ResourceSubType;

      [Description ( 
          "This property specifies the units of allocation used by "
          "the Reservation and Limit properties. For example, when "
          "ResourceType=Processor, AllocationUnits may be set to "
          "hertz*10^6 or percent. When ResourceType=Memory, "
          "AllocationUnits may be set to bytes*10^3. The value of "
          "this property shall be a legal value of the Programmatic "
          "Units qualifier as defined in Appendix C.1 of DSP0004 "
          "V2.4 or later." ), 
       IsPUnit]
   string AllocationUnits;

      [Description ( 
          "This property specifies the units for the MaxConsumable "
          "and the Consumed properties." ), 
       ModelCorrespondence { 
          "CIM_ResourcePool.MaxConsumableResource", 
          "CIM_ResourcePool.CurrentlyConsumedResource" }, 
       IsPUnit]
   string ConsumedResourceUnits = "count";

      [Description ( 
          "This property specifies the amount of resource that the "
          "resource pool currently presents to consumers.\n"
          "This property is different from the Reserved property in "
          "that it describes the consumers view of the resource "
          "while the Reserved property describes the producers view "
          "of the resource." ), 
       ModelCorrespondence { "CIM_ResourcePool.ConsumedResourceUnits" }]
   uint64 CurrentlyConsumedResource;

      [Description ( 
          "This property specifies the maximum of amount of "
          "consumable resource that the resource pool can present "
          "to consumers.\n"
          "This property is different from the Capacity property in "
          "that it describes the consumers view of the resource "
          "while the Capacity property describes the producers view "
          "of the resource." ), 
       ModelCorrespondence { "CIM_ResourcePool.ConsumedResourceUnits" }]
   uint64 MaxConsumableResource;


};



// Copyright (c) 2013 DMTF.  All rights reserved.
   [Version ( "2.37.0" ), 
    UMLPackagePath ( "CIM::Device::StorageServices" ), 
    Description ( 
       "A StoragePool is a conglomeration of storage capacity for the "
       "purpose of assignment and allocation based on service "
       "characteristics, such as location, available space or other "
       "criteria (for example, cost per megabyte or hardware "
       "ownership). A StoragePool is managed within the scope of a "
       "particular System. StoragePools may consist of component "
       "StoragePools or StorageExtents. StorageExtents that belong to "
       "the StoragePool have a Component relationship to the "
       "StoragePool. StorageExtents/StoragePools that are elements of "
       "a pool have their available space aggregated into the pool. "
       "StoragePools, StorageVolumes and LogicalDisks may be created "
       "from StoragePools. This is indicated by the "
       "AllocatedFromStoragePool association. StoragePool is scoped to "
       "a system by the HostedStoragePool association." )]
class CIM_StoragePool : CIM_ResourcePool {

      [Key, Override ( "InstanceID" ), 
       Description ( 
          "Within the scope of the instantiating Namespace, "
          "InstanceID opaquely and uniquely identifies an instance "
          "of this class. In order to ensure uniqueness within the "
          "NameSpace, the value of InstanceID SHOULD be constructed "
          "using the following \'preferred\' algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "\':\', and where <OrgID> MUST include a copyrighted, "
          "trademarked or otherwise unique name that is owned by "
          "the business entity creating/defining the InstanceID, or "
          "is a registered ID that is assigned to the business "
          "entity by a recognized global authority (This is similar "
          "to the <Schema Name>_<Class Name> structure of Schema "
          "class names.) In addition, to ensure uniqueness <OrgID> "
          "MUST NOT contain a colon (\':\'). When using this "
          "algorithm, the first colon to appear in InstanceID MUST "
          "appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and SHOULD "
          "not be re-used to identify different underlying "
          "(real-world) elements. If the above \'preferred\' "
          "algorithm is not used, the defining entity MUST assure "
          "that the resultant InstanceID is not re-used across any "
          "InstanceIDs produced by this or other providers for this "
          "instance\'s NameSpace. \n"
          "For DMTF defined instances, the \'preferred\' algorithm "
          "MUST be used with the <OrgID> set to \'CIM\'." )]
   string InstanceID;

      [Required, Override ( "PoolID" ), 
       Description ( 
          "A unique name in the context of the System that "
          "identifies this pool." ), 
       MaxLen ( 256 )]
   string PoolID;

      [Override ( "Primordial" ), 
       Description ( 
          "If true, \"Primordial\" indicates that this StoragePool "
          "is the base from which storage capacity is drawn and "
          "returned in the activity of storage management. Being "
          "primordial means that this StoragePool shall not be "
          "created or deleted by consumers of this model. However, "
          "other actions, modeled or not, may affect the "
          "characteristics or size of primordial StoragePools. If "
          "false, \"Primordial\" indicated that the StoragePool, a "
          "concrete Storage Pool, is subject to storage services "
          "functions. This distinction is important because "
          "higher-level StoragePools may be assembled using the "
          "Component or AllocatedFromStoragePool associations. "
          "Although the higher-level abstractions can be created "
          "and deleted, the most basic, (i.e. primordial), "
          "hardware-based StoragePools cannot. They are physically "
          "realized as part of the System, or are actually managed "
          "by some other System and imported as if they were "
          "physically realized." )]
   boolean Primordial = false;

      [Description ( 
          "The total amount of capacity usable for the allocation "
          "of StorageVolumes, LogicalDisks, or child Storage Pools. \n"
          "For primordial Storage Pools, this capacity reflects the "
          "usable capacity of Disk Drives or LUNs, for example, to "
          "the owning storage device or application. For example, "
          "in storage array, a primordial Storage Pool\'s "
          "TotalManagedSpace does not include metadata such as the "
          "disk label area and absolute disk drive capacity lost in "
          "disk formatting. \n"
          "For concrete Storage Pools, the same applies, but the "
          "metadata not included in TotalManagedSpace is consumed "
          "in virtualization like RAID and concatenation. Concrete "
          "Storage Pool may also be simple reserve of capacity. In "
          "such a case, no capacity may be lost in formation of the "
          "Storage Pool. \n"
          "Conceptually TotalManagedSpace is the sum of all storage "
          "known via AssociatedComponentExtent associations to "
          "underlying StorageExtents. However, note some of these "
          "underlying storage may not be modeled by the "
          "instrumentation." ), 
       Units ( "Bytes" ), 
       ModelCorrespondence { "CIM_StoragePool.RemainingManagedSpace" }, 
       PUnit ( "byte" )]
   uint64 TotalManagedSpace;

      [Required, Description ( 
          "The remaining usable capacity after the allocation of "
          "StorageVolumes, LogicalDisks, or child Storage Pools. "
          "This property is maintained here to provide efficient "
          "access to this information. However, note that it is "
          "possible to compute RemainingManagedSpace as "
          "(TotalManagedSpace minus the sum of SpaceConsumed from "
          "all of the AllocatedFromStoragePool references from this "
          "StoragePool). Note that SpaceConsumed remains useful to "
          "determine the amount of capacity consumed by a "
          "particular allocated element." ), 
       Units ( "Bytes" ), 
       ModelCorrespondence { "CIM_StoragePool.TotalManagedSpace", 
          "CIM_AllocatedFromStoragePool.SpaceConsumed" }, 
       PUnit ( "byte" )]
   uint64 RemainingManagedSpace;

      [Experimental, Description ( 
          "LowSpaceWarningThreshold simplifies the creation of a "
          "pool specific Indication based on RemainingManagedSpace "
          "<= \n"
          "(TotalManagedSpace*LowSpaceWarningThreshold)/100. One "
          "example client for an Indication based on this property "
          "is a delta copy implementation where the pool enables "
          "continuous, variable space consumption for the delta "
          "storage. Another example client for an Indication based "
          "on this property is a provisioning manager implementing "
          "a policy for adding storage to a pool when it becomes "
          "low." ), 
       Units ( "Percentage" ), 
       MinValue ( 0 ), 
       MaxValue ( 100 ), 
       ModelCorrespondence { "CIM_StoragePool.RemainingManagedSpace" }, 
       PUnit ( "percent" )]
   uint16 LowSpaceWarningThreshold;

      [Experimental, Description ( 
          "Indicates the intended usage or any restrictions that "
          "may have been imposed on the usage of this component. "
          "For example, a storage pool may be reserved for use by "
          "the block server. In that case the Usage of the storage "
          "pool is marked as \"Reserved for the ComputerSystem\". "
          "In the case of \"Other\", see OtherUsageDescription for "
          "more information." ), 
       ValueMap { "1", "2", "3", "4", "5", "6", "7", "8", "..", 
          "32768..65535" }, 
       Values { "Other", "Unrestricted", 
          "Reserved for ComputerSystem (the block server)", 
          "Reserved as a Delta Replica Container", 
          "Reserved for Migration Services", 
          "Reserved for Local Replication Services", 
          "Reserved for Remote Replication Services", 
          "Reserved for Sparing", "DMTF Reserved", "Vendor Reserved" }, 
       ModelCorrespondence { "CIM_StoragePool.OtherUsageDescription" }]
   uint16 Usage;

      [Experimental, Description ( 
          "Populated when \"Usage\" has the value of \"Other\"." ), 
       ModelCorrespondence { "CIM_StoragePool.Usage" }]
   string OtherUsageDescription;

      [Experimental, Description ( 
          "Indicates which values from the \"Usage\" valuemap can "
          "be manipulated by a client using the method "
          "\"StorageConfigurationService.RequestUsageChange\"." ), 
       ModelCorrespondence { "CIM_StoragePool.Usage" }]
   uint16 ClientSettableUsage[];

      [Experimental, Description ( 
          "The total capacity of extents in migrating out from this "
          "storage pool" ), 
       Units ( "Bytes" )]
   uint64 CapacityInMigratingSource;

      [Experimental, Description ( 
          "The total capacity of extents in migrating into this storage pool"
           ), 
       Units ( "Bytes" )]
   uint64 CapacityInMigratingTarget;

      [Experimental, Description ( 
          "The capacity of the storage allocated to the pool when "
          "SpaceLimitDetermination has the value 3 (Quota) or 4 "
          "(Limitless) or is set to the value of TotalManagedSpace "
          "if SpaceLimitDetermination has the value 2 (Allocated)." ), 
       Units ( "Bytes" ), 
       PUnit ( "byte" )]
   uint64 SpaceLimit;

      [Experimental, Description ( 
          "This property is the Subsystem ID if the array or "
          "virtualizer supports Subsystem IDs. If they are "
          "supported they would be required on volume creation." ), 
       ValueMap { "2", "3", "4" }, 
       Values { "Allocated", "Quote", "Limitless" }]
   uint16 SpaceLimitDetermination;

      [Experimental, Description ( 
          "The size of metadata consumed by this storage pool. Only "
          "defined if the pool is thin provisioned." ), 
       Units ( "Bytes" ), 
       PUnit ( "byte" )]
   uint64 ThinProvisionMetaDataSpace;

      [Experimental, Description ( 
          "If true, it indicates elements allocated from the "
          "storage pool are sharing space from the storage pool. "
          "For example, multiple snapshots \"allocated\" from a "
          "storage pool, point to the same blocks of the storage "
          "pool. As another example, elements utilizing "
          "de-duplication technology refer to a shared copy of the "
          "data stored in the storage pool." )]
   boolean ElementsShareSpace = false;

      [Experimental, Description ( 
          "The amount of capacity used by the storage pool to store "
          "information about the configuration of the storage pool. "
          "The space is not included in the TotalManagedSpace of "
          "the storage pool." ), 
       Units ( "Bytes" ), 
       ModelCorrespondence { "CIM_StoragePool.TotalManagedSpace" }, 
       PUnit ( "byte" )]
   uint64 ReservedSpace;


      [Description ( 
          "For pools that that support a range of sizes for volume "
          "or pool creation, this method can be used to retrieve "
          "the supported range. Note that different pool "
          "implementations may support either or both the "
          "GetSupportedSizes and GetSupportedSizeRanges methods at "
          "different times, depending on Pool configuration. Also "
          "note that the advertised sizes may change after the call "
          "due to requests from other clients. If the pool "
          "currently only supports discrete sizes, then the return "
          "value will be set to 1." ), 
       ValueMap { "0", "1", "2", "3" }, 
       Values { "Method completed OK", "Method not supported", 
          "Use GetSupportedSizes instead", "Invalid Element Type" }]
   uint32 GetSupportedSizes(
         [Experimental, IN, Description ( 
             "The type of element for which supported sizes are "
             "reported. The Thin Provision values are only "
             "supported when the Thin Provisioning Profile is "
             "supported; the resulting StorageVolues/LogicalDisk "
             "shall have ThinlyPprovisioned set to true." ), 
          ValueMap { "2", "3", "4", "5", "6" }, 
          Values { "Storage Pool", "Storage Volume", 
             "Logical Disk", "Thin Provisioned Volume", 
             "Thin Provisioned Logical Disk" }]
      uint16 ElementType, 
         [IN, Description ( 
             "The StorageSetting for which supported sizes "
             "should be reported for." )]
      CIM_StorageSetting REF Goal, 
         [IN, OUT, Description ( 
             "List of supported sizes for a Volume/Pool creation "
             "or modification." ), 
          Units ( "Bytes" ), 
          PUnit ( "byte" )]
      uint64 Sizes[]);

      [Description ( 
          "For pools that that support a range of sizes for volume "
          "or pool creation, this method can be used to retrieve "
          "the supported range. Note that different pool "
          "implementations may support either or both the "
          "GetSupportedSizes and GetSupportedSizeRanges methods at "
          "different times, depending on Pool configuration. Also "
          "note that the advertised sizes may change after the call "
          "due to requests from other clients. If the pool "
          "currently only supports discrete sizes, then the return "
          "value will be set to 1." ), 
       ValueMap { "0", "1", "2", "3" }, 
       Values { "Method completed OK", "Method not supported", 
          "Use GetSupportedSizes instead", "Invalid Element Type" }]
   uint32 GetSupportedSizeRange(
         [Experimental, IN, Description ( 
             "The type of element for which supported size "
             "ranges are reported. The Thin Provision values are "
             "only supported when the Thin Provisioning Profile "
             "is supported; the resulting "
             "StorageVolues/LogicalDisk shall have "
             "ThinlyPprovisioned set to true." ), 
          ValueMap { "2", "3", "4", "5", "6" }, 
          Values { "Storage Pool", "Storage Volume", 
             "Logical Disk", "Thin Provisioned Volume", 
             "Thin Provisioned Logical Disk" }]
      uint16 ElementType, 
         [IN, Description ( 
             "The StorageSetting for which supported size ranges "
             "should be reported for." )]
      CIM_StorageSetting REF Goal, 
         [IN, OUT, Description ( 
             "The minimum size for a volume/pool in bytes." ), 
          Units ( "Bytes" ), 
          PUnit ( "byte" )]
      uint64 MinimumVolumeSize, 
         [IN, OUT, Description ( 
             "The maximum size for a volume/pool in bytes." ), 
          Units ( "Bytes" ), 
          PUnit ( "byte" )]
      uint64 MaximumVolumeSize, 
         [IN, OUT, Description ( 
             "A volume/pool size must be a multiple of this "
             "value which is specified in bytes." ), 
          Units ( "Bytes" ), 
          PUnit ( "byte" )]
      uint64 VolumeSizeDivisor);

      [Description ( 
          "This method can be used to retrieve a list of available "
          "Extents that may be used in the creation or modification "
          "of a StoragePool, StorageVolume, or LogicalDisk. The "
          "GetAvailableExtents method MUST return the Extents from "
          "the set of Component Extents of the Pool on which the "
          "method is being invoked. The returned Extents are "
          "available at the time the method returns. There is no "
          "guarantee that the same Extents will be available later. "
          "This method MUST return the Extents that are not being "
          "used as supporting capacity for any other Pools, "
          "Volumes, or LogicalDisks that have been allocated from "
          "this Pool. The Extent returned MUST be a component "
          "Extent of the Pool or subdivisions of a component "
          "Extent, the subdivisions themselves represented as "
          "Extents." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", 
          "4098..32767", "32768..65535" }, 
       Values { "Completed with No Error", "Not Supported", 
          "Unknown", "Timeout", "Failed", "Invalid Parameter", 
          "In Use", "DMTF Reserved", "Method Reserved", 
          "Vendor Specific" }]
   uint32 GetAvailableExtents(
         [IN, Description ( 
             "The StorageSetting (Goal) for which supported "
             "extents should be retrieved as available. \n"
             "If a NULL is passed for the Goal, the method will "
             "return all available extents, regardless of the "
             "goal. There exists a possibility of error in "
             "creating a Pool, Volume, or LogicalDisk retrieved "
             "in this manner." )]
      CIM_StorageSetting REF Goal, 
         [OUT, Description ( 
             "List of references to available StorageExtents, or "
             "subclass instances." )]
      CIM_StorageExtent REF AvailableExtents[]);

};



   [Version( "2.40.0" ), Description("{0}")]
class UNIX_StoragePool : CIM_StoragePool
{


};

