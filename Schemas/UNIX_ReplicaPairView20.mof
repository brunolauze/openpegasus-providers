//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////



// Copyright (c) 2009 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "ManagedElement is an abstract class that provides a common "
       "superclass (or top of the inheritance tree) for the "
       "non-association classes in the CIM Schema." )]
class CIM_ManagedElement {

      [Description ( 
          "InstanceID is an optional property that may be used to "
          "opaquely and uniquely identify an instance of this class "
          "within the scope of the instantiating Namespace. Various "
          "subclasses of this class may override this property to "
          "make it required, or a key. Such subclasses may also "
          "modify the preferred algorithms for ensuring uniqueness "
          "that are defined below.\n"
          "To ensure uniqueness within the NameSpace, the value of "
          "InstanceID should be constructed using the following "
          "\"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If not null and the above "
          "\"preferred\" algorithm is not used, the defining entity "
          "must assure that the resulting InstanceID is not reused "
          "across any InstanceIDs produced by this or other "
          "providers for the NameSpace of this instance. \n"
          "If not set to null for DMTF-defined instances, the "
          "\"preferred\" algorithm must be used with the <OrgID> "
          "set to CIM." )]
   string InstanceID;

      [Description ( 
          "The Caption property is a short textual description "
          "(one- line string) of the object." ), 
       MaxLen ( 64 )]
   string Caption;

      [Description ( 
          "The Description property provides a textual description "
          "of the object." )]
   string Description;

      [Description ( 
          "A user-friendly name for the object. This property "
          "allows each instance to define a user-friendly name in "
          "addition to its key properties, identity data, and "
          "description information. \n"
          "Note that the Name property of ManagedSystemElement is "
          "also defined as a user-friendly name. But, it is often "
          "subclassed to be a Key. It is not reasonable that the "
          "same property can convey both identity and a "
          "user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of "
          "LogicalDevice), the same information can be present in "
          "both the Name and ElementName properties. Note that if "
          "there is an associated instance of "
          "CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask "
          "and MaxElementNameLen properties defined in that class." )]
   string ElementName;

      [Experimental, Description ( 
          "Generation is an optional, monotonically increasing "
          "property that may be used to identify a particular "
          "generation of the resource represented by this class.\n"
          "If Generation is supported by the implementation, its "
          "value shall not be null. \n"
          "Except as otherwise specified, a value (including null) "
          "of Generation specified at creation time shall be "
          "replaced by null if Generation is not supported by the "
          "implementation or shall be a, (possibly different), "
          "non-null value if the implementation does support Generation.\n"
          "After creation and if supported, Generation shall be "
          "updated, at least once per access, whenever the "
          "represented resource is modified, regardless of the "
          "source of the modification.\n"
          "Note: the Generation value only needs to be updated once "
          "between references, even if the resource is updated many "
          "times. The key point is to assure that it will be "
          "different if there have been updates, not to count each update.\n"
          "Note: unless otherwise specified, the value of "
          "Generation within one instance is not required to be "
          "coordinated with the value of Generation in any other instance.\n"
          "Note:the semantics of the instance, (as defined by its "
          "creation class), define the underlying resource. That "
          "underlying resource may be a collection or aggregation "
          "of resources. And, in that case, the semantics of the "
          "instance further define when updates to constituent "
          "resources also require updates to the Generation of the "
          "collective resource. Default behavior of composite "
          "aggregations should be to update the Generation of the "
          "composite whenever the Generation of a component is updated.\n"
          "Subclasses may define additional requirements for "
          "updates on some or all of related instances.\n"
          "For a particular instance, the value of Generation may "
          "wrap through zero, but the elapsed time between wraps "
          "shall be greater than 10\'s of years.\n"
          "This class does not require Generation to be unique "
          "across instances of other classes nor across instances "
          "of the same class that have different keys. Generation "
          "shall be different across power cycles, resets, or "
          "reboots if any of those actions results in an update. "
          "Generation may be different across power cycles, resets, "
          "or reboots if those actions do not result in an update. "
          "If the Generation property of an instance is non-null, "
          "and if any attempt to update the instance includes the "
          "Generation property, then if it doesn\'t match the "
          "current value, the update shall fail.\n"
          "The usage of this property is intended to be further "
          "specified by applicable management profiles. \n"
          "Typically, a client will read the value of this property "
          "and then supply that value as input to an operation that "
          "modifies the instance in some means. This may be via an "
          "explicit parameter in an extrinsic method or via an "
          "embedded value in an extrinsic method or intrinsic operation.\n"
          "For example: a profile may require that an intrinsic "
          "instance modification supply the Generation property and "
          "that it must match for the modification to succeed." )]
   uint64 Generation;


};



// Copyright (c) 2010 DMTF.  All rights reserved.
   [Abstract, Version ( "2.26.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "View is an abstract class that provides a common superclass "
       "for classes providing de-normalized, aggregate representations "
       "of managed resources. The definition of each sub-class will "
       "include properties propagated from the the graph of classes "
       "that are used to model the resource in the normalized view. "
       "The classes may be resource classes or associations. The "
       "definition of how a value is propagated (i.e. source class and "
       "value transformations) is required to be specified. \n"
       "Sub-classes may be explicitly constrained to be read only. If "
       "a sub-class is not constrained as read only, the designers are "
       "strongly encouraged to carefully consider the data "
       "synchronization and consistencies issues that may result. The "
       "ElementView association may be used to find the instances that "
       "form the normalized view of the managed resource." )]
class CIM_View : CIM_ManagedElement {


};



// Copyright (c) 2011 DMTF.  All rights reserved.
   [Experimental, Abstract, Version ( "2.29.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "LogicalDeviceView is an abstract class that provides a common "
       "superclass for view classes that primarily represent logical "
       "devices. The definition of each sub-class will include "
       "properties propagated from the the graph of classes that are "
       "used to model the resource in the normalized view." )]
class CIM_LogicalDeviceView : CIM_View {


};



// Copyright (c) 2011 DMTF.  All rights reserved.
   [Experimental, Version ( "2.29.0" ), 
    UMLPackagePath ( "CIM::Device::Views" ), 
    Description ( 
       "The CIM_ReplicaView instance is a view that is derived from a "
       "source and target CIM_StorageVolume (or CIM_LogicalDisk) and a "
       "CIM_StorageSynchronized association between them.\n"
       "CIM_ElementView may associate CIM_ReplicaPairView to its "
       "underlying elements (regardless of whether or not they are "
       "instantiated)." )]
class CIM_ReplicaPairView : CIM_LogicalDeviceView {

      [Description ( 
          "The SystemCreationClassName for the source StorageVolume "
          "as reported in the underlying source StorageVolume "
          "instance." ), 
       ModelCorrespondence { 
          "CIM_StorageVolume.SystemCreationClassName" }]
   string SVSourceSystemCreationClassName;

      [Description ( 
          "The SystemName for the source StorageVolume as reported "
          "in the underlying source StorageVolume instance." ), 
       ModelCorrespondence { "CIM_StorageVolume.SystemName" }]
   string SVSourceSystemName;

      [Description ( 
          "The CreationClassName for the source StorageVolume as "
          "reported in the underlying source StorageVolume "
          "instance." ), 
       ModelCorrespondence { "CIM_StorageVolume.CreationClassName" }]
   string SVSourceCreationClassName;

      [Description ( 
          "An opaque identifier of the underlying source "
          "StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.DeviceID" }]
   string SVSourceDeviceID;

      [Description ( 
          "The identifier for the underlying source StorageVolume "
          "(or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.Name" }]
   string SVSourceName;

      [Description ( 
          "The format of the identifier for the underlying source "
          "StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.NameFormat" }]
   uint16 SVSourceNameFormat;

      [Description ( 
          "The NameNamespace as reported in the underlying source "
          "StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.NameNamespace" }]
   uint16 SVSourceNameNamespace;

      [Description ( 
          "The ExtentStatus as reported in the underlying source "
          "StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.ExtentStatus" }]
   uint16 SVSourceExtentStatus[];

      [Description ( 
          "The OperationalStatus as reported in the underlying "
          "source StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.OperationalStatus" }]
   uint16 SVSourceOperationalStatus[];

      [Description ( 
          "The BlockSize for the source StorageVolume as reported "
          "in the underlying source StorageVolume instance." ), 
       ModelCorrespondence { "CIM_StorageVolume.BlockSize" }]
   uint64 SVSourceBlockSize;

      [Description ( 
          "The number of blocks that make up the volume as reported "
          "in the underlying source StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.NumberOfBlocks" }]
   uint64 SVSourceNumberOfBlocks;

      [Description ( 
          "The number of usable blocks in the volume as reported in "
          "the underlying source StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.ConsumableBlocks" }]
   uint64 SVSourceConsumableBlocks;

      [Description ( 
          "The Primordial property for the underlying source "
          "StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.Primordial" }]
   boolean SVSourcePrimordial;

      [Description ( 
          "Whether or not redundancy is supported for the volume as "
          "reported in the underlying source StorageVolume (or "
          "LogicalDisk)." ), 
       ModelCorrespondence { 
          "CIM_StorageVolume.IsBasedOnUnderlyingRedundancy" }]
   boolean SVSourceIsBasedOnUnderlyingRedundancy;

      [Description ( 
          "Whether or not NoSinglePointOfFailure is supported for "
          "the volume as reported in the underlying source "
          "StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { 
          "CIM_StorageVolume.NoSinglePointOfFailure" }]
   boolean SVSourceNoSinglePointOfFailure;

      [Description ( 
          "The DataRedundancy supported by the volume as reported "
          "in the underlying source StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.DataRedundancy" }]
   uint16 SVSourceDataRedundancy;

      [Description ( 
          "The PackageRedundancy supported by the volume as "
          "reported in the underlying source StorageVolume (or "
          "LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.PackageRedundancy" }]
   uint16 SVSourcePackageRedundancy;

      [Description ( 
          "The DeltaReservation supported by the volume as reported "
          "in the underlying source StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.DeltaReservation" }]
   uint8 SVSourceDeltaReservation;

      [Experimental, Description ( 
          "The ExtentDiscriminator property for the underlying "
          "source StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.ExtentDiscriminator" }]
   string SVSourceExtentDiscriminator[];

      [Description ( 
          "Other identifiers for the source StorageVolume (or "
          "LogicalDisk) as reported in the underlying source "
          "StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.OtherIdentifyingInfo" }]
   string SVSourceOtherIdentifyingInfo[];

      [Description ( 
          "The description of the other identifiers for the source "
          "StorageVolume (or LogicalDisk) as reported in the "
          "underlying source StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { 
          "CIM_StorageVolume.IdentifyingDescriptions" }]
   string SVSourceIdentifyingDescriptions[];

      [Description ( 
          "The user friendly name for the underlying source "
          "StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.ElementName" }]
   string SVSourceElementName;

      [Description ( 
          "The Usage supported by the volume as reported in the "
          "underlying source StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.Usage" }]
   uint16 SVSourceUsage;

      [Description ( 
          "The OtherUsageDescription supported by the volume as "
          "reported in the underlying source StorageVolume (or "
          "LogicalDisk)." ), 
       ModelCorrespondence { 
          "CIM_StorageVolume.OtherUsageDescription" }]
   string SVSourceOtherUsageDescription;

      [Description ( 
          "The ClientSettableUsage supported by the volume as "
          "reported in the underlying source StorageVolume (or "
          "LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.ClientSettableUsage" }]
   uint16 SVSourceClientSettableUsage[];

      [Description ( 
          "The WhenSynced on the StorageSynchronized association "
          "between the underlying source and target StorageVolumes "
          "(or LogicalDisks)." ), 
       ModelCorrespondence { "CIM_StorageSynchronized.WhenSynced" }]
   datetime SSWhenSynced;

      [Description ( 
          "The SyncMaintained on the StorageSynchronized "
          "association between the underlying source and target "
          "StorageVolumes (or LogicalDisks)." ), 
       ModelCorrespondence { "CIM_StorageSynchronized.SyncMaintained" }]
   boolean SSSyncMaintained;

      [Description ( 
          "The CopyType on the StorageSynchronized association "
          "between the underlying source and target StorageVolumes "
          "(or LogicalDisks)." ), 
       ModelCorrespondence { "CIM_StorageSynchronized.CopyType" }]
   uint16 SSCopyType;

      [Description ( 
          "The SyncState on the StorageSynchronized association "
          "between the underlying source and target StorageVolumes "
          "(or LogicalDisks)." ), 
       ModelCorrespondence { "CIM_StorageSynchronized.SyncState" }]
   uint16 SSSyncState;

      [Description ( 
          "The CopyPriority on the StorageSynchronized association "
          "between the underlying source and target StorageVolumes "
          "(or LogicalDisks)." ), 
       ModelCorrespondence { "CIM_StorageSynchronized.CopyPriority" }]
   uint16 SSCopyPriority;

      [Description ( 
          "The SyncType on the StorageSynchronized association "
          "between the underlying source and target StorageVolumes "
          "(or LogicalDisks)." ), 
       ModelCorrespondence { "CIM_StorageSynchronized.SyncType" }]
   uint16 SSSyncType;

      [Description ( 
          "The Mode on the StorageSynchronized association between "
          "the underlying source and target StorageVolumes (or "
          "LogicalDisks)." ), 
       ModelCorrespondence { "CIM_StorageSynchronized.Mode" }]
   uint16 SSMode;

      [Description ( 
          "The ProgressStatus on the StorageSynchronized "
          "association between the underlying source and target "
          "StorageVolumes (or LogicalDisks)." ), 
       ModelCorrespondence { "CIM_StorageSynchronized.ProgressStatus" }]
   uint16 SSProgressStatus;

      [Key, Description ( 
          "The SystemCreationClassName for the target StorageVolume "
          "as reported in the underlying target StorageVolume "
          "instance." ), 
       ModelCorrespondence { 
          "CIM_StorageVolume.SystemCreationClassName" }]
   string SVTargetSystemCreationClassName;

      [Key, Description ( 
          "The SystemName for the target StorageVolume as reported "
          "in the underlying target StorageVolume instance." ), 
       ModelCorrespondence { "CIM_StorageVolume.SystemName" }]
   string SVTargetSystemName;

      [Key, Description ( 
          "The CreationClassName for the target StorageVolume as "
          "reported in the underlying target StorageVolume "
          "instance." ), 
       ModelCorrespondence { "CIM_StorageVolume.CreationClassName" }]
   string SVTargetCreationClassName;

      [Key, Description ( 
          "An opaque identifier of the underlying target "
          "StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.DeviceID" }]
   string SVTargetDeviceID;

      [Description ( 
          "The identifier for the underlying target StorageVolume "
          "(or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.Name" }]
   string SVTargetName;

      [Description ( 
          "The format of the identifier for the underlying target "
          "StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.NameFormat" }]
   uint16 SVTargetNameFormat;

      [Description ( 
          "The NameNamespace as reported in the underlying target "
          "StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.NameNamespace" }]
   uint16 SVTargetNameNamespace;

      [Description ( 
          "The ExtentStatus as reported in the underlying target "
          "StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.ExtentStatus" }]
   uint16 SVTargetExtentStatus[];

      [Description ( 
          "The OperationalStatus as reported in the underlying "
          "target StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.OperationalStatus" }]
   uint16 SVTargetOperationalStatus[];

      [Description ( 
          "The BlockSize for the target StorageVolume as reported "
          "in the underlying target StorageVolume instance." ), 
       ModelCorrespondence { "CIM_StorageVolume.BlockSize" }]
   uint64 SVTargetBlockSize;

      [Description ( 
          "The number of blocks that make up the volume as reported "
          "in the underlying target StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.NumberOfBlocks" }]
   uint64 SVTargetNumberOfBlocks;

      [Description ( 
          "The number of usable blocks in the volume as reported in "
          "the underlying target StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.ConsumableBlocks" }]
   uint64 SVTargetConsumableBlocks;

      [Description ( 
          "The Primordial property for the underlying target "
          "StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.Primordial" }]
   boolean SVTargetPrimordial;

      [Description ( 
          "Whether or not redundancy is supported for the volume as "
          "reported in the underlying target StorageVolume (or "
          "LogicalDisk)." ), 
       ModelCorrespondence { 
          "CIM_StorageVolume.IsBasedOnUnderlyingRedundancy" }]
   boolean SVTargetIsBasedOnUnderlyingRedundancy;

      [Description ( 
          "Whether or not NoSinglePointOfFailure is supported for "
          "the volume as reported in the underlying target "
          "StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { 
          "CIM_StorageVolume.NoSinglePointOfFailure" }]
   boolean SVTargetNoSinglePointOfFailure;

      [Description ( 
          "The DataRedundancy supported by the volume as reported "
          "in the underlying target StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.DataRedundancy" }]
   uint16 SVTargetDataRedundancy;

      [Description ( 
          "The PackageRedundancy supported by the volume as "
          "reported in the underlying target StorageVolume (or "
          "LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.PackageRedundancy" }]
   uint16 SVTargetPackageRedundancy;

      [Description ( 
          "The DeltaReservation supported by the volume as reported "
          "in the underlying target StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.DeltaReservation" }]
   uint8 SVTargetDeltaReservation;

      [Experimental, Description ( 
          "The ExtentDiscriminatorl property for the underlying "
          "target StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.ExtentDiscriminator" }]
   string SVTargetExtentDiscriminator[];

      [Description ( 
          "Other identifiers for the target StorageVolume (or "
          "LogicalDisk) as reported in the underlying target "
          "StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.OtherIdentifyingInfo" }]
   string SVTargetOtherIdentifyingInfo[];

      [Description ( 
          "The description of the other identifiers for the target "
          "StorageVolume (or LogicalDisk) as reported in the "
          "underlying target StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { 
          "CIM_StorageVolume.IdentifyingDescriptions" }]
   string SVTargetIdentifyingDescriptions[];

      [Description ( 
          "The user friendly name for the underlying target "
          "StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.ElementName" }]
   string SVTargetElementName;

      [Description ( 
          "The Usage supported by the volume as reported in the "
          "underlying target StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.Usage" }]
   uint16 SVTargetUsage;

      [Description ( 
          "The OtherUsageDescription supported by the volume as "
          "reported in the underlying target StorageVolume (or "
          "LogicalDisk)." ), 
       ModelCorrespondence { 
          "CIM_StorageVolume.OtherUsageDescription" }]
   string SVTargetOtherUsageDescription;

      [Description ( 
          "The ClientSettableUsage supported by the volume as "
          "reported in the underlying target StorageVolume (or "
          "LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.ClientSettableUsage" }]
   uint16 SVTargetClientSettableUsage[];


};



   [Version( "2.40.0" ), Description("{0}")]
class UNIX_ReplicaPairView : CIM_ReplicaPairView
{


};

