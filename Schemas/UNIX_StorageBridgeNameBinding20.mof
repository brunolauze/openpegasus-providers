//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////



// Copyright (c) 2009 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "ManagedElement is an abstract class that provides a common "
       "superclass (or top of the inheritance tree) for the "
       "non-association classes in the CIM Schema." )]
class CIM_ManagedElement {

      [Description ( 
          "InstanceID is an optional property that may be used to "
          "opaquely and uniquely identify an instance of this class "
          "within the scope of the instantiating Namespace. Various "
          "subclasses of this class may override this property to "
          "make it required, or a key. Such subclasses may also "
          "modify the preferred algorithms for ensuring uniqueness "
          "that are defined below.\n"
          "To ensure uniqueness within the NameSpace, the value of "
          "InstanceID should be constructed using the following "
          "\"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If not null and the above "
          "\"preferred\" algorithm is not used, the defining entity "
          "must assure that the resulting InstanceID is not reused "
          "across any InstanceIDs produced by this or other "
          "providers for the NameSpace of this instance. \n"
          "If not set to null for DMTF-defined instances, the "
          "\"preferred\" algorithm must be used with the <OrgID> "
          "set to CIM." )]
   string InstanceID;

      [Description ( 
          "The Caption property is a short textual description "
          "(one- line string) of the object." ), 
       MaxLen ( 64 )]
   string Caption;

      [Description ( 
          "The Description property provides a textual description "
          "of the object." )]
   string Description;

      [Description ( 
          "A user-friendly name for the object. This property "
          "allows each instance to define a user-friendly name in "
          "addition to its key properties, identity data, and "
          "description information. \n"
          "Note that the Name property of ManagedSystemElement is "
          "also defined as a user-friendly name. But, it is often "
          "subclassed to be a Key. It is not reasonable that the "
          "same property can convey both identity and a "
          "user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of "
          "LogicalDevice), the same information can be present in "
          "both the Name and ElementName properties. Note that if "
          "there is an associated instance of "
          "CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask "
          "and MaxElementNameLen properties defined in that class." )]
   string ElementName;

      [Experimental, Description ( 
          "Generation is an optional, monotonically increasing "
          "property that may be used to identify a particular "
          "generation of the resource represented by this class.\n"
          "If Generation is supported by the implementation, its "
          "value shall not be null. \n"
          "Except as otherwise specified, a value (including null) "
          "of Generation specified at creation time shall be "
          "replaced by null if Generation is not supported by the "
          "implementation or shall be a, (possibly different), "
          "non-null value if the implementation does support Generation.\n"
          "After creation and if supported, Generation shall be "
          "updated, at least once per access, whenever the "
          "represented resource is modified, regardless of the "
          "source of the modification.\n"
          "Note: the Generation value only needs to be updated once "
          "between references, even if the resource is updated many "
          "times. The key point is to assure that it will be "
          "different if there have been updates, not to count each update.\n"
          "Note: unless otherwise specified, the value of "
          "Generation within one instance is not required to be "
          "coordinated with the value of Generation in any other instance.\n"
          "Note:the semantics of the instance, (as defined by its "
          "creation class), define the underlying resource. That "
          "underlying resource may be a collection or aggregation "
          "of resources. And, in that case, the semantics of the "
          "instance further define when updates to constituent "
          "resources also require updates to the Generation of the "
          "collective resource. Default behavior of composite "
          "aggregations should be to update the Generation of the "
          "composite whenever the Generation of a component is updated.\n"
          "Subclasses may define additional requirements for "
          "updates on some or all of related instances.\n"
          "For a particular instance, the value of Generation may "
          "wrap through zero, but the elapsed time between wraps "
          "shall be greater than 10\'s of years.\n"
          "This class does not require Generation to be unique "
          "across instances of other classes nor across instances "
          "of the same class that have different keys. Generation "
          "shall be different across power cycles, resets, or "
          "reboots if any of those actions results in an update. "
          "Generation may be different across power cycles, resets, "
          "or reboots if those actions do not result in an update. "
          "If the Generation property of an instance is non-null, "
          "and if any attempt to update the instance includes the "
          "Generation property, then if it doesn\'t match the "
          "current value, the update shall fail.\n"
          "The usage of this property is intended to be further "
          "specified by applicable management profiles. \n"
          "Typically, a client will read the value of this property "
          "and then supply that value as input to an operation that "
          "modifies the instance in some means. This may be via an "
          "explicit parameter in an extrinsic method or via an "
          "embedded value in an extrinsic method or intrinsic operation.\n"
          "For example: a profile may require that an intrinsic "
          "instance modification supply the Generation property and "
          "that it must match for the modification to succeed." )]
   uint64 Generation;


};



// Copyright (c) 2013 DMTF.  All rights reserved.
   [Abstract, Version ( "2.38.0" ), 
    ClassConstraint { "inv: SoID <> null implies SoOrgID <> null" }, 
    UMLPackagePath ( "CIM::Core::Settings" ), 
    Description ( 
       "CIM_SettingData is used to represent configuration and and "
       "operational parameters for CIM_ManagedElement instances. There "
       "are a number of different uses of CIM_SettingData supported in "
       "the model today. Additional uses may be defined in the future.\n"
       "Instances of CIM_SettingData may represent Aspects of a "
       "CIM_ManagedElement instance. This is modeled using the "
       "CIM_SettingsDefineState association. CIM_SettingData may be "
       "used to define capabilities when associated to an instance of "
       "CIM_Capabilities through the CIM_SettingsDefineCapabilities "
       "association. \n"
       "Instances of CIM_SettingData may represent different types of "
       "configurations for a CIM_ManagedElement, including persistent "
       "configurations, in progress configuration changes, or "
       "requested configurations. The CIM_ElementSettingData "
       "association is used to model the relationship between a "
       "CIM_SettingData instance and the CIM_ManagedElement for which "
       "it is a configuration. \n"
       "When an instance of CIM_SettingData represents a "
       "configuration, the current operational values for the "
       "parameters of the element are reflected by properties in the "
       "Element itself or by properties in its associations. These "
       "properties do not have to be the same values that are present "
       "in the SettingData object. For example, a modem might have a "
       "SettingData baud rate of 56Kb/sec but be operating at "
       "19.2Kb/sec. \n"
       "Note: The CIM_SettingData class is very similar to "
       "CIM_Setting, yet both classes are present in the model because "
       "many implementations have successfully used CIM_Setting. "
       "However, issues have arisen that could not be resolved without "
       "defining a new class. Therefore, until a new major release "
       "occurs, both classes will exist in the model. Refer to the "
       "Core White Paper for additional information. SettingData "
       "instances can be aggregated together into higher- level "
       "SettingData objects using ConcreteComponent associations." )]
class CIM_SettingData : CIM_ManagedElement {

      [Key, Override ( "InstanceID" ), 
       Description ( 
          "Within the scope of the instantiating Namespace, "
          "InstanceID opaquely and uniquely identifies an instance "
          "of this class. To ensure uniqueness within the "
          "NameSpace, the value of InstanceID should be constructed "
          "using the following \"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If the above \"preferred\" "
          "algorithm is not used, the defining entity must assure "
          "that the resulting InstanceID is not reused across any "
          "InstanceIDs produced by this or other providers for the "
          "NameSpace of this instance. \n"
          "For DMTF-defined instances, the \"preferred\" algorithm "
          "must be used with the <OrgID> set to CIM." )]
   string InstanceID;

      [Required, Override ( "ElementName" ), 
       Description ( 
          "The user-friendly name for this instance of SettingData. "
          "In addition, the user-friendly name can be used as an "
          "index property for a search or query. (Note: The name "
          "does not have to be unique within a namespace.)" )]
   string ElementName;

      [Description ( 
          "An instance of CIM_SettingData may correspond to a "
          "well-known configuration that exists for an associated "
          "CIM_ManagedElement. If the ConfigurationName property is "
          "non-NULL, the instance of CIM_SettingData shall "
          "correspond to a well-known configuration for a Managed "
          "Element, the value of the ConfigurationName property "
          "shall be the name of the configuration, and the "
          "ChangeableType property shall have the value 0 or 2. A "
          "value of NULL for the ConfigurationName property shall "
          "mean that the instance of CIM_SettingData does not "
          "correspond to a well-known configuration for a Managed "
          "Element or that this information is unknown." )]
   string ConfigurationName;

      [Description ( 
          "Enumeration indicating the type of setting. 0 \"Not "
          "Changeable - Persistent\" indicates the instance of "
          "SettingData represents primordial settings and shall not "
          "be modifiable. 1 \"Changeable - Transient\" indicates "
          "the SettingData represents modifiable settings that are "
          "not persisted. Establishing persistent settings from "
          "transient settings may be supported. 2 \"Changeable - "
          "Persistent\" indicates the SettingData represents a "
          "persistent configuration that may be modified. 3 \"Not "
          "Changeable - Transient\" indicates the SettingData "
          "represents a snapshot of the settings of the associated "
          "ManagedElement and is not persistent." ), 
       ValueMap { "0", "1", "2", "3" }, 
       Values { "Not Changeable - Persistent", 
          "Changeable - Transient", "Changeable - Persistent", 
          "Not Changeable - Transient" }]
   uint16 ChangeableType;

      [Experimental, Description ( 
          "The value of each CIM_ComponentSetting instance includes "
          "a CIM_SettingData instance that specifies further values "
          "for this CIM_SettingData instance. The values are "
          "interpreted according to the values of the Policy, "
          "ValueRole, and ValueRange properties included in each "
          "CIM_ComponentSetting instance.\n"
          "\n"
          "Note: If SoID is not null, then the embedded "
          "ComponentSetting elements may be interpreted as ITIL "
          "Service Level Targets.\n"
          "Note: For CIM v3, the type of ComponentSetting will be "
          "CIM_ComponentSetting. This is not represented as an "
          "EmbeddedInstance in CIM v2 to avoid a circular "
          "dependency that CIM v2 compilers cannot handle." ), 
       EmbeddedObject]
   string ComponentSetting[];

      [Experimental, Description ( 
          "If not Null, the CIM_SettingData instance is being used "
          "to represent an ITIL element: either a service option, a "
          "service level requirement, or a service level target. "
          "The value SoID must be unique in the context of an "
          "Organization unique identifier specified in SoOrgID." ), 
       ModelCorrespondence { "CIM_SettingData.SoOrgID" }]
   string SoID;

      [Experimental, Description ( 
          "If not Null, the CIM_SettingData instance is being used "
          "to represent an ITIL element: either a service option, a "
          "service level requirement, or a service level target. "
          "When not Null, the value of SoOrgID shall be a unique "
          "identifier for the organization that specifies the value "
          "of SoID." ), 
       ModelCorrespondence { "CIM_SettingData.SoID" }]
   string SoOrgID;


};



// Copyright (c) 2005 DMTF.  All rights reserved.
// <change cr="sysdevCR00696.002" type ="new">LocalPortName and
// LocalPortNameType promoted.</
// <change cr="ArchCR00066.004" type="add">Add UmlPackagePath
// qualifier values to CIM Schema.</change>
// ==================================================================
//  CIM_StorageNameBinding
// ==================================================================
   [Experimental, Version ( "2.8.1000" ), 
    UMLPackagePath ( "CIM::Device::StorageNameBinding" ), 
    Description ( 
       "StorageNameBinding instances represent bindings between "
       "transport-specific devices names and either OS device "
       "names/addresses or virtual initiator names. Bindings are "
       "defined by administrators and are persistent. The binding "
       "defines names of other elements that may or may not correlate "
       "to other CIM classes. It must be possible to create these "
       "bindings in cases when CIM instances for these other elements "
       "are not available. This may be because the elements are "
       "temporarily unavailable or because the elements are managed by "
       "some other providers or because the binding represents a "
       "\'black listed\' device name. A SettingData models the "
       "persistence of the binding in the absence of the elements. In "
       "the descriptions below, FC API refers to the FC API as "
       "specified in the t11_5 workgroup, and IMA refers to the iSCSI "
       "Management API as specified in the SNIA IPS Management "
       "workgroup. \n"
       "\n"
       "Three types of bindings are modeled: \n"
       "- OSStorageNameBinding models a binding from a storage "
       "elements to OS device names or addresses (as used in FC API "
       "PersistentBindings and IMA ExposeLun. One side of the binding "
       "represents a device (as viewed from the system scoping the "
       "binding) and the name exposed by the scoping system. For "
       "example, Fibre Channel HBAs support binding of Fibre Channel "
       "port names (and optionally a SCSI logical unit identifier) to "
       "OS device names. Each time the system or device is stopped and "
       "restated, the same OS device name is bound to the device. \n"
       "- StorageBridgeNameBinding models gateways where a name valid "
       "for one transport is mapped to a name valid for a different "
       "transport. This binding is used in bridge devices that allow "
       "Infiniband or iSCSI host adapters to connect to Fibre Channel "
       "devices. \n"
       "- The third type of binding is similar to the first, but no OS "
       "device name or address is provided, the OS uses its usual "
       "rules to assign names. For this type of binding, the "
       "superclass can be used." )]
class CIM_StorageNameBinding : CIM_SettingData {

      [Description ( 
          "BindingType describes the type of binding expressed by "
          "the setting data instance. It also defines the "
          "interpretation of TargetName. \n"
          "BindToFcDID, FcApiBindToWWPN, and FcApiBindToWWNW "
          "represent bindings in a fibre channel HBA to a D_ID "
          "(destination ID), WWPN (World Wide Port Name), or WWNW "
          "(World Wide Node Name). \n"
          "LUID is a binding based on a SCSI Inquiry VPD page 83, "
          "Association 0 logical unit identifier. \n"
          "\'iSCSI Name\' represents a binding to an iSCSI target "
          "as used in IMA for Static Configuration (if "
          "TargetLUNumberValid is false) or an IMA (Un)Exposed LUN "
          "record (if TargetLUNumberValid is true). \n"
          "\'iSCSI Network Address\' represents a binding to an "
          "iSCSI network entity. It is formatted as a host name or "
          "IP address optionally followed by a plus (\'+\') and a "
          "TCP port number. If \'+port<#>\' is omitted, the iSCSI "
          "default (3260) is used. \n"
          "\'Bridge Binding\' represents a binding between "
          "initiator IDs in a transport bridge device." ), 
       ValueMap { "2", "3", "4", "5", "6", "7", "8" }, 
       Values { "FcApiBindToDID", "FcApiBindToWWPN", 
          "FcApiBindToWWNN", "BindToLUID", "iSCSI Target Name", 
          "iSCSI Network Address", "Bridge Binding" }, 
       MappingStrings { "FC API.INCITS-T11| HBA_BIND_TYPE" }]
   uint16 BindingType;

      [Description ( 
          "If true, then all target logical units are bound to the "
          "OS. Not valid to set this if BindingType is BindToLUID." ), 
       MappingStrings { "FC API.INCITS-T11| HBA_BIND_TARGETS" }, 
       ModelCorrespondence { 
          "CIM_StorageNameBinding.LogicalUnitNumber", 
          "CIM_StorageNameBinding.BindingType" }]
   boolean BindAllLogicalUnits = false;

      [Description ( 
          "If false (the default), the specified target unit(s) is "
          "exposed to the OS. If true, the OS-related properties "
          "are ignored, and the target related properties identify "
          "target unit(s) that are hidden from the OS. In most "
          "cases, this is false." )]
   boolean Hide = false;

      [Description ( 
          "The name (dependent on BindingType) identifying the SCSI "
          "target. If BindingType is FcApiBindToDID, TargetName "
          "holds a hexadecimal-encoded representation of the 32-bit "
          "D_ID \n"
          "and corresponds to FC API HBA_FCPID.FcId. \n"
          "If BindingType is FcApiBindToWWPN or FcApiBindToWWNN, "
          "TargetName holds a hexadecimal-encoded representation of "
          "the 64-bit FC Port or Node World Wide Name. \n"
          "If BindingType is BindToLUID, TargetName holds a SCSI "
          "Logical Unit Name from Inquiry VPD page 83, Association "
          "0 as defined in SCSI Primary Commands. If the identifier "
          "descriptor (in the SCSI response) has Code Set Binary, "
          "then TargetName is its hexadecimal-encoded value." ), 
       MappingStrings { "FC API.INCITS-T11| HBA_FcpId | FcId", 
          "FC API.INCITS-T11| HBA_FcpId | NodeWWN", 
          "FC API.INCITS-T11| HBA_FcpId | PortWWN", 
          "FC API.INCITS-T11| HBA_FcpId | FcId", 
          "FC API.INCITS-T11| HBA_LUID" }]
   string TargetName;

      [Description ( 
          "A string containing a hexadecimal-encoded representation "
          "of the 64-bit SCSI Logical Unit Number in the format "
          "described in the T10 SCSI Architecture Model "
          "specification. This format consists of four 2-byte "
          "fields. In most cases, the human-oriented logical unit "
          "number will be in the high- order two bytes and the "
          "low-order six bytes will be zero. This property is only "
          "valid if BindAllLogicalUnits is false and BindingType is "
          "not ." ), 
       MappingStrings { "FC API.INCITS-T11| HBA_FcpId | FcpLun" }, 
       ModelCorrespondence { 
          "CIM_StorageNameBinding.BindAllLogicalUnits" }]
   string LogicalUnitNumber;

      [Description ( 
          "A status associated with the previous attempt to enable "
          "the binding - this may be set many times after the "
          "binding is created. The first subset is defined by FC "
          "API: \n"
          "BadOSBus - request included a bad OS SCSI bus number \n"
          "BadOSTarget - request included a bad SCSI target number \n"
          "BadOSLun - request included a bad OS SCSI logical unit "
          "number \n"
          "OSAddressAlreadyBound - request included an OS SCSI ID "
          "that was already bound \n"
          "BadFcid - request included a bad or unlocatable FCP "
          "Target FCID \n"
          "BadWWNN - request included a bad FCP Target Node_Name \n"
          "BadWWPN - request included a bad FCP Target Port Name \n"
          "BadTargetLU - request included an FCP Logical Unit "
          "Number not defined by the identified Target. \n"
          "BadLUID - request included an undefined in inaccessible "
          "LUID." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10" }, 
       Values { "Unknown", "Other", "OK", "BadOSBus", "BadOSTarget", 
          "BadOSLun", "BadFcId", "BadWWNN", "BadWWPN", 
          "BadTargetLU", "BadLUID" }, 
       MappingStrings { "FC API.INCITS-T11|HBA_FCPBINDING2|Status" }, 
       ModelCorrespondence { "CIM_StorageNameBinding.OtherStatus" }]
   uint32 Status;

      [Description ( 
          "A string describing the status if Status is \'Other\'." ), 
       ModelCorrespondence { "CIM_StorageNameBinding.Status" }]
   string OtherStatus;

      [Description ( "The type of the port in LocalPortName." ), 
       ValueMap { "2", "3" }, 
       Values { "FC Port WWN", "iSCSI Name" }, 
       ModelCorrespondence { "CIM_StorageNameBinding.LocalPortName" }]
   uint16 LocalPortNameType;

      [Description ( 
          "The port name on the current system associated with this "
          "persistent binding." ), 
       MappingStrings { "FC API.INCITS-T11|hbaPortWWN" }, 
       ModelCorrespondence { 
          "CIM_StorageNameBinding.LocalPortNameType" }]
   string LocalPortName;


};



// Copyright (c) 2005 DMTF.  All rights reserved.
   [Experimental, Version ( "2.8.1000" ), 
    UMLPackagePath ( "CIM::Device::StorageNameBinding" ), 
    Description ( 
       "StorageBridgeBinding represents a binding between two "
       "transport-specific initiator port names. One name is "
       "associated with the initiator port in the format appropriate "
       "for the port type. The other name is an administratively "
       "assigned name with a format appropriate for transport on the "
       "target side of the bridge. This virtual initiator port name is "
       "used by the bridge when it communicates with targets from the "
       "bound initiator. This virtual name is needed for target device "
       "management functions that use initiator port names, such as "
       "LUN masking and mapping. \n"
       "For example, an Infiniband/FibreChannel bridge support "
       "Infiniband initiator ports and allows the administrator to "
       "assign a Fibre Channel Port WWN (AssignedPortName) to each "
       "Infiniband initiator (InitiatorPortName). \n"
       "The TargetName property from the superclass may be used to "
       "restrict this binding to a specific target. If TargetPort is "
       "left null, the binding affects all targets seen by the bridge." )]
class CIM_StorageBridgeNameBinding : CIM_StorageNameBinding {

      [Override ( "BindingType" ), 
       Description ( 
          "StorageBridgeNameBinding only allows one binding type." ), 
       ValueMap { "8" }, 
       Values { "Bridge Binding" }]
   uint16 BindingType;

      [Description ( 
          "The name of the initiator port using the name Type of "
          "the actual transport." ), 
       MappingStrings { 
          "FC API.INCITS-T11|Bind_SRP_Initiator|SRP Initiator Port Identifier" }, 
       ModelCorrespondence { 
          "CIM_StorageBridgeNameBinding.InitiatorPortNameType" }]
   string InitiatorPortName;

      [Description ( 
          "The name of the initiator port using the name Type of "
          "the actual transport." ), 
       ValueMap { "2", "3", "4" }, 
       Values { "FibreChannel Port WWN", "SRP Port Identifier", 
          "iSCSI Name" }, 
       ModelCorrespondence { 
          "CIM_StorageBridgeNameBinding.InitiatorPortName" }]
   uint16 InitiatorPortNameType;

      [Description ( 
          "The name of the initiator port assigned by the "
          "administrator using the name type of the target-side "
          "transport." ), 
       MappingStrings { 
          "FC API.INCITS-T11|Bind_SRP_Initiator|FC_Port Name Identifier" }, 
       ModelCorrespondence { 
          "CIM_StorageBridgeNameBinding.AssignedPortNameType" }]
   string AssignedPortName;

      [Description ( 
          "The name of the initiator port using the name Type of "
          "the actual transport." ), 
       ValueMap { "2", "3", "4" }, 
       Values { "FibreChannel Port WWN", "SRP Port Identifier", 
          "iSCSI Name" }, 
       ModelCorrespondence { 
          "CIM_StorageBridgeNameBinding.AssignedPortName" }]
   uint16 AssignedPortNameType;


};



   [Version( "2.40.0" ), Description("{0}")]
class UNIX_StorageBridgeNameBinding : CIM_StorageBridgeNameBinding
{


};

